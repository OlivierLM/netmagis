#!/usr/bin/perl

# $Id: maj-poller-ap,v 1.3 2009-08-24 08:02:58 boggia Exp $
# ###################################################################
# boggia : Creation : 25/03/08
#
# Creation automatique des bases de supervision des AP
# en fonction du fichier /local/obj999/etc/liste_sites_wifi
# Ce programme doit etre lancé apres chaque nouvelle installation de
# bornes WiFi
#
use SNMP_util;
use Socket;
use Net::hostent;
use strict;

# fichier de configuration principal et chargement des focntions de base
my $conf_file = "/local/obj999/etc/obj999.conf";
require "/local/obj999/lib/libmetro.pl";
#

our $liste_sites_wifi = read_conf_file("$conf_file","FILE_LISTE_SITES_WIFI");
our $file_index_graph = read_conf_file("$conf_file","FILE_INDEX_GRAPHS");
our $dir_bases = read_conf_file("$conf_file","DIR_RRD_DB");
our $dir_etc = read_conf_file("$conf_file","DIR_ETC");
our $dir_majdb = read_conf_file("$conf_file","DIR_PROBES");
our $communaute = read_conf_file("$conf_file","O2_SNMP_COMMUNITY");

my %liste_if_ap =   (	'Do0.900'   => 1,
			'Do0.901'   => 1,
			'Do0.902'   => 1,
			'Do0.903'   => 1,
			'Do0.3902'   => 1,		
		    );

my %ap;
our $nb_MAX_lignes = 40;
my %ap_by_etab;
my $nb_total_ap = 0;

# lecture du fichier contenant la liste des sites wifi
open(FILE,"$liste_sites_wifi");
while(<FILE>)
{
    chomp $_;
    my ($nom_site,$liste,$nom_etab) = (split(/:/,$_))[0,1,2];
    my @liste_ap = split(/;/,$liste);
    my $elem;
    
    foreach $elem (@liste_ap)
    {
	if($elem =~/-ap[0-9]+/)
	{
	    # cherche adresse IP correspondante a l'AP
	    my $h;
	    if($h = gethostbyname($elem))
	    {
		my $ip_addr = inet_ntoa($h->addr);
	    
		$ap{$elem} = $ip_addr;

		print "$elem => $ap{$elem}\n";
	    }
	    else
	    {
		print "ERREUR DNS : $elem\n";
	    }

	    # POUR LA COMPTA DU NOMBRE DE BORNES
	    $ap_by_etab{$nom_etab} ++;
	    $nb_total_ap ++;
	}
    }
}
close(FILE);

my $a;

# teste si le repertoire dans lequel sera cree le fichier existe deja
foreach $a (keys %ap)
{
    my ($repertoire,$num_equip) = cree_nom_repertoire($a);
   
    #print "$a => repertoire $repertoire\n"; 
	
    # teste si le reppertoire existe deja
    opendir(DIR_BASE,$dir_bases);
    my @REP = grep(!/^\.\.?$/, readdir DIR_BASE);
    closedir(DIR_BASE);

    my $existe_rep = 0;	
    my $elem;

    foreach $elem (@REP)
    {
	if($elem eq $repertoire)
        {
	    #print "Le repertoire existe deja. La nouvelle base sera cree dans ce repertoire\n";
            $existe_rep = 1;
        }
    } 

    # interrogation de chaque AP
    my $param = $communaute."@".$ap{$a};
    # interrogation de l'equipement et recuperation des donnees
    # recuperation de la liste des ports
    my @ifName = ();
    &snmpmapOID("ifname","1.3.6.1.2.1.31.1.1.1.1");
    @ifName = &snmpwalk($param,"ifname");

    my $t_ifName = @ifName;
    my @tab_if_ap = ();
    my $index_if_ap = 0;
    my $x;

    # si l'equipement repond
    #print "$a : $t_ifName\n"; 
    if($t_ifName > 1)
    {
	for($x=0;$x<$t_ifName;$x++)
	{
	    if($ifName[$x]=~m/Do0\./)
	    {
		my ($if)=(split(/:/,$ifName[$x]))[1];
	    
		if($if !~/811/ && $if !~/100/ && ($liste_if_ap{$if} == 1))
		{
		    $tab_if_ap[$index_if_ap] = $if;
		    $index_if_ap ++;
		}
	    }
	}

	# creation du repertoire
	if($existe_rep == 0)
	{
	    system("mkdir $dir_bases/$repertoire");
	    system("chown obj999:obj999 $dir_bases/$repertoire");

	    print "creation d'un nouveau repertoire $dir_bases/$repertoire\n";
	}

	my $liste_graph;
	my $nom_fichier_base;
    
	for($x=0;$x<$index_if_ap;$x++)
	{
	    ##### creation de la base
	    # nom du fichier
	    $nom_fichier_base = $num_equip;
	    if($nom_fichier_base eq "")
	    {
		$nom_fichier_base = "if";
	    }
	    my ($if_ap,$vlan_ap)=(split(/\./,$tab_if_ap[$x]))[0,1];
	    $nom_fichier_base = "$nom_fichier_base" . "-" . "$if_ap" . "_" . "$vlan_ap.rrd";

	    # teste si la base existe deja
	    #
	    my $param1 = "$dir_bases/$repertoire";
	    my $existe_base = test_base_existe($param1,$nom_fichier_base);
	    ###

	    # ecriture de la base dans son repertoire
	    if($existe_base == 0)
	    {
		$param = "$dir_bases/$repertoire/$nom_fichier_base";

		# plus de creation de nouvelle base de trafic
		# MAINTENANT c'est TOPO qui gère
		
		#creeBaseOsirisAP($param,100000000);
		#print "Creation d'une nouvelle base de trafic : $param\n";
		#system("chown obj999:obj999 $dir_bases/$repertoire/$nom_fichier_base");
	    }

	    my $commande = "ifNom-ap.pl $dir_bases/$repertoire/$nom_fichier_base $ap{$a} $communaute -$tab_if_ap[$x]";

	    if($x < $index_if_ap-1)
	    {
		$liste_graph = $liste_graph . "$param1/$nom_fichier_base,";
	    }
	    else
	    {
		$liste_graph = $liste_graph . "$param1/$nom_fichier_base";
	    }

	    ######mise a jour des fichiers lancant les actions d'update des bases
	    # ON ne fait plus, c'est TOPO qui gere
	    #maj_fichier_update($dir_majdb,$commande,$nb_MAX_lignes);
	}
	
	# parametre du graphique dans index.graph

        my $nom_graphique = $a . "_trafic";
	my $test_graph = `grep $nom_graphique $file_index_graph`;
	if($test_graph eq "")
	{   
	    # ON ne fait plus, c'est TOPO qui gere
	    # system("echo \"$nom_graphique;aggregation-trafic2-moyen;$index_if_ap;$liste_graph;Trafic sur $a\" >> $file_index_graph");
	}

        #creation de la base comptant le nombre d'associations
        #####creation de la base
                #nom du fichier
        $nom_fichier_base = $num_equip;
        $nom_fichier_base = "$nom_fichier_base" . "-" . "assoc.rrd";

        #print "\n\nNom de la base d'association : $nom_fichier_base\n";

        #teste si la base existe deja
        #
        my $param1 = "$dir_bases/$repertoire";
        my $existe_base = test_base_existe($param1,$nom_fichier_base);
        ###
	
	#ecriture de la base dans son repertoire
        if($existe_base == 0)
        {
                $param = "$dir_bases/$repertoire/$nom_fichier_base";

                creeBaseApAssoc($param);
		print "creation d'une nouvelle base d'association : $param\n";
                system("chown obj999:obj999 $dir_bases/$repertoire/$nom_fichier_base");
        }

        my $commande = "assoc_ap.pl $dir_bases/$repertoire/$nom_fichier_base $ap{$a} $communaute";

        maj_fichier_update($dir_majdb,$commande,$nb_MAX_lignes);

        # parametre du graphique dans index.graph
        my $nom_graphique = $a . "_associations";
	my $test_graph = `grep $nom_graphique $file_index_graph`;
        if($test_graph eq "")
        {
	    system("echo \"$nom_graphique;GaugeNbConAp;1;$param1/$nom_fichier_base;Associations sur $a\" >> $file_index_graph");
	} 
    }
    else
    {
	print "$a ne repond pas\n";
    }
}

# affichage du nombre de bornes par etablissement
foreach $a (keys %ap_by_etab)
{
    print "$a : $ap_by_etab{$a} bornes\n";
}
# affiche le nombre total de bornes
print "--------------------------\nTOTAL : $nb_total_ap bornes\n";


# creation du nom du repertoire dans lequel sera stocke la base
sub cree_nom_repertoire
{
    my ($ap) = @_;
    my $rep_base = (split(/\./,$ap))[0];
    my $nom_eq = $rep_base;
    my @nom_rep = split(/-/,$rep_base);
    my $taille_nom_rep = @nom_rep;
    my ($repertoire,$num_equip);
        
    if($taille_nom_rep > 2)
    {
	my $i;
	$repertoire = "$nom_rep[0]";
        for($i=1;$i<$taille_nom_rep-1;$i++)
        {
	    $repertoire = "$repertoire" . "-";
            $repertoire = "$repertoire" . "$nom_rep[$i]";
        }
        $num_equip = $nom_rep[$taille_nom_rep-1];
    }
    elsif($taille_nom_rep == 2)
    {
        $repertoire = $nom_rep[0];
        $num_equip = $nom_rep[1];
    }
    
    return ($repertoire,$num_equip);
}




# fonction qui teste l'existance d'une DB dans un repertoire
sub test_base_existe
{
    my ($rep,$nom_fichier_db)=@_;
    
    my @tests_existe = ();
    my $elem;
    #teste si le fichier de la base existe deja
    opendir(BASE,"$rep");
    my @REPBASE=grep(!/^\.\.?$/, readdir BASE);
    closedir(BASE);
    
    my $existe_base = 0;
    foreach $elem (@REPBASE)
    {
	if($elem eq $nom_fichier_db)
	{
	    $existe_base = 1;
	}
    }
    return($existe_base);
}



# fonction qui met a jour une DB dans un repertoire 
sub maj_fichier_update
{
    my ($dir_majdb,$commande,$nb_MAX_lignes)=@_;

    my $i;
    my @tab_corresp;
    opendir(DIR_MAJDB,$dir_majdb);
    my @majdb=grep(/^majDB/, readdir DIR_MAJDB);
    closedir(DIR_MAJDB);
    #######mise a jour des fichiers majdb
    #### controle des fichiers existants

    #nombre de fichiers majdb*
    my $nb_majdb = @majdb;
    #index_maximum des fichiers majdb
    my $indexmax_majdb = 0;
    my $ajour = 0;
    #flag permettant de voir si la ligne de commande est deja prï¿½sente
    my $trouve_commande = 0;
    #flag permettant de voir si la base dans laquelle on veut ecrire est deja mentionnée
    my $trouve_base = "rien";

    for($i=0;$i<$nb_majdb;$i++)
    {
	#nombre de lignes dans un fichier. Ne doit pas exceder un seuil MAX
        my $nb_lignes = 0;
        my ($ind) = (split(/\./,$majdb[$i]))[1];
        #verifie la syntaxe du nom du fichier et controle l'index
        if($ind=~m/[0-9]+/)
        {
	    if($ind > $indexmax_majdb)
            {
		$indexmax_majdb = $ind;
            }
            #ouverture du fichier
            open(MAJDB,"$dir_majdb/$majdb[$i]");
            while(<MAJDB>)
            {
		if(!/^#/ && !/^\s*$/)
                {
		    $nb_lignes ++;
                    ($_)=(split(/\n/,$_))[0];
                    #print "$commande:$_ fin\n";
                    if($_ =~ /$commande/)
                    {
			$trouve_commande = 1;
                        #print "\nLa ligne de commande pour la mise a jour de la db existe deja dans le fichier $majdb[$i].\n";
                    }
		    else
		    {
			my ($base_fichier) = (split(/\s+/,$_))[1];
			my ($base_ligne) = (split(/\s+/,$commande))[1];

			if($base_fichier eq $base_ligne)
			{
			    print "La base $_ existe deja dans le fichier $majdb[$i] avec la ligne $_\n";
			    $trouve_base = $majdb[$i];
			}
		    }
                }
            }
            close(MAJDB);
            $tab_corresp[$i][0]=$majdb[$i];
            $tab_corresp[$i][1]=$nb_lignes;
        }
    }

    ####mise a jour des fichiers
    if($trouve_commande == 0)
    {
	if($trouve_base eq "rien")
	{
	    my $index_tab = "nan";
	    my $min;
	    my $nb_lignes_tab = @tab_corresp;

	    if($nb_lignes_tab > 0)
	    {
		$min = $tab_corresp[0][1];
		$index_tab = 0;

		for($i=1;$i<$nb_lignes_tab;$i++)
		{
		    if($min > $tab_corresp[$i][1])
		    {
			$min = $tab_corresp[$i][1];
			$index_tab = $i;
		    }
		}
	    }
	    if($min <= $nb_MAX_lignes && $index_tab ne "nan")
	    {
		print "Ecriture dans update_rrd de $commande\n";
		open(MAJDB,">>$dir_majdb/$tab_corresp[$index_tab][0]");
		print MAJDB "$commande\n";
		close(MAJDB);
		system("chmod 744 $dir_majdb/$tab_corresp[$index_tab][0]");
		system("chown obj999:obj999 $dir_majdb/$tab_corresp[$index_tab][0]");
		print "Le fichier $dir_majdb/$tab_corresp[$index_tab][0] a ete mis a jour.\n";
	    }
	    else
	    {
		print "Ecriture dans update_rrd de $commande\n";
		$indexmax_majdb ++;
		my $fich = "$dir_majdb/majDB";
		$fich = "$fich" . "." . "$indexmax_majdb";
		open(MAJDB,">>$fich");
		print MAJDB "$commande\n";
		close(MAJDB);
		system("chmod 744 $fich");
		system("chown obj999:obj999 $fich");
		print "Le fichier $fich a ete mis a jour.\n";
	    }
	}
	else
	{
		# la base est déja mentionnee dans $majdb[$i]
		# on met à jour le fichier avec la nouvelle ligne
		print "Ecriture dans update_rrd : $trouve_base de $commande\n";
		open(MAJDB,"$dir_majdb/$trouve_base");
		open(NEWMAJDB,">$dir_majdb/$trouve_base.new");
		while(<MAJDB>)
		{
		    chomp;
		    my ($base_fichier) = (split(/\s+/,$_))[1];
                    my ($base_ligne) = (split(/\s+/,$commande))[1];

                    if($base_fichier eq $base_ligne)
                    {
                        print NEWMAJDB "$commande\n";
                    }
		    else
		    {
			print NEWMAJDB "$_\n";
		    }
		}
		close(MAJDB);
		close(NEWMAJDB);
		system("mv $dir_majdb/$trouve_base.new	$dir_majdb/$trouve_base");
		system("chown obj999:obj999 $dir_majdb/$trouve_base");
		print "Le fichier $trouve_base a ete mis a jour.\n";
	}
    }
}

