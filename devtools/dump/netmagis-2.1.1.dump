--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: dns; Type: SCHEMA; Schema: -; Owner: nm
--

CREATE SCHEMA dns;


ALTER SCHEMA dns OWNER TO nm;

--
-- Name: global; Type: SCHEMA; Schema: -; Owner: nm
--

CREATE SCHEMA global;


ALTER SCHEMA global OWNER TO nm;

--
-- Name: mac; Type: SCHEMA; Schema: -; Owner: nm
--

CREATE SCHEMA mac;


ALTER SCHEMA mac OWNER TO nm;

--
-- Name: pgauth; Type: SCHEMA; Schema: -; Owner: nm
--

CREATE SCHEMA pgauth;


ALTER SCHEMA pgauth OWNER TO nm;

--
-- Name: topo; Type: SCHEMA; Schema: -; Owner: nm
--

CREATE SCHEMA topo;


ALTER SCHEMA topo OWNER TO nm;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: pltcl; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pltcl WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION pltcl; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pltcl IS 'PL/Tcl procedural language';


SET search_path = mac, pg_catalog;

--
-- Name: ipmac_t; Type: TYPE; Schema: mac; Owner: nm
--

CREATE TYPE ipmac_t AS (
	ip inet,
	mac macaddr
);


ALTER TYPE mac.ipmac_t OWNER TO nm;

--
-- Name: portmac_t; Type: TYPE; Schema: mac; Owner: nm
--

CREATE TYPE portmac_t AS (
	mac macaddr,
	port text,
	vlanid integer
);


ALTER TYPE mac.portmac_t OWNER TO nm;

SET search_path = public, pg_catalog;

--
-- Name: iprange_t; Type: TYPE; Schema: public; Owner: nm
--

CREATE TYPE iprange_t AS (
	a inet,
	n integer
);


ALTER TYPE public.iprange_t OWNER TO nm;

SET search_path = pgauth, pg_catalog;

--
-- Name: add_soundex(); Type: FUNCTION; Schema: pgauth; Owner: nm
--

CREATE FUNCTION add_soundex() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	BEGIN
	    NEW.phnom    := pgauth.SOUNDEX (NEW.nom) ;
	    NEW.phprenom := pgauth.SOUNDEX (NEW.prenom) ;
	    RETURN NEW ;
	END ;
	$$;


ALTER FUNCTION pgauth.add_soundex() OWNER TO nm;

--
-- Name: soundex(text); Type: FUNCTION; Schema: pgauth; Owner: nm
--

CREATE FUNCTION soundex(text) RETURNS text
    LANGUAGE pltcl STRICT
    AS $_$
	    array set soundexFrenchCode {
		a 0 b 1 c 2 d 3 e 0 f 9 g 7 h 0 i 0 j 7 k 2 l 4 m 5
		n 5 o 0 p 1 q 2 r 6 s 8 t 3 u 0 v 9 w 9 x 8 y 0 z 8
	    }
	    set accentedFrenchMap {
		é e  ë e  ê e  è e   É E  Ë E  Ê E  È E
		 ä a  â a  à a        Ä A  Â A  À A
		 ï i  î i             Ï I  Î I
		 ö o  ô o             Ö O  Ô O
		 ü u  û u  ù u        Ü U  Û U  Ù U
		 ç ss                 Ç SS
	    }
	    set key ""

	    # Map accented characters
	    set TempIn [string map $accentedFrenchMap $1]

	    # Only use alphabetic characters, so strip out all others
	    # also, soundex index uses only lower case chars, so force to lower

	    regsub -all {[^a-z]} [string tolower $TempIn] {} TempIn
	    if {$TempIn eq ""} then {
		return Z000
	    }
	    set last [string index $TempIn 0]
	    set key  [string toupper $last]
	    set last $soundexFrenchCode($last)

	    # Scan rest of string, stop at end of string or when the key is full

	    set count    1
	    set MaxIndex [string length $TempIn]

	    for {set index 1} {(($count < 4) && ($index < $MaxIndex))} {incr index } {
		set chcode $soundexFrenchCode([string index $TempIn $index])
		# Fold together adjacent letters sharing the same code
		if {$last ne $chcode} then {
		    set last $chcode
		    # Ignore code==0 letters except as separators
		    if {$last != 0} then {
			set key $key$last
			incr count
		    }
		}
	    }
	    return [string range ${key}0000 0 3]
	$_$;


ALTER FUNCTION pgauth.soundex(text) OWNER TO nm;

SET search_path = public, pg_catalog;

--
-- Name: gen_norm_iddom(integer); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION gen_norm_iddom(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
	BEGIN
	    UPDATE dns.zone_normale SET generer = 1
		    WHERE selection = (
			    SELECT domaine.nom
				    FROM dns.domaine
				    WHERE domaine.iddom = $1
			    ) ;
	    RETURN 1 ;
	END ;
	$_$;


ALTER FUNCTION public.gen_norm_iddom(integer) OWNER TO nm;

--
-- Name: gen_norm_idrr(integer); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION gen_norm_idrr(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
	BEGIN
	    UPDATE dns.zone_normale SET generer = 1
		    WHERE selection = (
			    SELECT domaine.nom
				    FROM dns.domaine, dns.rr
				    WHERE rr.idrr = $1 AND rr.iddom = domaine.iddom
			    ) ;
	    RETURN 1 ;
	END ;
	$_$;


ALTER FUNCTION public.gen_norm_idrr(integer) OWNER TO nm;

--
-- Name: gen_relais(integer); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION gen_relais(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
	BEGIN
	    UPDATE dns.zone_normale SET generer = 1
		WHERE selection = (SELECT nom FROM dns.domaine WHERE iddom = $1) ;
	    RETURN 1 ;
	END ;
	$_$;


ALTER FUNCTION public.gen_relais(integer) OWNER TO nm;

--
-- Name: gen_rev4(inet); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION gen_rev4(inet) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
	BEGIN
	    UPDATE dns.zone_reverse4 SET generer = 1 WHERE $1 <<= selection ;
	    RETURN 1 ;
	END ;
	$_$;


ALTER FUNCTION public.gen_rev4(inet) OWNER TO nm;

--
-- Name: gen_rev6(inet); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION gen_rev6(inet) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
	BEGIN
	    UPDATE dns.zone_reverse6 SET generer = 1 WHERE $1 <<= selection ;
	    RETURN 1 ;
	END ;
	$_$;


ALTER FUNCTION public.gen_rev6(inet) OWNER TO nm;

--
-- Name: generer_dhcp(); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION generer_dhcp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	BEGIN
	    UPDATE dns.dhcp SET generer = 1 ;
	    RETURN NEW ;
	END ;
	$$;


ALTER FUNCTION public.generer_dhcp() OWNER TO nm;

--
-- Name: ipranges(cidr, integer, integer); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION ipranges(reseau cidr, lim integer, grp integer) RETURNS SETOF iprange_t
    LANGUAGE plpgsql
    AS $$
	DECLARE
	    inarange BOOLEAN ;
	    r RECORD ;
	    q iprange_t%ROWTYPE ;
	BEGIN
	    PERFORM markcidr (reseau, lim, grp) ;
	    inarange := FALSE ;
	    FOR r IN (SELECT adr, avail FROM allip ORDER BY adr)
	    LOOP
		IF inarange THEN
		    -- (q.a, q.n) is already a valid range
		    IF r.avail = 1 THEN
			q.n := q.n + 1 ;
		    ELSE
			RETURN NEXT q ;
			inarange := FALSE ;
		    END IF ;
		ELSE
		    -- not inside a range
		    IF r.avail = 1 THEN
			-- start a new range (q.a, q.n)
			q.a := r.adr ;
			q.n := 1 ;
			inarange := TRUE ;
		    END IF ;
		END IF ;
	    END LOOP ;
	    IF inarange THEN
		RETURN NEXT q ;
	    END IF ;
	    DROP TABLE allip ;
	    RETURN ;
	END ;
	$$;


ALTER FUNCTION public.ipranges(reseau cidr, lim integer, grp integer) OWNER TO nm;

--
-- Name: markcidr(cidr, integer, integer); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION markcidr(reseau cidr, lim integer, grp integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
	DECLARE
	    min INET ;
	    max INET ;
	    a INET ;
	BEGIN
	    min := INET (HOST (reseau)) ;
	    max := INET (HOST (BROADCAST (reseau))) ;

	    IF max - min - 2 > lim THEN
		RAISE EXCEPTION 'Too many addresses' ;
	    END IF ;

	    -- All this exception machinery is here since we can't use :
	    --    DROP TABLE IF EXISTS allip ;
	    -- It raises a notice exception, which prevents
	    -- script "ajout" to function
	    BEGIN
		DROP TABLE allip ;
	    EXCEPTION
		WHEN OTHERS THEN -- nothing
	    END ;

	    CREATE TEMPORARY TABLE allip (
		adr INET,
		avail INTEGER,
		    -- 0 : unavailable (broadcast addr, no right on addr, etc.)
		    -- 1 : not declared and not in a dhcp range
		    -- 2 : declared and not in a dhcp range
		    -- 3 : not declared and in a dhcp range
		    -- 4 : declared and in a dhcp range
		fqdn TEXT		-- if 2 or 4, then fqdn else NULL
	    ) ;

	    a := min ; 
	    WHILE a <= max LOOP
		INSERT INTO allip VALUES (a, 1) ;
		a := a + 1 ;
	    END LOOP ;

	    UPDATE allip
		SET fqdn = rr.nom || '.' || domaine.nom,
		    avail = 2
		FROM dns.rr_ip, dns.rr, dns.domaine
		WHERE allip.adr = rr_ip.adr
		    AND rr_ip.idrr = rr.idrr
		    AND rr.iddom = domaine.iddom
		    ;

	    UPDATE allip
		SET avail = CASE
				WHEN avail = 1 THEN 3
				WHEN avail = 2 THEN 4
			    END
		FROM dns.dhcprange
		WHERE (avail = 1 OR avail = 2)
		    AND adr >= dhcprange.min
		    AND adr <= dhcprange.max
		;

	    UPDATE allip SET avail = 0
		WHERE adr = min OR adr = max OR NOT valide_ip_grp (adr, grp) ;

	    RETURN ;

	END ;
	$$;


ALTER FUNCTION public.markcidr(reseau cidr, lim integer, grp integer) OWNER TO nm;

--
-- Name: modif_routerdb(); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION modif_routerdb() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	BEGIN
	    INSERT INTO topo.modeq (eq) VALUES ('_routerdb') ;
	    RETURN NEW ;
	END ;
	$$;


ALTER FUNCTION public.modif_routerdb() OWNER TO nm;

--
-- Name: modif_vlan(); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION modif_vlan() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	BEGIN
	    INSERT INTO topo.modeq (eq) VALUES ('_vlan') ;
	    RETURN NEW ;
	END ;
	$$;


ALTER FUNCTION public.modif_vlan() OWNER TO nm;

--
-- Name: modifier_ip(); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION modifier_ip() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	BEGIN
	    IF TG_OP = 'INSERT'
	    THEN
		PERFORM sum (gen_rev4 (NEW.adr)) ;
		PERFORM sum (gen_rev6 (NEW.adr)) ;
		PERFORM sum (gen_norm_idrr (NEW.idrr)) ;

		UPDATE dns.dhcp SET generer = 1
		    FROM dns.rr WHERE rr.idrr = NEW.idrr AND rr.mac IS NOT NULL ;

		UPDATE dns.dhcp SET generer = 1
		    FROM dns.rr WHERE rr.idrr = NEW.idrr AND rr.mac IS NOT NULL ;
	    END IF ;

	    IF TG_OP = 'UPDATE'
	    THEN
		PERFORM sum (gen_rev4 (NEW.adr)) ;
		PERFORM sum (gen_rev4 (OLD.adr)) ;
		PERFORM sum (gen_rev6 (NEW.adr)) ;
		PERFORM sum (gen_rev6 (OLD.adr)) ;
		PERFORM sum (gen_norm_idrr (NEW.idrr)) ;
		PERFORM sum (gen_norm_idrr (OLD.idrr)) ;

		UPDATE dns.dhcp SET generer = 1
		    FROM dns.rr WHERE rr.idrr = OLD.idrr AND rr.mac IS NOT NULL ;
		UPDATE dns.dhcp SET generer = 1
		    FROM dns.rr WHERE rr.idrr = NEW.idrr AND rr.mac IS NOT NULL ;
	    END IF ;

	    IF TG_OP = 'DELETE'
	    THEN
		PERFORM sum (gen_rev4 (OLD.adr)) ;
		PERFORM sum (gen_rev6 (OLD.adr)) ;
		PERFORM sum (gen_norm_idrr (OLD.idrr)) ;

		UPDATE dns.dhcp SET generer = 1
		    FROM dns.rr WHERE rr.idrr = OLD.idrr AND rr.mac IS NOT NULL ;
	    END IF ;

	    RETURN NEW ;
	END ;
	$$;


ALTER FUNCTION public.modifier_ip() OWNER TO nm;

--
-- Name: modifier_mxcname(); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION modifier_mxcname() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	BEGIN
	    IF TG_OP = 'INSERT'
	    THEN
		PERFORM sum (gen_norm_idrr (NEW.idrr)) ;
	    END IF ;

	    IF TG_OP = 'UPDATE'
	    THEN
		PERFORM sum (gen_norm_idrr (NEW.idrr)) ;
		PERFORM sum (gen_norm_idrr (OLD.idrr)) ;
	    END IF ;

	    IF TG_OP = 'DELETE'
	    THEN
		PERFORM sum (gen_norm_idrr (OLD.idrr)) ;
	    END IF ;

	    RETURN NEW ;
	END ;
	$$;


ALTER FUNCTION public.modifier_mxcname() OWNER TO nm;

--
-- Name: modifier_relais(); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION modifier_relais() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	BEGIN
	    IF TG_OP = 'INSERT'
	    THEN
		PERFORM sum (gen_relais (NEW.iddom)) ;
	    END IF ;

	    IF TG_OP = 'UPDATE'
	    THEN
		PERFORM sum (gen_relais (NEW.iddom)) ;
		PERFORM sum (gen_relais (OLD.iddom)) ;
	    END IF ;

	    IF TG_OP = 'DELETE'
	    THEN
		PERFORM sum (gen_relais (OLD.iddom)) ;
	    END IF ;

	    RETURN NEW ;
	END ;
	$$;


ALTER FUNCTION public.modifier_relais() OWNER TO nm;

--
-- Name: modifier_rr(); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION modifier_rr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	BEGIN
	    IF TG_OP = 'INSERT'
	    THEN
		PERFORM sum (gen_norm_iddom (NEW.iddom)) ;
		PERFORM sum (gen_rev4 (adr)) FROM dns.rr_ip WHERE idrr = NEW.idrr ;
		PERFORM sum (gen_rev6 (adr)) FROM dns.rr_ip WHERE idrr = NEW.idrr ;

		IF NEW.mac IS NOT NULL
		THEN
		    UPDATE dns.dhcp SET generer = 1 ;
		END IF ;
	    END IF ;

	    IF TG_OP = 'UPDATE'
	    THEN
		PERFORM sum (gen_norm_iddom (NEW.iddom)) ;
		PERFORM sum (gen_rev4 (adr)) FROM dns.rr_ip WHERE idrr = NEW.idrr ;
		PERFORM sum (gen_rev6 (adr)) FROM dns.rr_ip WHERE idrr = NEW.idrr ;
		PERFORM sum (gen_norm_iddom (OLD.iddom)) ;
		PERFORM sum (gen_rev4 (adr)) FROM dns.rr_ip WHERE idrr = OLD.idrr ;
		PERFORM sum (gen_rev6 (adr)) FROM dns.rr_ip WHERE idrr = OLD.idrr ;

		IF OLD.mac IS DISTINCT FROM NEW.mac
		    OR OLD.iddhcpprofil IS DISTINCT FROM NEW.iddhcpprofil
		THEN
		    UPDATE dns.dhcp SET generer = 1 ;
		END IF ;
	    END IF ;

	    IF TG_OP = 'DELETE'
	    THEN
		PERFORM sum (gen_norm_iddom (OLD.iddom)) ;
		PERFORM sum (gen_rev4 (adr)) FROM dns.rr_ip WHERE idrr = OLD.idrr ;
		PERFORM sum (gen_rev6 (adr)) FROM dns.rr_ip WHERE idrr = OLD.idrr ;

		IF OLD.mac IS NOT NULL
		THEN
		    UPDATE dns.dhcp SET generer = 1 ;
		END IF ;
	    END IF ;

	    RETURN NEW ;
	END ;
	$$;


ALTER FUNCTION public.modifier_rr() OWNER TO nm;

--
-- Name: modifier_zone(); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION modifier_zone() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	BEGIN
	    IF NEW.prologue <> OLD.prologue
		    OR NEW.rrsup <> OLD.rrsup
		    OR NEW.selection <> OLD.selection
	    THEN
		NEW.generer := 1 ;
	    END IF ;
	    RETURN NEW ;
	END ;
	$$;


ALTER FUNCTION public.modifier_zone() OWNER TO nm;

--
-- Name: valide_dhcprange_grp(integer, inet, inet); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION valide_dhcprange_grp(integer, inet, inet) RETURNS boolean
    LANGUAGE pltcl
    AS $_$
	set min {}
	foreach o [split $2 "."] {
	    lappend min [format "%02x" $o]
	}
	set min [join $min ""]
	set min [expr 0x$min]
	set ipbin [expr 0x$min]

	set max {}
	foreach o [split $3 "."] {
	    lappend max [format "%02x" $o]
	}
	set max [join $max ""]
	set max [expr 0x$max]

	set r t
	for {set ipbin $min} {$ipbin <= $max} {incr ipbin} {
	    # Prepare the new IP address
	    set ip {}
	    set o $ipbin
	    for {set i 0} {$i < 4} {incr i} {
		set ip [linsert $ip 0 [expr $o & 0xff]]
		set o [expr $o >> 8]
	    }
	    set ip [join $ip "."]

	    # Check validity
	    spi_exec "SELECT valide_ip_grp ('$ip', $1) AS v"

	    if {! [string equal $v "t"]} then {
		set r f
		break
	    }
	}
	return $r
	$_$;


ALTER FUNCTION public.valide_dhcprange_grp(integer, inet, inet) OWNER TO nm;

--
-- Name: valide_ip_cor(inet, integer); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION valide_ip_cor(inet, integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
	BEGIN
	    RETURN valide_ip_grp ($1, idgrp) FROM global.corresp WHERE idcor = $2 ;
	END ;
	$_$;


ALTER FUNCTION public.valide_ip_cor(inet, integer) OWNER TO nm;

--
-- Name: valide_ip_grp(inet, integer); Type: FUNCTION; Schema: public; Owner: nm
--

CREATE FUNCTION valide_ip_grp(inet, integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
	BEGIN
	    RETURN ($1 <<= ANY (SELECT adr FROM dns.dr_ip
				    WHERE allow_deny = 1 AND idgrp = $2)
		AND NOT $1 <<= ANY (SELECT adr FROM dns.dr_ip
				    WHERE allow_deny = 0 AND idgrp = $2)
		) ;
	END ;
	$_$;


ALTER FUNCTION public.valide_ip_grp(inet, integer) OWNER TO nm;

SET search_path = dns, pg_catalog;

--
-- Name: seq_communaute; Type: SEQUENCE; Schema: dns; Owner: nm
--

CREATE SEQUENCE seq_communaute
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dns.seq_communaute OWNER TO nm;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: communaute; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE communaute (
    idcommu integer DEFAULT nextval('seq_communaute'::regclass) NOT NULL,
    nom text
);


ALTER TABLE dns.communaute OWNER TO nm;

--
-- Name: dhcp; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE dhcp (
    generer integer
);


ALTER TABLE dns.dhcp OWNER TO nm;

--
-- Name: seq_dhcpprofil; Type: SEQUENCE; Schema: dns; Owner: nm
--

CREATE SEQUENCE seq_dhcpprofil
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dns.seq_dhcpprofil OWNER TO nm;

--
-- Name: dhcpprofil; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE dhcpprofil (
    iddhcpprofil integer DEFAULT nextval('seq_dhcpprofil'::regclass) NOT NULL,
    nom text,
    texte text,
    CONSTRAINT dhcpprofil_iddhcpprofil_check CHECK ((iddhcpprofil >= 1))
);


ALTER TABLE dns.dhcpprofil OWNER TO nm;

--
-- Name: seq_dhcprange; Type: SEQUENCE; Schema: dns; Owner: nm
--

CREATE SEQUENCE seq_dhcprange
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dns.seq_dhcprange OWNER TO nm;

--
-- Name: dhcprange; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE dhcprange (
    iddhcprange integer DEFAULT nextval('seq_dhcprange'::regclass) NOT NULL,
    min inet,
    max inet,
    iddom integer,
    default_lease_time integer DEFAULT 0,
    max_lease_time integer DEFAULT 0,
    iddhcpprofil integer,
    CONSTRAINT dhcprange_check CHECK ((min <= max))
);


ALTER TABLE dns.dhcprange OWNER TO nm;

--
-- Name: seq_domaine; Type: SEQUENCE; Schema: dns; Owner: nm
--

CREATE SEQUENCE seq_domaine
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dns.seq_domaine OWNER TO nm;

--
-- Name: domaine; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE domaine (
    iddom integer DEFAULT nextval('seq_domaine'::regclass) NOT NULL,
    nom text
);


ALTER TABLE dns.domaine OWNER TO nm;

--
-- Name: dr_dhcpprofil; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE dr_dhcpprofil (
    idgrp integer NOT NULL,
    iddhcpprofil integer NOT NULL,
    tri integer
);


ALTER TABLE dns.dr_dhcpprofil OWNER TO nm;

--
-- Name: dr_dom; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE dr_dom (
    idgrp integer NOT NULL,
    iddom integer NOT NULL,
    tri integer,
    rolemail integer DEFAULT 0,
    roleweb integer DEFAULT 0
);


ALTER TABLE dns.dr_dom OWNER TO nm;

--
-- Name: dr_ip; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE dr_ip (
    idgrp integer NOT NULL,
    adr cidr NOT NULL,
    allow_deny integer
);


ALTER TABLE dns.dr_ip OWNER TO nm;

--
-- Name: dr_reseau; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE dr_reseau (
    idgrp integer NOT NULL,
    idreseau integer NOT NULL,
    tri integer,
    dhcp integer DEFAULT 0,
    acl integer DEFAULT 0
);


ALTER TABLE dns.dr_reseau OWNER TO nm;

--
-- Name: seq_etablissement; Type: SEQUENCE; Schema: dns; Owner: nm
--

CREATE SEQUENCE seq_etablissement
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dns.seq_etablissement OWNER TO nm;

--
-- Name: etablissement; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE etablissement (
    idetabl integer DEFAULT nextval('seq_etablissement'::regclass) NOT NULL,
    nom text
);


ALTER TABLE dns.etablissement OWNER TO nm;

--
-- Name: seq_hinfo; Type: SEQUENCE; Schema: dns; Owner: nm
--

CREATE SEQUENCE seq_hinfo
    START WITH 0
    INCREMENT BY 1
    MINVALUE 0
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dns.seq_hinfo OWNER TO nm;

--
-- Name: hinfo; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE hinfo (
    idhinfo integer DEFAULT nextval('seq_hinfo'::regclass) NOT NULL,
    texte text,
    tri integer,
    present integer
);


ALTER TABLE dns.hinfo OWNER TO nm;

--
-- Name: relais_dom; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE relais_dom (
    iddom integer NOT NULL,
    priorite integer,
    mx integer NOT NULL
);


ALTER TABLE dns.relais_dom OWNER TO nm;

--
-- Name: seq_reseau; Type: SEQUENCE; Schema: dns; Owner: nm
--

CREATE SEQUENCE seq_reseau
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dns.seq_reseau OWNER TO nm;

--
-- Name: reseau; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE reseau (
    idreseau integer DEFAULT nextval('seq_reseau'::regclass) NOT NULL,
    nom text,
    localisation text,
    adr4 cidr,
    adr6 cidr,
    idetabl integer,
    idcommu integer,
    commentaire text,
    dhcp integer DEFAULT 0,
    gw4 inet,
    gw6 inet,
    CONSTRAINT au_moins_un_prefixe_v4_ou_v6 CHECK (((adr4 IS NOT NULL) OR (adr6 IS NOT NULL))),
    CONSTRAINT dhcp_needs_ipv4_gateway CHECK (((dhcp = 0) OR ((dhcp <> 0) AND (gw4 IS NOT NULL)))),
    CONSTRAINT gw4_in_net CHECK ((gw4 <<= (adr4)::inet)),
    CONSTRAINT gw6_in_net CHECK ((gw6 <<= (adr6)::inet))
);


ALTER TABLE dns.reseau OWNER TO nm;

--
-- Name: role_mail; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE role_mail (
    idrr integer NOT NULL,
    heberg integer
);


ALTER TABLE dns.role_mail OWNER TO nm;

--
-- Name: role_web; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE role_web (
    idrr integer NOT NULL
);


ALTER TABLE dns.role_web OWNER TO nm;

--
-- Name: seq_rr; Type: SEQUENCE; Schema: dns; Owner: nm
--

CREATE SEQUENCE seq_rr
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dns.seq_rr OWNER TO nm;

--
-- Name: rr; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE rr (
    idrr integer DEFAULT nextval('seq_rr'::regclass) NOT NULL,
    nom text,
    iddom integer,
    mac macaddr,
    iddhcpprofil integer,
    idhinfo integer DEFAULT 0,
    commentaire text,
    respnom text,
    respmel text,
    idcor integer,
    date timestamp(0) without time zone DEFAULT now(),
    droitsmtp integer DEFAULT 0,
    ttl integer DEFAULT (-1)
);


ALTER TABLE dns.rr OWNER TO nm;

--
-- Name: rr_cname; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE rr_cname (
    idrr integer NOT NULL,
    cname integer NOT NULL
);


ALTER TABLE dns.rr_cname OWNER TO nm;

--
-- Name: rr_ip; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE rr_ip (
    idrr integer NOT NULL,
    adr inet NOT NULL
);


ALTER TABLE dns.rr_ip OWNER TO nm;

--
-- Name: rr_mx; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE rr_mx (
    idrr integer NOT NULL,
    priorite integer,
    mx integer NOT NULL
);


ALTER TABLE dns.rr_mx OWNER TO nm;

--
-- Name: seq_zone; Type: SEQUENCE; Schema: dns; Owner: nm
--

CREATE SEQUENCE seq_zone
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dns.seq_zone OWNER TO nm;

--
-- Name: zone; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE zone (
    idzone integer DEFAULT nextval('seq_zone'::regclass) NOT NULL,
    domaine text,
    version integer,
    prologue text,
    rrsup text,
    generer integer
);


ALTER TABLE dns.zone OWNER TO nm;

--
-- Name: zone_normale; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE zone_normale (
    selection text
)
INHERITS (zone);


ALTER TABLE dns.zone_normale OWNER TO nm;

--
-- Name: zone_reverse4; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE zone_reverse4 (
    selection cidr
)
INHERITS (zone);


ALTER TABLE dns.zone_reverse4 OWNER TO nm;

--
-- Name: zone_reverse6; Type: TABLE; Schema: dns; Owner: nm; Tablespace: 
--

CREATE TABLE zone_reverse6 (
    selection cidr
)
INHERITS (zone);


ALTER TABLE dns.zone_reverse6 OWNER TO nm;

SET search_path = global, pg_catalog;

--
-- Name: config; Type: TABLE; Schema: global; Owner: nm; Tablespace: 
--

CREATE TABLE config (
    clef text NOT NULL,
    valeur text
);


ALTER TABLE global.config OWNER TO nm;

--
-- Name: seq_corresp; Type: SEQUENCE; Schema: global; Owner: nm
--

CREATE SEQUENCE seq_corresp
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE global.seq_corresp OWNER TO nm;

--
-- Name: corresp; Type: TABLE; Schema: global; Owner: nm; Tablespace: 
--

CREATE TABLE corresp (
    idcor integer DEFAULT nextval('seq_corresp'::regclass) NOT NULL,
    login text,
    present integer,
    idgrp integer
);


ALTER TABLE global.corresp OWNER TO nm;

--
-- Name: seq_groupe; Type: SEQUENCE; Schema: global; Owner: nm
--

CREATE SEQUENCE seq_groupe
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE global.seq_groupe OWNER TO nm;

--
-- Name: groupe; Type: TABLE; Schema: global; Owner: nm; Tablespace: 
--

CREATE TABLE groupe (
    idgrp integer DEFAULT nextval('seq_groupe'::regclass) NOT NULL,
    nom text,
    admin integer DEFAULT 0,
    droitsmtp integer DEFAULT 0,
    droitttl integer DEFAULT 0,
    droitmac integer DEFAULT 0,
    droitgenl integer DEFAULT 0
);


ALTER TABLE global.groupe OWNER TO nm;

--
-- Name: log; Type: TABLE; Schema: global; Owner: nm; Tablespace: 
--

CREATE TABLE log (
    date timestamp(0) without time zone DEFAULT now() NOT NULL,
    subsys text NOT NULL,
    event text NOT NULL,
    login text,
    ip inet,
    msg text
);


ALTER TABLE global.log OWNER TO nm;

SET search_path = mac, pg_catalog;

--
-- Name: session; Type: TABLE; Schema: mac; Owner: nm; Tablespace: 
--

CREATE TABLE session (
    start timestamp without time zone,
    stop timestamp without time zone,
    src inet,
    closed boolean
);


ALTER TABLE mac.session OWNER TO nm;

--
-- Name: ipmac; Type: TABLE; Schema: mac; Owner: nm; Tablespace: 
--

CREATE TABLE ipmac (
    data ipmac_t
)
INHERITS (session);


ALTER TABLE mac.ipmac OWNER TO nm;

--
-- Name: portmac; Type: TABLE; Schema: mac; Owner: nm; Tablespace: 
--

CREATE TABLE portmac (
    data portmac_t
)
INHERITS (session);


ALTER TABLE mac.portmac OWNER TO nm;

SET search_path = pgauth, pg_catalog;

--
-- Name: member; Type: TABLE; Schema: pgauth; Owner: nm; Tablespace: 
--

CREATE TABLE member (
    login text NOT NULL,
    realm text NOT NULL
);


ALTER TABLE pgauth.member OWNER TO nm;

--
-- Name: realm; Type: TABLE; Schema: pgauth; Owner: nm; Tablespace: 
--

CREATE TABLE realm (
    realm text NOT NULL,
    descr text,
    admin integer
);


ALTER TABLE pgauth.realm OWNER TO nm;

--
-- Name: user; Type: TABLE; Schema: pgauth; Owner: nm; Tablespace: 
--

CREATE TABLE "user" (
    login text NOT NULL,
    password text,
    nom text,
    prenom text,
    mel text,
    tel text,
    mobile text,
    fax text,
    adr text,
    phnom text,
    phprenom text
);


ALTER TABLE pgauth."user" OWNER TO nm;

SET search_path = topo, pg_catalog;

--
-- Name: seq_confcmd; Type: SEQUENCE; Schema: topo; Owner: nm
--

CREATE SEQUENCE seq_confcmd
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE topo.seq_confcmd OWNER TO nm;

--
-- Name: confcmd; Type: TABLE; Schema: topo; Owner: nm; Tablespace: 
--

CREATE TABLE confcmd (
    idccmd integer DEFAULT nextval('seq_confcmd'::regclass) NOT NULL,
    idtype integer,
    action text,
    rank integer,
    model text,
    command text
);


ALTER TABLE topo.confcmd OWNER TO nm;

--
-- Name: dotattr; Type: TABLE; Schema: topo; Owner: nm; Tablespace: 
--

CREATE TABLE dotattr (
    rank integer NOT NULL,
    type integer,
    regexp text,
    gvattr text,
    png bytea
);


ALTER TABLE topo.dotattr OWNER TO nm;

--
-- Name: dr_eq; Type: TABLE; Schema: topo; Owner: nm; Tablespace: 
--

CREATE TABLE dr_eq (
    idgrp integer,
    rw integer,
    pattern text NOT NULL,
    allow_deny integer
);


ALTER TABLE topo.dr_eq OWNER TO nm;

--
-- Name: seq_eq; Type: SEQUENCE; Schema: topo; Owner: nm
--

CREATE SEQUENCE seq_eq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE topo.seq_eq OWNER TO nm;

--
-- Name: eq; Type: TABLE; Schema: topo; Owner: nm; Tablespace: 
--

CREATE TABLE eq (
    ideq integer DEFAULT nextval('seq_eq'::regclass) NOT NULL,
    eq text,
    idtype integer,
    up integer
);


ALTER TABLE topo.eq OWNER TO nm;

--
-- Name: seq_eqtype; Type: SEQUENCE; Schema: topo; Owner: nm
--

CREATE SEQUENCE seq_eqtype
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE topo.seq_eqtype OWNER TO nm;

--
-- Name: eqtype; Type: TABLE; Schema: topo; Owner: nm; Tablespace: 
--

CREATE TABLE eqtype (
    idtype integer DEFAULT nextval('seq_eqtype'::regclass) NOT NULL,
    type text
);


ALTER TABLE topo.eqtype OWNER TO nm;

--
-- Name: filemonitor; Type: TABLE; Schema: topo; Owner: nm; Tablespace: 
--

CREATE TABLE filemonitor (
    path text NOT NULL,
    date timestamp(0) without time zone DEFAULT now()
);


ALTER TABLE topo.filemonitor OWNER TO nm;

--
-- Name: ifchanges; Type: TABLE; Schema: topo; Owner: nm; Tablespace: 
--

CREATE TABLE ifchanges (
    login text,
    reqdate timestamp(0) without time zone DEFAULT now() NOT NULL,
    idrr integer NOT NULL,
    iface text NOT NULL,
    ifdesc text,
    ethervlan integer,
    voicevlan integer,
    processed integer DEFAULT 0,
    moddate timestamp(0) without time zone,
    modlog text
);


ALTER TABLE topo.ifchanges OWNER TO nm;

--
-- Name: ignoreequsers; Type: TABLE; Schema: topo; Owner: nm; Tablespace: 
--

CREATE TABLE ignoreequsers (
    login text NOT NULL
);


ALTER TABLE topo.ignoreequsers OWNER TO nm;

--
-- Name: keepstate; Type: TABLE; Schema: topo; Owner: nm; Tablespace: 
--

CREATE TABLE keepstate (
    type text NOT NULL,
    message text,
    date timestamp(0) without time zone DEFAULT now()
);


ALTER TABLE topo.keepstate OWNER TO nm;

--
-- Name: lastrun; Type: TABLE; Schema: topo; Owner: nm; Tablespace: 
--

CREATE TABLE lastrun (
    date timestamp(0) without time zone
);


ALTER TABLE topo.lastrun OWNER TO nm;

--
-- Name: seq_link; Type: SEQUENCE; Schema: topo; Owner: nm
--

CREATE SEQUENCE seq_link
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE topo.seq_link OWNER TO nm;

--
-- Name: link; Type: TABLE; Schema: topo; Owner: nm; Tablespace: 
--

CREATE TABLE link (
    idlink integer DEFAULT nextval('seq_link'::regclass) NOT NULL,
    descr text
);


ALTER TABLE topo.link OWNER TO nm;

--
-- Name: modeq; Type: TABLE; Schema: topo; Owner: nm; Tablespace: 
--

CREATE TABLE modeq (
    eq text,
    date timestamp(0) without time zone DEFAULT now(),
    login text,
    processed integer DEFAULT 0
);


ALTER TABLE topo.modeq OWNER TO nm;

--
-- Name: sensor; Type: TABLE; Schema: topo; Owner: nm; Tablespace: 
--

CREATE TABLE sensor (
    id text NOT NULL,
    type text,
    eq text,
    comm text,
    iface text,
    param text,
    lastmod timestamp(0) without time zone DEFAULT now(),
    lastseen timestamp(0) without time zone DEFAULT now()
);


ALTER TABLE topo.sensor OWNER TO nm;

--
-- Name: vlan; Type: TABLE; Schema: topo; Owner: nm; Tablespace: 
--

CREATE TABLE vlan (
    vlanid integer NOT NULL,
    descr text,
    voip integer DEFAULT 0
);


ALTER TABLE topo.vlan OWNER TO nm;

SET search_path = dns, pg_catalog;

--
-- Name: idzone; Type: DEFAULT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY zone_normale ALTER COLUMN idzone SET DEFAULT nextval('seq_zone'::regclass);


--
-- Name: idzone; Type: DEFAULT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY zone_reverse4 ALTER COLUMN idzone SET DEFAULT nextval('seq_zone'::regclass);


--
-- Name: idzone; Type: DEFAULT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY zone_reverse6 ALTER COLUMN idzone SET DEFAULT nextval('seq_zone'::regclass);


--
-- Data for Name: communaute; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY communaute (idcommu, nom) FROM stdin;
1	Computing
2	Admin
3	Research
4	Plant 1
5	Plant
\.


--
-- Data for Name: dhcp; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY dhcp (generer) FROM stdin;
0
\.


--
-- Data for Name: dhcpprofil; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY dhcpprofil (iddhcpprofil, nom, texte) FROM stdin;
\.


--
-- Data for Name: dhcprange; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY dhcprange (iddhcprange, min, max, iddom, default_lease_time, max_lease_time, iddhcpprofil) FROM stdin;
1	172.16.11.100	172.16.11.119	2	0	0	\N
2	172.16.11.140	172.16.11.149	2	0	0	\N
3	172.16.15.1	172.16.15.99	4	0	0	\N
\.


--
-- Data for Name: domaine; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY domaine (iddom, nom) FROM stdin;
1	subsid.co.zz
2	example.com
3	example.org
4	plant1.example.com
\.


--
-- Data for Name: dr_dhcpprofil; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY dr_dhcpprofil (idgrp, iddhcpprofil, tri) FROM stdin;
\.


--
-- Data for Name: dr_dom; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY dr_dom (idgrp, iddom, tri, rolemail, roleweb) FROM stdin;
5	3	20	0	0
1	3	20	0	0
4	4	10	0	0
1	4	30	0	0
2	4	30	0	0
1	2	10	1	0
2	2	10	1	0
5	2	10	1	0
1	1	50	1	0
2	1	50	1	0
3	1	5	1	0
\.


--
-- Data for Name: dr_ip; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY dr_ip (idgrp, adr, allow_deny) FROM stdin;
1	172.16.1.0/24	1
1	172.16.1.0/32	0
1	172.16.1.255/32	0
1	2001:db8:1:1::/64	1
2	172.16.1.0/24	1
2	172.16.1.0/32	0
2	172.16.1.255/32	0
2	2001:db8:1:1::/64	1
1	172.16.11.0/24	1
1	172.16.11.0/32	0
1	172.16.11.255/32	0
1	2001:db8:1:2::/64	1
2	172.16.11.0/24	1
2	172.16.11.0/32	0
2	172.16.11.255/32	0
2	172.16.11.254/32	0
2	2001:db8:1:2::/64	1
5	172.16.11.0/24	1
5	172.16.11.0/32	0
5	172.16.11.255/32	0
5	172.16.11.254/32	0
5	2001:db8:1:2::/64	1
1	172.16.12.0/24	1
1	172.16.12.0/32	0
1	172.16.12.255/32	0
2	172.16.12.0/24	1
2	172.16.12.0/32	0
2	172.16.12.255/32	0
2	172.16.12.254/32	0
1	172.16.13.0/24	1
1	172.16.13.0/32	0
1	172.16.13.255/32	0
2	172.16.13.0/24	1
2	172.16.13.0/32	0
2	172.16.13.255/32	0
2	172.16.13.254/32	0
1	172.16.14.0/23	1
1	172.16.14.0/32	0
1	172.16.15.255/32	0
2	172.16.14.0/23	1
2	172.16.14.0/32	0
2	172.16.15.255/32	0
2	172.16.15.254/32	0
4	172.16.14.0/23	1
4	172.16.14.0/32	0
4	172.16.15.255/32	0
4	172.16.15.254/32	0
3	192.168.1.0/24	1
3	192.168.1.0/32	0
3	192.168.1.255/32	0
3	192.168.1.254/32	0
\.


--
-- Data for Name: dr_reseau; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY dr_reseau (idgrp, idreseau, tri, dhcp, acl) FROM stdin;
1	1	100	0	0
2	1	100	0	0
1	2	100	1	0
2	2	100	1	0
5	2	100	1	0
1	3	100	1	0
2	3	100	1	0
1	4	100	1	0
2	4	100	1	0
1	5	100	1	0
2	5	100	1	0
4	5	100	1	0
3	6	100	0	0
\.


--
-- Data for Name: etablissement; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY etablissement (idetabl, nom) FROM stdin;
1	Example Corp.
2	Subsidary & sons
\.


--
-- Data for Name: hinfo; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY hinfo (idhinfo, texte, tri, present) FROM stdin;
0	Unspecified	0	0
1	PC/Windows	10	1
2	PC/Unix	20	1
3	Macintosh/MacOS	30	1
4	Other/Unix	50	1
5	Printer	70	1
6	Network equipment	100	1
\.


--
-- Data for Name: relais_dom; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY relais_dom (iddom, priorite, mx) FROM stdin;
2	10	216
2	20	217
1	10	216
1	20	217
\.


--
-- Data for Name: reseau; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY reseau (idreseau, nom, localisation, adr4, adr6, idetabl, idcommu, commentaire, dhcp, gw4, gw6) FROM stdin;
1	Backbone	Site 1	172.16.1.0/24	2001:db8:1:1::/64	1	1	Backbone + servers	0	\N	\N
2	Marketing	Site 1 - Red building	172.16.11.0/24	2001:db8:1:2::/64	1	2		1	172.16.11.254	\N
3	ITS	Site 1 - Pink building	172.16.12.0/24	\N	1	1	Information Technology Services	1	172.16.12.254	\N
4	R&D	Site 2 - Green building	172.16.13.0/24	\N	1	3	Research and Development	1	172.16.13.254	\N
5	Factory	Site 1 - Blue building	172.16.14.0/23	\N	1	4	Site 1 plant	1	172.16.15.254	\N
6	Subsidary	Site 2 - Black building	192.168.1.0/24	\N	2	5	Bolts factory	0	192.168.1.254	\N
\.


--
-- Data for Name: role_mail; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY role_mail (idrr, heberg) FROM stdin;
239	227
240	226
241	2
242	236
\.


--
-- Data for Name: role_web; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY role_web (idrr) FROM stdin;
\.


--
-- Data for Name: rr; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY rr (idrr, nom, iddom, mac, iddhcpprofil, idhinfo, commentaire, respnom, respmel, idcor, date, droitsmtp, ttl) FROM stdin;
1	another-router	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
2	aphrodite	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
3	bugs	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
4	daffy	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
5	dingo	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
6	droopy	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
7	host10	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
8	host100	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
9	host101	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
10	host102	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
11	host103	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
12	host104	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
13	host105	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
14	host106	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
15	host107	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
16	host108	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
17	host109	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
18	host11	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
19	host115	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
20	host116	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
21	host117	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
22	host118	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
23	host119	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
24	host12	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
25	host120	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
26	host121	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
27	host122	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
28	host123	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
29	host124	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
30	host125	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
31	host126	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
32	host127	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
33	host128	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
34	host129	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
35	host13	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
36	host130	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
37	host131	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
38	host132	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
39	host133	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
40	host134	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
41	host135	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
42	host136	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
43	host137	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
44	host138	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
45	host139	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
46	host14	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
47	host140	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
48	host141	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
49	host142	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
50	host143	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
51	host144	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
52	host145	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
53	host146	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
54	host147	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
55	host148	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
56	host149	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
57	host15	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
58	host150	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
59	host151	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
60	host152	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
61	host153	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
62	host154	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
63	host155	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
64	host156	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
65	host157	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
66	host158	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
67	host159	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
68	host16	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
69	host160	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
70	host161	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
71	host162	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
72	host163	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
73	host164	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
74	host165	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
75	host166	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
76	host167	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
77	host168	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
78	host169	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
79	host170	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
80	host171	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
81	host172	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
82	host173	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
83	host174	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
84	host175	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
85	host176	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
86	host177	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
87	host178	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
88	host179	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
89	host180	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
90	host181	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
91	host182	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
92	host183	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
93	host184	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
94	host185	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
95	host186	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
96	host187	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
97	host188	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
98	host189	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
99	host19	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
100	host190	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
101	host191	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
102	host193	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
103	host194	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
104	host195	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
105	host196	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
106	host197	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
107	host198	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
108	host199	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
109	host20	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
110	host21	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
111	host215	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
112	host216	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
113	host217	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
114	host218	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
115	host219	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
116	host22	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
117	host220	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
118	host221	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
119	host222	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
120	host223	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
121	host224	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
122	host225	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
123	host226	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
124	host227	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
125	host228	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
126	host229	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
127	host23	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
128	host230	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
129	host231	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
130	host232	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
131	host233	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
132	host234	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
133	host235	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
134	host236	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
135	host237	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
136	host238	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
137	host239	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
138	host24	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
139	host240	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
140	host241	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
141	host242	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
142	host243	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
143	host244	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
144	host245	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
145	host246	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
146	host247	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
147	host248	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
148	host249	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
149	host25	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
150	host250	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
151	host251	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
152	host252	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
153	host253	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
154	host26	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
155	host27	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
156	host28	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
157	host29	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
158	host30	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
159	host36	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
160	host37	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
161	host38	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
162	host39	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
163	host40	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
164	host41	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
165	host42	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
166	host43	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
167	host44	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
168	host45	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
169	host46	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
170	host47	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
171	host48	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
172	host49	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
173	host50	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
174	host51	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
175	host53	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
176	host54	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
177	host55	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
178	host56	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
179	host57	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
180	host58	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
181	host59	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
182	host60	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
183	host61	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
184	host62	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
185	host63	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
186	host66	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
187	host67	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
188	host68	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
189	host69	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
190	host70	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
191	host71	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
192	host72	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
193	host73	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
194	host74	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
195	host75	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
196	host76	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
197	host77	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
198	host78	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
199	host79	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
200	host80	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
201	host81	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
202	host82	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
203	host83	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
204	host84	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
205	host89	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
206	host90	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
207	host91	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
208	host92	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
209	host93	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
210	host94	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
211	host95	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
212	host96	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
213	host97	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
214	host98	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
215	host99	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
216	mx1	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
217	mx2	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
218	ns1	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
219	ns2	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
220	pluto	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
221	porky	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
222	rtr	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
223	screwy	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
224	sw1	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
225	sw2	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
226	venus	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
227	zeus	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
228	jupiter	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
229	www-dog	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
230	www-tex	2	\N	\N	0				1	2013-06-02 18:34:09	0	-1
231	abraracourcix	4	\N	\N	0				1	2013-06-02 18:34:11	0	-1
232	assurancetourix	4	\N	\N	0				1	2013-06-02 18:34:11	0	-1
233	asterix	4	\N	\N	0				1	2013-06-02 18:34:11	0	-1
234	obelix	4	\N	\N	0				1	2013-06-02 18:34:11	0	-1
235	www	4	\N	\N	0				1	2013-06-02 18:34:11	0	-1
236	mail-sales	1	\N	\N	0				1	2013-06-02 18:34:12	0	-1
237	www	1	\N	\N	0				1	2013-06-02 18:34:12	0	-1
238	www	3	\N	\N	0				1	2013-06-02 18:34:12	0	-1
239	sales	2	\N	\N	0				1	2013-06-02 18:34:15	0	-1
240	mktg	2	\N	\N	0				1	2013-06-02 18:34:15	0	-1
241	its	2	\N	\N	0				1	2013-06-02 18:34:15	0	-1
242	sales	1	\N	\N	0				1	2013-06-02 18:34:15	0	-1
\.


--
-- Data for Name: rr_cname; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY rr_cname (idrr, cname) FROM stdin;
228	227
229	6
230	4
235	233
238	4
\.


--
-- Data for Name: rr_ip; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY rr_ip (idrr, adr) FROM stdin;
1	172.16.1.253
1	2001:db8:1234:4001::2
1	172.16.13.254
2	172.16.11.3
3	172.16.13.2
4	172.16.13.1
5	172.16.12.3
6	172.16.12.1
7	172.16.11.10
8	172.16.11.100
9	172.16.11.101
10	172.16.11.102
11	172.16.11.103
12	172.16.11.104
13	172.16.11.105
14	172.16.11.106
15	172.16.11.107
16	172.16.11.108
17	172.16.11.109
18	172.16.11.11
19	172.16.11.115
20	172.16.11.116
21	172.16.11.117
22	172.16.11.118
23	172.16.11.119
24	172.16.11.12
25	172.16.11.120
26	172.16.11.121
27	172.16.11.122
28	172.16.11.123
29	172.16.11.124
30	172.16.11.125
31	172.16.11.126
32	172.16.11.127
33	172.16.11.128
34	172.16.11.129
35	172.16.11.13
36	172.16.11.130
37	172.16.11.131
38	172.16.11.132
39	172.16.11.133
40	172.16.11.134
41	172.16.11.135
42	172.16.11.136
43	172.16.11.137
44	172.16.11.138
45	172.16.11.139
46	172.16.11.14
47	172.16.11.140
48	172.16.11.141
49	172.16.11.142
50	172.16.11.143
51	172.16.11.144
52	172.16.11.145
53	172.16.11.146
54	172.16.11.147
55	172.16.11.148
56	172.16.11.149
57	172.16.11.15
58	172.16.11.150
59	172.16.11.151
60	172.16.11.152
61	172.16.11.153
62	172.16.11.154
63	172.16.11.155
64	172.16.11.156
65	172.16.11.157
66	172.16.11.158
67	172.16.11.159
68	172.16.11.16
69	172.16.11.160
70	172.16.11.161
71	172.16.11.162
72	172.16.11.163
73	172.16.11.164
74	172.16.11.165
75	172.16.11.166
76	172.16.11.167
77	172.16.11.168
78	172.16.11.169
79	172.16.11.170
80	172.16.11.171
81	172.16.11.172
81	192.16.11.192
82	172.16.11.173
83	172.16.11.174
84	172.16.11.175
85	172.16.11.176
86	172.16.11.177
87	172.16.11.178
88	172.16.11.179
89	172.16.11.180
90	172.16.11.181
91	172.16.11.182
92	172.16.11.183
93	172.16.11.184
94	172.16.11.185
95	172.16.11.186
96	172.16.11.187
97	172.16.11.188
98	172.16.11.189
99	172.16.11.19
100	172.16.11.190
101	172.16.11.191
102	172.16.11.193
103	172.16.11.194
104	172.16.11.195
105	172.16.11.196
106	172.16.11.197
107	172.16.11.198
108	172.16.11.199
109	172.16.11.20
110	172.16.11.21
111	172.16.11.215
112	172.16.11.216
113	172.16.11.217
114	172.16.11.218
115	172.16.11.219
116	172.16.11.22
117	172.16.11.220
118	172.16.11.221
119	172.16.11.222
120	172.16.11.223
121	172.16.11.224
122	172.16.11.225
123	172.16.11.226
124	172.16.11.227
125	172.16.11.228
126	172.16.11.229
127	172.16.11.23
128	172.16.11.230
129	172.16.11.231
130	172.16.11.232
131	172.16.11.233
132	172.16.11.234
133	172.16.11.235
134	172.16.11.236
135	172.16.11.237
136	172.16.11.238
137	172.16.11.239
138	172.16.11.24
139	172.16.11.240
140	172.16.11.241
141	172.16.11.242
142	172.16.11.243
143	172.16.11.244
144	172.16.11.245
145	172.16.11.246
146	172.16.11.247
147	172.16.11.248
148	172.16.11.249
149	172.16.11.25
150	172.16.11.250
151	172.16.11.251
152	172.16.11.252
153	172.16.11.253
154	172.16.11.26
155	172.16.11.27
156	172.16.11.28
157	172.16.11.29
158	172.16.11.30
159	172.16.11.36
160	172.16.11.37
161	172.16.11.38
162	172.16.11.39
163	172.16.11.40
164	172.16.11.41
165	172.16.11.42
166	172.16.11.43
167	172.16.11.44
168	172.16.11.45
169	172.16.11.46
170	172.16.11.47
171	172.16.11.48
172	172.16.11.49
173	172.16.11.50
174	172.16.11.51
175	172.16.11.53
176	172.16.11.54
177	172.16.11.55
178	172.16.11.56
179	172.16.11.57
180	172.16.11.58
181	172.16.11.59
182	172.16.11.60
183	172.16.11.61
184	172.16.11.62
185	172.16.11.63
186	172.16.11.66
187	172.16.11.67
188	172.16.11.68
189	172.16.11.69
190	172.16.11.70
191	172.16.11.71
192	172.16.11.72
193	172.16.11.73
194	172.16.11.74
195	172.16.11.75
196	172.16.11.76
197	172.16.11.77
198	172.16.11.78
199	172.16.11.79
200	172.16.11.80
201	172.16.11.81
202	172.16.11.82
203	172.16.11.83
204	172.16.11.84
205	172.16.11.89
206	172.16.11.90
207	172.16.11.91
208	172.16.11.92
209	172.16.11.93
210	172.16.11.94
211	172.16.11.95
212	172.16.11.96
213	172.16.11.97
214	172.16.11.98
215	172.16.11.99
216	172.16.1.3
216	2001:db8:1234::3
217	172.16.1.4
217	2001:db8:1234::4
218	172.16.1.1
218	2001:db8:1234::1
219	172.16.1.2
219	2001:db8:1234::2
220	172.16.12.2
221	172.16.13.4
222	172.16.1.254
222	2001:db8:1234:4001::1
222	192.168.1.254
222	172.16.11.254
222	2001:db8:1234:4011::1
222	172.16.12.254
223	172.16.13.3
224	192.16.1.101
225	192.16.1.102
226	172.16.11.2
227	172.16.11.1
231	172.16.14.3
232	172.16.14.4
233	172.16.14.1
234	172.16.14.2
236	192.168.1.2
237	192.168.1.1
\.


--
-- Data for Name: rr_mx; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY rr_mx (idrr, priorite, mx) FROM stdin;
\.


--
-- Name: seq_communaute; Type: SEQUENCE SET; Schema: dns; Owner: nm
--

SELECT pg_catalog.setval('seq_communaute', 5, true);


--
-- Name: seq_dhcpprofil; Type: SEQUENCE SET; Schema: dns; Owner: nm
--

SELECT pg_catalog.setval('seq_dhcpprofil', 1, false);


--
-- Name: seq_dhcprange; Type: SEQUENCE SET; Schema: dns; Owner: nm
--

SELECT pg_catalog.setval('seq_dhcprange', 3, true);


--
-- Name: seq_domaine; Type: SEQUENCE SET; Schema: dns; Owner: nm
--

SELECT pg_catalog.setval('seq_domaine', 4, true);


--
-- Name: seq_etablissement; Type: SEQUENCE SET; Schema: dns; Owner: nm
--

SELECT pg_catalog.setval('seq_etablissement', 2, true);


--
-- Name: seq_hinfo; Type: SEQUENCE SET; Schema: dns; Owner: nm
--

SELECT pg_catalog.setval('seq_hinfo', 6, true);


--
-- Name: seq_reseau; Type: SEQUENCE SET; Schema: dns; Owner: nm
--

SELECT pg_catalog.setval('seq_reseau', 6, true);


--
-- Name: seq_rr; Type: SEQUENCE SET; Schema: dns; Owner: nm
--

SELECT pg_catalog.setval('seq_rr', 242, true);


--
-- Name: seq_zone; Type: SEQUENCE SET; Schema: dns; Owner: nm
--

SELECT pg_catalog.setval('seq_zone', 6, true);


--
-- Data for Name: zone; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY zone (idzone, domaine, version, prologue, rrsup, generer) FROM stdin;
\.


--
-- Data for Name: zone_normale; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY zone_normale (idzone, domaine, version, prologue, rrsup, generer, selection) FROM stdin;
2	plant1.example.com	2013060201	;\n; Zone plant1.example.com\n;\n;\n; History\n;   2004/04/13 : pda : design example zone\n;\n\n@\tIN\tSOA\tns1.example.com. hostmaster.example.com. (\n\t\t    %ZONEVERSION%\t\t; serial\n\t\t    86400\t\t; refresh = 1 day\n\t\t    3600\t\t; retry = 1 h\n\t\t    3600000\t\t; expire = 1000 hours (~ 41 day)\n\t\t    86400\t\t; default ttl = 1 day\n\t\t)\n\n;\n; Default TLL for zone records\n;\n$TTL\t86400\n\n;\n; Authoritative servers for this zone\n;\n\n\t\t\tIN\tNS\tns1.example.com.\n\t\t\tIN\tNS\tns2.example.com.\n\t\t\tIN\tNS\tns.myisp.com.\n\n;\n; Default MX for the domain itself\n;\n\n\t\t\tIN\tMX\t10 mx1.example.com.\n\t\t\tIN\tMX\t20 mx2.example.com.\n\n;\n; hack\n;\n\nlocalhost\t\tIN\tA\t127.0.0.1\n\n		1	plant1.example.com
4	example.org	2013060201	;\n; Zone example.org\n;\n;\n; History\n;   2004/04/13 : pda : design example zone\n;\n\n@\tIN\tSOA\tns1.example.com. hostmaster.example.com. (\n\t\t    %ZONEVERSION%\t\t; serial\n\t\t    86400\t\t; refresh = 1 day\n\t\t    3600\t\t; retry = 1 h\n\t\t    3600000\t\t; expire = 1000 hours (~ 41 day)\n\t\t    86400\t\t; default ttl = 1 day\n\t\t)\n\n;\n; Default TLL for zone records\n;\n$TTL\t86400\n\n;\n; Authoritative servers for this zone\n;\n\n\t\t\tIN\tNS\tns1.example.com.\n\t\t\tIN\tNS\tns2.example.com.\n\t\t\tIN\tNS\tns.myisp.com.\n\n;\n; Default MX for the domain itself\n;\n\n\t\t\tIN\tMX\t10 mx1.example.com.\n\n;\n; hack\n;\n\nlocalhost\t\tIN\tA\t127.0.0.1\n\n		1	example.org
3	subsid.co.zz	2013060201	;\n; Zone subsid.co.zz\n;\n;\n; History\n;   2004/04/13 : pda : design example zone\n;\n\n@\tIN\tSOA\tns1.example.com. hostmaster.subsid.co.zz. (\n\t\t    %ZONEVERSION%\t\t; serial\n\t\t    86400\t\t; refresh = 1 day\n\t\t    3600\t\t; retry = 1 h\n\t\t    3600000\t\t; expire = 1000 hours (~ 41 day)\n\t\t    86400\t\t; default ttl = 1 day\n\t\t)\n\n;\n; Default TLL for zone records\n;\n$TTL\t86400\n\n;\n; Authoritative servers for this zone\n;\n\n\t\t\tIN\tNS\tns1.example.com.\n\t\t\tIN\tNS\tns2.example.com.\n\t\t\tIN\tNS\tns.myisp.com.\n\n;\n; Default MX for the domain itself\n;\n\n\t\t\tIN\tMX\t10 mx1.example.com.\n\t\t\tIN\tMX\t10 mx2.example.com.\n\n;\n; hack\n;\n\nlocalhost\t\tIN\tA\t127.0.0.1\n\n		1	subsid.co.zz
1	example.com	2013060201	;\n; Zone example.com\n;\n;\n; History\n;   2004/04/13 : pda : design example zone\n;\n\n@\tIN\tSOA\tns1.example.com. hostmaster.example.com. (\n\t\t    %ZONEVERSION%\t\t; serial\n\t\t    86400\t\t; refresh = 1 day\n\t\t    3600\t\t; retry = 1 h\n\t\t    3600000\t\t; expire = 1000 hours (~ 41 day)\n\t\t    86400\t\t; default ttl = 1 day\n\t\t)\n\n;\n; Default TLL for zone records\n;\n$TTL\t86400\n\n;\n; Authoritative servers for this zone\n;\n\n\t\t\tIN\tNS\tns1.example.com.\n\t\t\tIN\tNS\tns2.example.com.\n\t\t\tIN\tNS\tns.myisp.com.\n\n;\n; Default MX for the domain itself\n;\n\n\t\t\tIN\tMX\t10 mx1.example.com.\n\t\t\tIN\tMX\t20 mx2.example.com.\n\n;\n; hack\n;\n\nlocalhost\t\tIN\tA\t127.0.0.1\n\n; this plant delegates sub-zone management to us\nplant1\t\t\tIN\tNS\tns1.example.com.\n\t\t\tIN\tNS\tns2.example.com.\n\n; this plant manages its own sub-zone\nplant2\t\t\tIN\tNS\telsewhere.plant2.example.com.\n\t\t\tIN\tNS\tns1.example.com.\n\t\t\tIN\tNS\tns2.example.com.\nelsewhere.plant2\tIN\tA\t172.16.100.1\n\n		1	example.com
\.


--
-- Data for Name: zone_reverse4; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY zone_reverse4 (idzone, domaine, version, prologue, rrsup, generer, selection) FROM stdin;
5	16.172.in-addr.arpa	2013060201	;\n; Zone 16.172.in-addr.arpa\n;\n;\n; History\n;   2004/04/13 : pda : design example zone\n;\n\n@\tIN\tSOA\tns1.example.com. hostmaster.example.com. (\n\t\t    %ZONEVERSION%\t\t; serial\n\t\t    86400\t\t; refresh = 1 day\n\t\t    3600\t\t; retry = 1 h\n\t\t    3600000\t\t; expire = 1000 hours (~ 41 day)\n\t\t    86400\t\t; default ttl = 1 day\n\t\t)\n\n;\n; Default TLL for zone records\n;\n$TTL\t86400\n\n;\n; Authoritative servers for this zone\n;\n\n\t\t\tIN\tNS\tns1.example.com.\n\t\t\tIN\tNS\tns2.example.com.\n\t\t\tIN\tNS\tns.myisp.com.\n\n1.100\t\t\tIN\tNS\telesewhere.plant2.example.com.\n\t\t\tIN\tNS\tns1.example.com.\n\t\t\tIN\tNS\tns2.example.com.\n\n		1	172.16.0.0/16
\.


--
-- Data for Name: zone_reverse6; Type: TABLE DATA; Schema: dns; Owner: nm
--

COPY zone_reverse6 (idzone, domaine, version, prologue, rrsup, generer, selection) FROM stdin;
6	4.3.2.1.8.b.d.0.1.0.0.2.ip6.arpa	2013060201	;\n; Zone 4.3.2.1.8.b.d.0.1.0.0.2.ip6.arpa\n;\n;\n; History\n;   2004/04/13 : pda : design example zone\n;\n\n@\tIN\tSOA\tns1.example.com. hostmaster.example.com. (\n\t\t    %ZONEVERSION%\t\t; serial\n\t\t    86400\t\t; refresh = 1 day\n\t\t    3600\t\t; retry = 1 h\n\t\t    3600000\t\t; expire = 1000 hours (~ 41 day)\n\t\t    86400\t\t; default ttl = 1 day\n\t\t)\n\n;\n; Default TLL for zone records\n;\n$TTL\t86400\n\n;\n; Authoritative servers for this zone\n;\n\n\t\t\tIN\tNS\tns1.example.com.\n\t\t\tIN\tNS\tns2.example.com.\n\t\t\tIN\tNS\tns.myisp.com.\n\n		1	2001:db8:1234::/48
\.


SET search_path = global, pg_catalog;

--
-- Data for Name: config; Type: TABLE DATA; Schema: global; Owner: nm
--

COPY config (clef, valeur) FROM stdin;
datefmt	%d/%m/%Y %H:%M:%S
jourfmt	%a %d %b %Y
authmethod	pgsql
pageformat	a4
dnsupdateperiod	600
default_lease_time	600
max_lease_time	3600
min_lease_time	300
topoactive	0
dhcpdefdomain	example.com
defdomain	example.com
topofrom	nobody.topo@example.com
topoto	noc@example.com another@example.com
topographddelay	5
toposendddelay	5
topomaxstatus	100
sensorexpire	30
modeqexpire	30
ifchangeexpire	30
fullrancidmin	2
fullrancidmax	4
macactive	0
ldapurl	ldap://ldap.example.com/
ldapbinddn	cn=admin,ou=accounts,ou=operators,dc=example,dc=com
ldapbindpw	*
ldapbasedn	ou=people,dc=example,dc=com
ldapsearchlogin	(&(objectClass=People)(uid=%s))
ldapattrlogin	uid
ldapattrpassword	userPassword
ldapattrname	sn
ldapattrgivenname	givenName
ldapattrmail	mail
ldapattrphone	telephoneNumber
ldapattrmobile	
ldapattrfax	facsimileTelephoneNumber
ldapattraddr	postalAddress postalCode l
authpgminpwlen	8
authpgmaxpwlen	16
authpgmailfrom	nobody.netmagis@example.com
authpgmailreplyto	nobody.netmagis@example.com
authpgmailcc	
authpgmailbcc	
authpgmailsubject	Password change
authpgmailbody	Password changed (%2$s) for user %1$s. Best regards.
authpggroupes	netmagis
defuser	nobody
\.


--
-- Data for Name: corresp; Type: TABLE DATA; Schema: global; Owner: nm
--

COPY corresp (idcor, login, present, idgrp) FROM stdin;
1	pda	1	1
2	jean	1	1
3	nobody	1	1
4	bob	1	2
5	alice	1	2
6	john	1	3
7	dennis	1	3
8	terry	1	4
9	charles	1	5
\.


--
-- Data for Name: groupe; Type: TABLE DATA; Schema: global; Owner: nm
--

COPY groupe (idgrp, nom, admin, droitsmtp, droitttl, droitmac, droitgenl) FROM stdin;
1	wheel	1	0	0	0	0
2	tech	0	0	0	0	0
3	subsid	0	0	0	0	0
4	plant	0	0	0	0	0
5	mktg	0	0	0	0	0
\.


--
-- Data for Name: log; Type: TABLE DATA; Schema: global; Owner: nm
--

COPY log (date, subsys, event, login, ip, msg) FROM stdin;
\.


--
-- Name: seq_corresp; Type: SEQUENCE SET; Schema: global; Owner: nm
--

SELECT pg_catalog.setval('seq_corresp', 9, true);


--
-- Name: seq_groupe; Type: SEQUENCE SET; Schema: global; Owner: nm
--

SELECT pg_catalog.setval('seq_groupe', 5, true);


SET search_path = mac, pg_catalog;

--
-- Data for Name: ipmac; Type: TABLE DATA; Schema: mac; Owner: nm
--

COPY ipmac (start, stop, src, closed, data) FROM stdin;
\.


--
-- Data for Name: portmac; Type: TABLE DATA; Schema: mac; Owner: nm
--

COPY portmac (start, stop, src, closed, data) FROM stdin;
\.


--
-- Data for Name: session; Type: TABLE DATA; Schema: mac; Owner: nm
--

COPY session (start, stop, src, closed) FROM stdin;
\.


SET search_path = pgauth, pg_catalog;

--
-- Data for Name: member; Type: TABLE DATA; Schema: pgauth; Owner: nm
--

COPY member (login, realm) FROM stdin;
pda	authadmin
pda	netmagis
jean	authadmin
jean	netmagis
nobody	authadmin
nobody	netmagis
bob	netmagis
alice	netmagis
john	netmagis
dennis	netmagis
terry	netmagis
charles	netmagis
\.


--
-- Data for Name: realm; Type: TABLE DATA; Schema: pgauth; Owner: nm
--

COPY realm (realm, descr, admin) FROM stdin;
authadmin	Administrators of internal PostgreSQL auth	1
netmagis	Netmagis users	0
\.


--
-- Data for Name: user; Type: TABLE DATA; Schema: pgauth; Owner: nm
--

COPY "user" (login, password, nom, prenom, mel, tel, mobile, fax, adr, phnom, phprenom) FROM stdin;
jean	$1$UX5cCWPR$Ha4S6NSApww3di6FJ3wdR1	Boss	Joe	\N	\N	\N	\N	\N	B800	J000
nobody	$1$AFxJdjN1$eD3fROadYK7AVojDk4uTX0	Boss	Joe	\N	\N	\N	\N	\N	B800	J000
bob	$1$MiT3Vp.t$L.jrny7Gbq37VeKBGxRN60	User	Joe	\N	\N	\N	\N	\N	U860	J000
alice	$1$hp2Nk3Az$jxwuQKkxxHRzrQjcT.b4D/	User	Joe	\N	\N	\N	\N	\N	U860	J000
john	$1$rXeTxpTz$DRzraavfx07TmWsA2BfMn1	User	Joe	\N	\N	\N	\N	\N	U860	J000
dennis	$1$ny2YV9kN$hmJLil.dx8CyqviHNT1zd.	User	Joe	\N	\N	\N	\N	\N	U860	J000
terry	$1$gGLnMLao$EZLkH/7pPs4kCvw4mQdoE0	User	Joe	\N	\N	\N	\N	\N	U860	J000
charles	$1$OYJkc2zO$vwEbQFtMuAGmfj5WPGum11	User	Joe	\N	\N	\N	\N	\N	U860	J000
pda	$1$LDdptOtU$GGRQe5uNWrvfC32Ia/f8b1	Boss	Joe	\N	\N	\N	\N	\N	B800	J000
\.


SET search_path = topo, pg_catalog;

--
-- Data for Name: confcmd; Type: TABLE DATA; Schema: topo; Owner: nm
--

COPY confcmd (idccmd, idtype, action, rank, model, command) FROM stdin;
1	1	prologue	100	.*	configure terminal
2	1	ifreset	90	.*29.0.*	interface %1$s\ndefault switchport nonegotiate\ndefault switchport trunk allowed vlan\ndefault switchport trunk native vlan\ndefault switchport access vlan\ndefault switchport mode
3	1	ifreset	100	.*	interface %1$s\nno switchport\nswitchport voice vlan none\nswitchport
4	1	ifdisable	100	.*	interface %1$s\nshutdown
5	1	ifenable	100	.*	interface %1$s\nno shutdown
6	1	ifaccess	100	.*	interface %1$s\nswitchport mode access\nswitchport access vlan %2$s\nspanning-tree portfast 
7	1	ifvoice	100	.*	interface %1$s\nswitchport voice vlan %2$s
8	1	ifdesc	100	.*	interface %1$s\ndescription %2$s
9	1	epilogue	100	.*	line con 0\nexit\nexit\nwrite memory 
10	2	prologue	100	.*	configure
11	2	ifreset	100	.*	delete interfaces %1$s unit 0 family ethernet-switching\ndelete ethernet-switching-options voip interface %1$s
12	2	ifdisable	100	.*	set interfaces %1$s disable
13	2	ifenable	100	.*	delete interfaces %1$s disable
14	2	ifaccess	100	.*	set interfaces %1$s unit 0 family ethernet-switching port-mode access\nset interfaces %1$s unit 0 family ethernet-switching vlan members %2$s
15	2	ifdesc	100	.*	set interfaces %1$s description "%2$s"
16	2	ifvoice	100	.*	set interfaces %1$s unit 0 family ethernet-switching\nset ethernet-switching-options voip interface %1$s vlan %2$s
17	2	epilogue	100	.*	commit\nexit configuration
18	3	prologue	100	.*	configure terminal
19	3	resetvlan	100	.*	vlan %2$s\nno tagged %1$s\nno untagged %1$s
20	3	ifenable	100	.*	interface %1$s\nenable
21	3	ifdisable	100	.*	interface %1$s\ndisable
22	3	ifaccess	100	.*	vlan %2$s\nuntagged %1$s
23	3	ifvoice	100	.*	vlan %2$s\ntagged %1$s
24	3	ifdesc	100	.*	interface %1$s\nname "%2$s"
25	3	epilogue	100	.*	vlan 1\nexit\nexit\nwrite memory
\.


--
-- Data for Name: dotattr; Type: TABLE DATA; Schema: topo; Owner: nm
--

COPY dotattr (rank, type, regexp, gvattr, png) FROM stdin;
10100	2	juniper/M.*	shape=circle\nstyle=filled fillcolor=lightgrey\nfixedsize height=1	\N
10200	2	cisco/12000.*	shape=doublecircle\nstyle=filled fillcolor=lightgrey\nfixedsize height=1	\N
10300	2	juniper/EX8.*	shape=box style=filled fillcolor=lightblue	\N
10400	2	juniper/Chassis.*	shape=box style=filled fillcolor=lightblue	\N
10500	2	cisco/WS-C45.*	shape=box style=filled fillcolor=lightblue	\N
10600	2	cisco/WS-C37.*	shape=box style=filled fillcolor=lightblue height=.25	\N
10700	2	cisco/WS-C29.*	shape=box style=filled fillcolor=lightblue height=.25	\N
10800	2	cisco/WS-.*PS	shape=box style=filled fillcolor=yellow height=.25	\N
10900	2	cisco/37.*	shape=octagon style=filled fillcolor=orange1 height=.25	\N
11000	2	cisco/38.*	shape=octagon style=filled fillcolor=orange1	\N
11100	2	cisco/.*routeur	shape=circle\nstyle=filled fillcolor=lightgrey\nfixedsize height=1	\N
11200	2	cisco/1605.*	shape=circle\nstyle=filled fillcolor=lightgrey\nfixedsize height=1	\N
11300	2	cisco/1721.*	shape=circle\nstyle=filled fillcolor=lightgrey\nfixedsize height=1	\N
11400	2	cisco/7206.*	shape=circle\nstyle=filled fillcolor=lightgrey\nfixedsize height=1	\N
11500	2	juniper/EX2.*	shape=box style=filled fillcolor=SteelBlue height=.25	\N
11600	2	juniper/EX4.*	shape=box style=filled fillcolor=SteelBlue height=.25	\N
11900	2	fwroutebridge.*	shape=Mcircle\nstyle=filled fillcolor=tomato\nheight=1	\N
13000	2	fwroute.*	shape=circle\nstyle=filled fillcolor=tomato\nheight=1	\N
13100	2	fw.*	shape=box style=filled fillcolor=tomato height=.25	\N
13200	2	switch.*	shape=box style=filled fillcolor=lightgrey height=.25	\N
13300	2	hp.*	shape=box style=filled fillcolor=pink height=.25	\N
13400	2	.*	shape=triangle	\N
20100	3	router	shape=circle\nstyle=filled fillcolor=lightgrey\nfixedsize height=1.5	\N
20200	3	host	shape=box\nstyle=filled fillcolor=lightblue\nheight=.25	\N
20300	3	cloud	shape=ellipse\nstyle=filled fillcolor=palegreen\nwidth=1.5	\N
\.


--
-- Data for Name: dr_eq; Type: TABLE DATA; Schema: topo; Owner: nm
--

COPY dr_eq (idgrp, rw, pattern, allow_deny) FROM stdin;
\.


--
-- Data for Name: eq; Type: TABLE DATA; Schema: topo; Owner: nm
--

COPY eq (ideq, eq, idtype, up) FROM stdin;
\.


--
-- Data for Name: eqtype; Type: TABLE DATA; Schema: topo; Owner: nm
--

COPY eqtype (idtype, type) FROM stdin;
1	cisco
2	juniper
3	hp
\.


--
-- Data for Name: filemonitor; Type: TABLE DATA; Schema: topo; Owner: nm
--

COPY filemonitor (path, date) FROM stdin;
\.


--
-- Data for Name: ifchanges; Type: TABLE DATA; Schema: topo; Owner: nm
--

COPY ifchanges (login, reqdate, idrr, iface, ifdesc, ethervlan, voicevlan, processed, moddate, modlog) FROM stdin;
\.


--
-- Data for Name: ignoreequsers; Type: TABLE DATA; Schema: topo; Owner: nm
--

COPY ignoreequsers (login) FROM stdin;
conf
\.


--
-- Data for Name: keepstate; Type: TABLE DATA; Schema: topo; Owner: nm
--

COPY keepstate (type, message, date) FROM stdin;
\.


--
-- Data for Name: lastrun; Type: TABLE DATA; Schema: topo; Owner: nm
--

COPY lastrun (date) FROM stdin;
\N
\.


--
-- Data for Name: link; Type: TABLE DATA; Schema: topo; Owner: nm
--

COPY link (idlink, descr) FROM stdin;
\.


--
-- Data for Name: modeq; Type: TABLE DATA; Schema: topo; Owner: nm
--

COPY modeq (eq, date, login, processed) FROM stdin;
_vlan	2013-06-02 18:34:04	\N	0
\.


--
-- Data for Name: sensor; Type: TABLE DATA; Schema: topo; Owner: nm
--

COPY sensor (id, type, eq, comm, iface, param, lastmod, lastseen) FROM stdin;
\.


--
-- Name: seq_confcmd; Type: SEQUENCE SET; Schema: topo; Owner: nm
--

SELECT pg_catalog.setval('seq_confcmd', 25, true);


--
-- Name: seq_eq; Type: SEQUENCE SET; Schema: topo; Owner: nm
--

SELECT pg_catalog.setval('seq_eq', 1, false);


--
-- Name: seq_eqtype; Type: SEQUENCE SET; Schema: topo; Owner: nm
--

SELECT pg_catalog.setval('seq_eqtype', 3, true);


--
-- Name: seq_link; Type: SEQUENCE SET; Schema: topo; Owner: nm
--

SELECT pg_catalog.setval('seq_link', 1, false);


--
-- Data for Name: vlan; Type: TABLE DATA; Schema: topo; Owner: nm
--

COPY vlan (vlanid, descr, voip) FROM stdin;
1	default	0
\.


SET search_path = dns, pg_catalog;

--
-- Name: communaute_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY communaute
    ADD CONSTRAINT communaute_pkey PRIMARY KEY (idcommu);


--
-- Name: dhcpprofil_nom_key; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY dhcpprofil
    ADD CONSTRAINT dhcpprofil_nom_key UNIQUE (nom);


--
-- Name: dhcpprofil_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY dhcpprofil
    ADD CONSTRAINT dhcpprofil_pkey PRIMARY KEY (iddhcpprofil);


--
-- Name: dhcprange_max_key; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY dhcprange
    ADD CONSTRAINT dhcprange_max_key UNIQUE (max);


--
-- Name: dhcprange_min_key; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY dhcprange
    ADD CONSTRAINT dhcprange_min_key UNIQUE (min);


--
-- Name: dhcprange_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY dhcprange
    ADD CONSTRAINT dhcprange_pkey PRIMARY KEY (iddhcprange);


--
-- Name: domaine_nom_key; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY domaine
    ADD CONSTRAINT domaine_nom_key UNIQUE (nom);


--
-- Name: domaine_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY domaine
    ADD CONSTRAINT domaine_pkey PRIMARY KEY (iddom);


--
-- Name: dr_dhcpprofil_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY dr_dhcpprofil
    ADD CONSTRAINT dr_dhcpprofil_pkey PRIMARY KEY (idgrp, iddhcpprofil);


--
-- Name: dr_dom_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY dr_dom
    ADD CONSTRAINT dr_dom_pkey PRIMARY KEY (idgrp, iddom);


--
-- Name: dr_ip_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY dr_ip
    ADD CONSTRAINT dr_ip_pkey PRIMARY KEY (idgrp, adr);


--
-- Name: dr_reseau_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY dr_reseau
    ADD CONSTRAINT dr_reseau_pkey PRIMARY KEY (idgrp, idreseau);


--
-- Name: etablissement_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY etablissement
    ADD CONSTRAINT etablissement_pkey PRIMARY KEY (idetabl);


--
-- Name: hinfo_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY hinfo
    ADD CONSTRAINT hinfo_pkey PRIMARY KEY (idhinfo);


--
-- Name: relais_dom_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY relais_dom
    ADD CONSTRAINT relais_dom_pkey PRIMARY KEY (iddom, mx);


--
-- Name: reseau_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY reseau
    ADD CONSTRAINT reseau_pkey PRIMARY KEY (idreseau);


--
-- Name: role_mail_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY role_mail
    ADD CONSTRAINT role_mail_pkey PRIMARY KEY (idrr);


--
-- Name: role_web_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY role_web
    ADD CONSTRAINT role_web_pkey PRIMARY KEY (idrr);


--
-- Name: rr_cname_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY rr_cname
    ADD CONSTRAINT rr_cname_pkey PRIMARY KEY (idrr, cname);


--
-- Name: rr_ip_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY rr_ip
    ADD CONSTRAINT rr_ip_pkey PRIMARY KEY (idrr, adr);


--
-- Name: rr_mac_key; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY rr
    ADD CONSTRAINT rr_mac_key UNIQUE (mac);


--
-- Name: rr_mx_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY rr_mx
    ADD CONSTRAINT rr_mx_pkey PRIMARY KEY (idrr, mx);


--
-- Name: rr_nom_iddom_key; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY rr
    ADD CONSTRAINT rr_nom_iddom_key UNIQUE (nom, iddom);


--
-- Name: rr_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY rr
    ADD CONSTRAINT rr_pkey PRIMARY KEY (idrr);


--
-- Name: zone_domaine_key; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY zone
    ADD CONSTRAINT zone_domaine_key UNIQUE (domaine);


--
-- Name: zone_pkey; Type: CONSTRAINT; Schema: dns; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY zone
    ADD CONSTRAINT zone_pkey PRIMARY KEY (idzone);


SET search_path = global, pg_catalog;

--
-- Name: config_pkey; Type: CONSTRAINT; Schema: global; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT config_pkey PRIMARY KEY (clef);


--
-- Name: corresp_login_key; Type: CONSTRAINT; Schema: global; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY corresp
    ADD CONSTRAINT corresp_login_key UNIQUE (login);


--
-- Name: corresp_pkey; Type: CONSTRAINT; Schema: global; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY corresp
    ADD CONSTRAINT corresp_pkey PRIMARY KEY (idcor);


--
-- Name: groupe_nom_key; Type: CONSTRAINT; Schema: global; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY groupe
    ADD CONSTRAINT groupe_nom_key UNIQUE (nom);


--
-- Name: groupe_pkey; Type: CONSTRAINT; Schema: global; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY groupe
    ADD CONSTRAINT groupe_pkey PRIMARY KEY (idgrp);


SET search_path = pgauth, pg_catalog;

--
-- Name: member_pkey; Type: CONSTRAINT; Schema: pgauth; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY member
    ADD CONSTRAINT member_pkey PRIMARY KEY (login, realm);


--
-- Name: realm_pkey; Type: CONSTRAINT; Schema: pgauth; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY realm
    ADD CONSTRAINT realm_pkey PRIMARY KEY (realm);


--
-- Name: user_pkey; Type: CONSTRAINT; Schema: pgauth; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY "user"
    ADD CONSTRAINT user_pkey PRIMARY KEY (login);


SET search_path = topo, pg_catalog;

--
-- Name: confcmd_pkey; Type: CONSTRAINT; Schema: topo; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY confcmd
    ADD CONSTRAINT confcmd_pkey PRIMARY KEY (idccmd);


--
-- Name: dotattr_pkey; Type: CONSTRAINT; Schema: topo; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY dotattr
    ADD CONSTRAINT dotattr_pkey PRIMARY KEY (rank);


--
-- Name: eq_eq_key; Type: CONSTRAINT; Schema: topo; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY eq
    ADD CONSTRAINT eq_eq_key UNIQUE (eq);


--
-- Name: eq_pkey; Type: CONSTRAINT; Schema: topo; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY eq
    ADD CONSTRAINT eq_pkey PRIMARY KEY (ideq);


--
-- Name: eqtype_pkey; Type: CONSTRAINT; Schema: topo; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY eqtype
    ADD CONSTRAINT eqtype_pkey PRIMARY KEY (idtype);


--
-- Name: eqtype_type_key; Type: CONSTRAINT; Schema: topo; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY eqtype
    ADD CONSTRAINT eqtype_type_key UNIQUE (type);


--
-- Name: filemonitor_pkey; Type: CONSTRAINT; Schema: topo; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY filemonitor
    ADD CONSTRAINT filemonitor_pkey PRIMARY KEY (path);


--
-- Name: ifchanges_pkey; Type: CONSTRAINT; Schema: topo; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY ifchanges
    ADD CONSTRAINT ifchanges_pkey PRIMARY KEY (idrr, reqdate, iface);


--
-- Name: ignoreequsers_login_key; Type: CONSTRAINT; Schema: topo; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY ignoreequsers
    ADD CONSTRAINT ignoreequsers_login_key UNIQUE (login);


--
-- Name: keepstate_pkey; Type: CONSTRAINT; Schema: topo; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY keepstate
    ADD CONSTRAINT keepstate_pkey PRIMARY KEY (type);


--
-- Name: link_pkey; Type: CONSTRAINT; Schema: topo; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY link
    ADD CONSTRAINT link_pkey PRIMARY KEY (idlink);


--
-- Name: sensor_pkey; Type: CONSTRAINT; Schema: topo; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY sensor
    ADD CONSTRAINT sensor_pkey PRIMARY KEY (id);


--
-- Name: vlan_pkey; Type: CONSTRAINT; Schema: topo; Owner: nm; Tablespace: 
--

ALTER TABLE ONLY vlan
    ADD CONSTRAINT vlan_pkey PRIMARY KEY (vlanid);


SET search_path = mac, pg_catalog;

--
-- Name: ipmac_closed_idx; Type: INDEX; Schema: mac; Owner: nm; Tablespace: 
--

CREATE INDEX ipmac_closed_idx ON ipmac USING btree (closed);


--
-- Name: ipmac_data_idx; Type: INDEX; Schema: mac; Owner: nm; Tablespace: 
--

CREATE INDEX ipmac_data_idx ON ipmac USING btree (data);


--
-- Name: ipmac_ip_idx; Type: INDEX; Schema: mac; Owner: nm; Tablespace: 
--

CREATE INDEX ipmac_ip_idx ON ipmac USING btree (((data).ip));


--
-- Name: ipmac_mac_idx; Type: INDEX; Schema: mac; Owner: nm; Tablespace: 
--

CREATE INDEX ipmac_mac_idx ON ipmac USING btree (((data).mac));


--
-- Name: ipmac_src_idx; Type: INDEX; Schema: mac; Owner: nm; Tablespace: 
--

CREATE INDEX ipmac_src_idx ON ipmac USING btree (src);


--
-- Name: ipmac_start_idx; Type: INDEX; Schema: mac; Owner: nm; Tablespace: 
--

CREATE INDEX ipmac_start_idx ON ipmac USING btree (start);


--
-- Name: ipmac_stop_idx; Type: INDEX; Schema: mac; Owner: nm; Tablespace: 
--

CREATE INDEX ipmac_stop_idx ON ipmac USING btree (stop);


--
-- Name: portmac_closed_idx; Type: INDEX; Schema: mac; Owner: nm; Tablespace: 
--

CREATE INDEX portmac_closed_idx ON portmac USING btree (closed);


--
-- Name: portmac_data_idx; Type: INDEX; Schema: mac; Owner: nm; Tablespace: 
--

CREATE INDEX portmac_data_idx ON portmac USING btree (data);


--
-- Name: portmac_mac_idx; Type: INDEX; Schema: mac; Owner: nm; Tablespace: 
--

CREATE INDEX portmac_mac_idx ON portmac USING btree (((data).mac));


--
-- Name: portmac_port_idx; Type: INDEX; Schema: mac; Owner: nm; Tablespace: 
--

CREATE INDEX portmac_port_idx ON portmac USING btree (((data).port));


--
-- Name: portmac_src_idx; Type: INDEX; Schema: mac; Owner: nm; Tablespace: 
--

CREATE INDEX portmac_src_idx ON portmac USING btree (src);


--
-- Name: portmac_start_idx; Type: INDEX; Schema: mac; Owner: nm; Tablespace: 
--

CREATE INDEX portmac_start_idx ON portmac USING btree (start);


--
-- Name: portmac_stop_idx; Type: INDEX; Schema: mac; Owner: nm; Tablespace: 
--

CREATE INDEX portmac_stop_idx ON portmac USING btree (stop);


--
-- Name: portmac_vlanid_idx; Type: INDEX; Schema: mac; Owner: nm; Tablespace: 
--

CREATE INDEX portmac_vlanid_idx ON portmac USING btree (((data).vlanid));


SET search_path = topo, pg_catalog;

--
-- Name: modeq_index; Type: INDEX; Schema: topo; Owner: nm; Tablespace: 
--

CREATE INDEX modeq_index ON modeq USING btree (eq);


SET search_path = dns, pg_catalog;

--
-- Name: tr_modifier_cname; Type: TRIGGER; Schema: dns; Owner: nm
--

CREATE TRIGGER tr_modifier_cname AFTER INSERT OR DELETE OR UPDATE ON rr_cname FOR EACH ROW EXECUTE PROCEDURE public.modifier_mxcname();


--
-- Name: tr_modifier_dhcpprofil; Type: TRIGGER; Schema: dns; Owner: nm
--

CREATE TRIGGER tr_modifier_dhcpprofil BEFORE UPDATE ON dhcpprofil FOR EACH ROW EXECUTE PROCEDURE public.generer_dhcp();


--
-- Name: tr_modifier_dhcprange; Type: TRIGGER; Schema: dns; Owner: nm
--

CREATE TRIGGER tr_modifier_dhcprange BEFORE UPDATE ON dhcprange FOR EACH ROW EXECUTE PROCEDURE public.generer_dhcp();


--
-- Name: tr_modifier_ip; Type: TRIGGER; Schema: dns; Owner: nm
--

CREATE TRIGGER tr_modifier_ip AFTER INSERT OR DELETE OR UPDATE ON rr_ip FOR EACH ROW EXECUTE PROCEDURE public.modifier_ip();


--
-- Name: tr_modifier_mx; Type: TRIGGER; Schema: dns; Owner: nm
--

CREATE TRIGGER tr_modifier_mx AFTER INSERT OR DELETE OR UPDATE ON rr_mx FOR EACH ROW EXECUTE PROCEDURE public.modifier_mxcname();


--
-- Name: tr_modifier_relais; Type: TRIGGER; Schema: dns; Owner: nm
--

CREATE TRIGGER tr_modifier_relais AFTER INSERT OR DELETE OR UPDATE ON relais_dom FOR EACH ROW EXECUTE PROCEDURE public.modifier_relais();


--
-- Name: tr_modifier_reseau; Type: TRIGGER; Schema: dns; Owner: nm
--

CREATE TRIGGER tr_modifier_reseau BEFORE UPDATE ON reseau FOR EACH ROW EXECUTE PROCEDURE public.generer_dhcp();


--
-- Name: tr_modifier_rr; Type: TRIGGER; Schema: dns; Owner: nm
--

CREATE TRIGGER tr_modifier_rr AFTER INSERT OR DELETE OR UPDATE ON rr FOR EACH ROW EXECUTE PROCEDURE public.modifier_rr();


--
-- Name: tr_modifier_zone; Type: TRIGGER; Schema: dns; Owner: nm
--

CREATE TRIGGER tr_modifier_zone BEFORE UPDATE ON zone_normale FOR EACH ROW EXECUTE PROCEDURE public.modifier_zone();


--
-- Name: tr_modifier_zone4; Type: TRIGGER; Schema: dns; Owner: nm
--

CREATE TRIGGER tr_modifier_zone4 BEFORE UPDATE ON zone_reverse4 FOR EACH ROW EXECUTE PROCEDURE public.modifier_zone();


--
-- Name: tr_modifier_zone6; Type: TRIGGER; Schema: dns; Owner: nm
--

CREATE TRIGGER tr_modifier_zone6 BEFORE UPDATE ON zone_reverse6 FOR EACH ROW EXECUTE PROCEDURE public.modifier_zone();


SET search_path = pgauth, pg_catalog;

--
-- Name: phnom; Type: TRIGGER; Schema: pgauth; Owner: nm
--

CREATE TRIGGER phnom BEFORE INSERT OR UPDATE ON "user" FOR EACH ROW EXECUTE PROCEDURE add_soundex();


SET search_path = topo, pg_catalog;

--
-- Name: tr_mod_eq; Type: TRIGGER; Schema: topo; Owner: nm
--

CREATE TRIGGER tr_mod_eq AFTER INSERT OR DELETE OR UPDATE ON eq FOR EACH ROW EXECUTE PROCEDURE public.modif_routerdb();


--
-- Name: tr_mod_vlan; Type: TRIGGER; Schema: topo; Owner: nm
--

CREATE TRIGGER tr_mod_vlan AFTER INSERT OR DELETE OR UPDATE ON vlan FOR EACH ROW EXECUTE PROCEDURE public.modif_vlan();


SET search_path = dns, pg_catalog;

--
-- Name: dhcprange_iddhcpprofil_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY dhcprange
    ADD CONSTRAINT dhcprange_iddhcpprofil_fkey FOREIGN KEY (iddhcpprofil) REFERENCES dhcpprofil(iddhcpprofil);


--
-- Name: dhcprange_iddom_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY dhcprange
    ADD CONSTRAINT dhcprange_iddom_fkey FOREIGN KEY (iddom) REFERENCES domaine(iddom);


--
-- Name: dr_dhcpprofil_iddhcpprofil_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY dr_dhcpprofil
    ADD CONSTRAINT dr_dhcpprofil_iddhcpprofil_fkey FOREIGN KEY (iddhcpprofil) REFERENCES dhcpprofil(iddhcpprofil);


--
-- Name: dr_dhcpprofil_idgrp_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY dr_dhcpprofil
    ADD CONSTRAINT dr_dhcpprofil_idgrp_fkey FOREIGN KEY (idgrp) REFERENCES global.groupe(idgrp);


--
-- Name: dr_dom_idgrp_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY dr_dom
    ADD CONSTRAINT dr_dom_idgrp_fkey FOREIGN KEY (idgrp) REFERENCES global.groupe(idgrp);


--
-- Name: dr_ip_idgrp_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY dr_ip
    ADD CONSTRAINT dr_ip_idgrp_fkey FOREIGN KEY (idgrp) REFERENCES global.groupe(idgrp);


--
-- Name: dr_reseau_idgrp_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY dr_reseau
    ADD CONSTRAINT dr_reseau_idgrp_fkey FOREIGN KEY (idgrp) REFERENCES global.groupe(idgrp);


--
-- Name: dr_reseau_idreseau_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY dr_reseau
    ADD CONSTRAINT dr_reseau_idreseau_fkey FOREIGN KEY (idreseau) REFERENCES reseau(idreseau);


--
-- Name: relais_dom_iddom_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY relais_dom
    ADD CONSTRAINT relais_dom_iddom_fkey FOREIGN KEY (iddom) REFERENCES domaine(iddom);


--
-- Name: relais_dom_mx_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY relais_dom
    ADD CONSTRAINT relais_dom_mx_fkey FOREIGN KEY (mx) REFERENCES rr(idrr);


--
-- Name: reseau_idcommu_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY reseau
    ADD CONSTRAINT reseau_idcommu_fkey FOREIGN KEY (idcommu) REFERENCES communaute(idcommu);


--
-- Name: reseau_idetabl_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY reseau
    ADD CONSTRAINT reseau_idetabl_fkey FOREIGN KEY (idetabl) REFERENCES etablissement(idetabl);


--
-- Name: role_mail_heberg_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY role_mail
    ADD CONSTRAINT role_mail_heberg_fkey FOREIGN KEY (heberg) REFERENCES rr(idrr);


--
-- Name: role_mail_idrr_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY role_mail
    ADD CONSTRAINT role_mail_idrr_fkey FOREIGN KEY (idrr) REFERENCES rr(idrr);


--
-- Name: role_web_idrr_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY role_web
    ADD CONSTRAINT role_web_idrr_fkey FOREIGN KEY (idrr) REFERENCES rr(idrr);


--
-- Name: rr_cname_cname_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY rr_cname
    ADD CONSTRAINT rr_cname_cname_fkey FOREIGN KEY (cname) REFERENCES rr(idrr);


--
-- Name: rr_cname_idrr_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY rr_cname
    ADD CONSTRAINT rr_cname_idrr_fkey FOREIGN KEY (idrr) REFERENCES rr(idrr);


--
-- Name: rr_idcor_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY rr
    ADD CONSTRAINT rr_idcor_fkey FOREIGN KEY (idcor) REFERENCES global.corresp(idcor);


--
-- Name: rr_iddhcpprofil_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY rr
    ADD CONSTRAINT rr_iddhcpprofil_fkey FOREIGN KEY (iddhcpprofil) REFERENCES dhcpprofil(iddhcpprofil);


--
-- Name: rr_iddom_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY rr
    ADD CONSTRAINT rr_iddom_fkey FOREIGN KEY (iddom) REFERENCES domaine(iddom);


--
-- Name: rr_idhinfo_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY rr
    ADD CONSTRAINT rr_idhinfo_fkey FOREIGN KEY (idhinfo) REFERENCES hinfo(idhinfo);


--
-- Name: rr_ip_idrr_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY rr_ip
    ADD CONSTRAINT rr_ip_idrr_fkey FOREIGN KEY (idrr) REFERENCES rr(idrr);


--
-- Name: rr_mx_idrr_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY rr_mx
    ADD CONSTRAINT rr_mx_idrr_fkey FOREIGN KEY (idrr) REFERENCES rr(idrr);


--
-- Name: rr_mx_mx_fkey; Type: FK CONSTRAINT; Schema: dns; Owner: nm
--

ALTER TABLE ONLY rr_mx
    ADD CONSTRAINT rr_mx_mx_fkey FOREIGN KEY (mx) REFERENCES rr(idrr);


SET search_path = global, pg_catalog;

--
-- Name: corresp_idgrp_fkey; Type: FK CONSTRAINT; Schema: global; Owner: nm
--

ALTER TABLE ONLY corresp
    ADD CONSTRAINT corresp_idgrp_fkey FOREIGN KEY (idgrp) REFERENCES groupe(idgrp);


SET search_path = pgauth, pg_catalog;

--
-- Name: member_login_fkey; Type: FK CONSTRAINT; Schema: pgauth; Owner: nm
--

ALTER TABLE ONLY member
    ADD CONSTRAINT member_login_fkey FOREIGN KEY (login) REFERENCES "user"(login);


--
-- Name: member_realm_fkey; Type: FK CONSTRAINT; Schema: pgauth; Owner: nm
--

ALTER TABLE ONLY member
    ADD CONSTRAINT member_realm_fkey FOREIGN KEY (realm) REFERENCES realm(realm);


SET search_path = topo, pg_catalog;

--
-- Name: confcmd_idtype_fkey; Type: FK CONSTRAINT; Schema: topo; Owner: nm
--

ALTER TABLE ONLY confcmd
    ADD CONSTRAINT confcmd_idtype_fkey FOREIGN KEY (idtype) REFERENCES eqtype(idtype);


--
-- Name: dr_eq_idgrp_fkey; Type: FK CONSTRAINT; Schema: topo; Owner: nm
--

ALTER TABLE ONLY dr_eq
    ADD CONSTRAINT dr_eq_idgrp_fkey FOREIGN KEY (idgrp) REFERENCES global.groupe(idgrp);


--
-- Name: eq_idtype_fkey; Type: FK CONSTRAINT; Schema: topo; Owner: nm
--

ALTER TABLE ONLY eq
    ADD CONSTRAINT eq_idtype_fkey FOREIGN KEY (idtype) REFERENCES eqtype(idtype);


--
-- Name: ifchanges_idrr_fkey; Type: FK CONSTRAINT; Schema: topo; Owner: nm
--

ALTER TABLE ONLY ifchanges
    ADD CONSTRAINT ifchanges_idrr_fkey FOREIGN KEY (idrr) REFERENCES dns.rr(idrr);


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

