#!%TCLSH%

#
# This script runs one or more Netmagis tests
#
# Syntax:
#	netmagis-test file.test ... file.test		# run specified tests
#	netmagis-test					# run all tests
#
# Each test file is a TCL file, where you can use the following
# directives:
#   test <name> <cmd> <pattern>
#   test-sh <name> <cmd> <pattern>
#   test-cgi <name> <path-to-cgi> <user> <param> <pattern>
#   save-db <name> <path-to-dbfile>
#   load-db <name> <path-to-dbfile>
# where:
#   <name> is the test name. It is used to output test results
#	in %NMVARDIR%/tests/<testfilename>:<name>.{out,err}
#   <cmd> is a shell command. When using the "test-sh" directive,
#	PG* environment variables are automatically set in order
#	to provide access to the netmagis database (no support
#	provided if the mac.* schema is located in another database)
#   <pattern> is a regexp pattern, not anchored
#   <path-to-cgi> is the path to the CGI script to be called. If this
#	parameter does not begin with "/", %NMCGIDIR%/
#	is automatically prepended.
#   <path-to-dbfile> is the path to the dump file. If this parameter
#	does not begin with "/", %NMVARDIR%/tests/
#	is automatically prepended.
# All these directives register tests in an internal variable. When
# all files are read, tests are run, from the %NMVARDIR%/tests/
# directory.
#
# Note: Netmagis instance must be installed (this is needed to provide
# correct paths and password)
#
# History
#   2013/06/05 : pda      : documentation
#

source %LIBNETMAGIS%

set conf(bindir)	"%BINDIR%"
set conf(libtest)	"%NMLIBDIR%/tests"
set conf(vartest)	"%NMVARDIR%/tests"
set conf(cgidir)	"%NMCGIDIR%"

##############################################################################
# Register tests
##############################################################################

#
# Backoffice procedures
#

# register all tests in the file
proc process-file {file} {
    global currentfile

    # keep just base name (without extension)
    set currentfile [file rootname [lreplace [split $file "/"] 0 end-1]]
    uplevel \#0 "source $file"
}

proc init-actions {} {
    global tabtests

    catch {array unset tabtests}
    set tabtests(idx) 0
}

proc add-action {name cmd pattern} {
    global tabtests
    global currentfile

    set name "$currentfile:$name"
    set idx $tabtests(idx)
    if {[info exists tabtests(/name:$name)]} then {
	puts stderr "Test '$name' already provided. Skipping."
    } else {
	set tabtests(/name:$name) {}
	set tabtests($idx) [list $name $cmd $pattern]
	incr tabtests(idx)
    }
}

# set PG* variables for database access
proc prepend-sh-variables {cmd} {
    global conf

    return "eval `$conf(bindir)/netmagis-config -c dnsdbhost dnsdbport dnsdbname dnsdbuser dnsdbpassword`
	    PGHOST=\"\$dnsdbhost\"
	    PGPORT=\"\$dnsdbport\"
	    PGDATABASE=\"\$dnsdbname\"
	    PGUSER=\"\$dnsdbuser\"
	    PGPASSWORD=\"\$dnsdbpassword\"
	    export PGHOST PGPORT PGDATABASE PGUSER PGPASSWORD
	    $cmd"
}

#
# User callable procedures
#

# register a single test
proc test {name cmd pattern} {
    add-action $name $cmd $pattern
}

# register a shell test
proc test-sh {name cmd pattern} {
    add-action $name [prepend-sh-variables $cmd] $pattern
}

# register a CGI test
proc test-cgi {name script user param pattern} {
    global conf

    if {! [regexp {^/} $script]} then {
	set script "$conf(cgidir)/$script"
    }
    set cmd "$conf(libtest)/cgi -l $user $script $param"
    add-action $name $cmd $pattern
}

# register a "save to dump file"
proc save-db {name file} {
    global conf

    if {! [regexp {^/} $file]} then {
	set file "$conf(vartest)/$file"
    }
    set cmd [prepend-sh-variables "pg_dump \$PGDATABASE > $file"]
    add-action $name $cmd "^$"
}

# register a "restore from dump file"
proc load-db {name file} {
    global conf

    if {! [regexp {^/} $file]} then {
	set file "$conf(vartest)/$file"
    }
    set cmd [prepend-sh-variables "dropdb \$PGDATABASE
    			createdb -E unicode --template=template0
			psql -f $file \$PGDATABASE"]
    add-action $name $cmd ""
}

##############################################################################
# Run an individual test
##############################################################################

# pref:	directory and base name of test
# cmd:	cmd to run
# pattern: pattern to search in stdout
# return value: 1 if run ok and pattern found in stdout

proc run-and-grep {pref cmd pattern} {
    set r 0

    set out "$pref.out"
    set err "$pref.err"

    if {[catch {exec -ignorestderr sh -c $cmd > $out 2>$err} x]} then {
	#
	# An error occurrend
	# r contains cmd standard output with a last
	# line "child process exited abnormally"
	# File contains cmd standard error
	#
    } else {
	#
	# Script terminated without error
	# r contains cmd standard output
	# File contains cmd standard error
	#
	set fd [open $out "r"]
	set t [read $fd]
	close $fd
	if {[regexp $pattern $t]} then {
	    set r 1
	}
    }
    if {! $r} then {
	set fd [open $err "a"]
	puts $fd "Command was:"
	puts $fd "\t$cmd"
	close $fd
    }
    return $r
}

##############################################################################
# Run all tests
##############################################################################

# fd: channel for displaying status
# autostop: 1 if the first failed test must stop the whole run
# return value: 1 if fail, 0 if all tests are ok
proc run-all-tests {fd autostop} {
    global tabtests
    global conf

    set r 0
    set ntests $tabtests(idx)
    for {set i 0} {$i < $ntests} {incr i} {
	lassign $tabtests($i) name cmd pattern
	puts -nonewline $fd "$name: "
	flush $fd
	set rt [run-and-grep $conf(vartest)/$name $cmd $pattern]
	if {$rt} then {
	    puts $fd "ok"
	} else {
	    puts $fd "fail"
	    set r 1
	    if {$autostop} then {
		break
	    }
	}
    }
    return $r
}

##############################################################################
# Main procedure
##############################################################################

set usage {usage: %1$s [-h] [-s] [<file|dir> ... <file|dir>]
    -h		: display this text
    -s		: stop at first failed test
}

proc usage {argv0} {
    global usage

    puts stderr [format $usage $argv 0]
}

proc main {argv0 argv} {
    global conf

    set autostop 0

    #
    # Argument analysis
    #

    while {[llength $argv] > 0} {
	switch -glob -- [lindex $argv 0] {
	    -h {
		usage $argv0
		return 0
	    }
	    -s {
		set autostop 1
		set argv [lreplace $argv 0 0]
	    }
	    -* {
		usage $argv0
		return 1
	    }
	    default {
		break ;
	    }
	}
    }

    if {[llength $argv] == 0} then {
	set argv [list $conf(libtest)]
    }

    #
    # Load tests
    #

    init-actions
    foreach fileordir $argv {
	if {[file isdirectory $fileordir]} then {
	    set lf [glob -nocomplain -directory $fileordir "*.test"]
	    foreach f [lsort $lf] {
		process-file $f
	    }
	} elseif {[file isfile $fileordir]} then {
	    process-file $fileordir
	} else {
	    puts stderr "File or directory '$fileordir' not found"
	    return 1
	}
    }

    #
    # Run tests
    #

    cd $conf(vartest)
    set r [run-all-tests stdout $autostop]
    return $r
}

exit [main $argv0 $argv]
