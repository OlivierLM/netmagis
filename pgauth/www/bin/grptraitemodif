#!%TCLSH%

#
# Script pour modifier un groupe
#
# Appelé par : script grpmodif ou grptraitemodif
#
# Paramètres (formulaire ou URL) :
#	- valider : "Sélectionner", "Enregistrer", ">>" ou "<<"
# - si valider == "Sélectionner" ou "Réinitialiser"
#	- groupe : nom du groupe sélectionné
# - si valider == "Enregistrer"
#	- groupe : nom du groupe en cours de modification
#	- descr : description du groupe modifiée éventuellement
#	- vraismembres : membres issus de la sélection, à enregistrer
#	- utilisateurs : non utilisé
#	- membres : non utilisé
# - si valider == ">>"
#	- groupe : nom du groupe en cours de modification
#	- descr : description du groupe modifiée éventuellement
#	- vraismembres : membres déjà présents ou sélectionnés
#	- utilisateurs : utilisateurs à ajouter au groupe (i.e. vraimembres)
#	- membres : non utilisé
# - si valider == "<<"
#	- groupe : nom du groupe en cours de modification
#	- descr : description du groupe modifiée éventuellement
#	- vraismembres : membres déjà présents ou sélectionnés
#	- utilisateurs : non utilisé
#	- membres : utilisateurs à enlever du groupe (i.e. vraimembres)
#
# Historique
#   2003/06/03 : pda/jean : création
#   2003/06/27 : pda      : utilisation de cgi-exec
#   2007/12/04 : pda/jean : intégration dans netmagis
#

set conf(homeurl)	%HOMEURL%

#
# Chemins utilisés par les scripts
#

set conf(pkg)		%PKGTCL%
set conf(lib)		%DESTDIR%/lib
set conf(libauth)	$conf(lib)/libauth.tcl

#
# Définition des noms des pages "à trous"
#

set conf(err)		$conf(lib)/erreur.html
set conf(page)		$conf(lib)/grptraitemodif.html
set conf(ok)		$conf(lib)/actionok.html

#
# Quelques paramètres du script
#

set conf(auth)		%AUTH%
set conf(nologin)	%NOLOGIN%
set conf(admin)		%GRPROOT%

set conf(taille)	20

set conf(form)		{
	{groupe		1 1}
	{valider	1 1}
}

set conf(formcomplete)	{
	{descr		1 1}
	{vraismembres	1 1}
	{utilisateurs	0 99999}
	{membres	0 99999}
}

#
# Les outils du parfait concepteur de pages Web dynamiques...
#

lappend auto_path $conf(pkg)
package require webapp
package require pgsql

#
# On y va !
#

# ::webapp::cgidebug ; exit

source $conf(libauth)

###############################################################################
# Procédures auxiliaires
###############################################################################

proc actualiser {groupe descr vraismembres} {
    global conf

    #
    # Constituer la listbox pour les membres
    #

    set liste {}
    foreach u [lsort $vraismembres] {
	set tab($u) {}
	lappend liste [list $u $u]
    }
    set membres [::webapp::form-menu membres $conf(taille) 1 $liste {}]

    #
    # Constituer la listbox pour les autres utilisateurs
    #

    set liste {}
    foreach u [auth-searchuser nonexistentarray {+login}] {
	if {! [info exists tab($u)]} then {
	    lappend liste [list $u $u]
	}
    }
    set utilisateurs [::webapp::form-menu utilisateurs $conf(taille) 1 $liste {}]

    #
    # Mettre en forme HTML la description
    #

    set htmldescr [::webapp::html-string $descr]

    #
    # Envoi de la page après substitution
    #

    ::webapp::send html [::webapp::file-subst $conf(page) \
				[list \
					[list %GROUPE%       $groupe] \
					[list %DESCR%        $htmldescr] \
					[list %VRAISMEMBRES% $vraismembres] \
					[list %LISTETOUS%    $utilisateurs] \
					[list %LISTEMEMBRES% $membres] \
				    ] \
			    ]
}

proc modifier-membres {vraismembres enplus enmoins} {
    #
    # Constituer l'ensemble de départ
    #

    foreach m $vraismembres {
	set tab($m) {}
    }

    #
    # Ajouter les membres en plus
    #

    foreach m $enplus {
	set tab($m) {}
    }

    #
    # Retirer les membres en moins
    #

    foreach m $enmoins {
	catch {unset tab($m)}
    }

    #
    # Retourner le résultat
    #

    return [array names tab]
}

##############################################################################
# Programme principal
##############################################################################

proc main {} {
    global conf

    #
    # Initialisation
    #

    init-auth $conf(nologin) $conf(auth) $conf(admin) $conf(err) $conf(form) ftab login

    set valider [lindex $ftab(valider) 0]
    set groupe [lindex $ftab(groupe) 0]

    #
    # Vérifier les informations du groupe
    #

    if {! [auth-lsgroup tabgrp]} then {
	::webapp::error-exit $conf(err) "Récupération des groupes impossible."
    }

    if {! [info exists tabgrp($groupe)]} then {
	::webapp::error-exit $conf(err) \
	    "Groupe '$groupe' inexistant. Suppression refusée."
    }

    #
    # Est-ce la première fois qu'on rentre dans ce script ?
    #

    if {[string equal $valider "Réinitialiser"]} then {
	set valider "Sélectionner"
    }

    if {[string equal $valider "Sélectionner"]} then {
	#
	# Oui : prendre les valeurs dans la base
	#
	set descr        [lindex $tabgrp($groupe) 0]
	set vraismembres [lindex $tabgrp($groupe) 1]
    } else {
	#
	# Non : prendre les valeurs dans le formulaire
	#

	if {[llength [::webapp::get-data ftab $conf(formcomplete)]] == 0} then {
	    ::webapp::error-exit $conf(err) "Formulaire invalide: $ftab(_error)"
	}
	set descr	 [lindex $ftab(descr) 0]
	set vraismembres [lindex $ftab(vraismembres) 0]
	set utilisateurs $ftab(utilisateurs)
	set membres      $ftab(membres)
    }

    #
    # Suivant la valeur du bouton de validation :
    #   - Sélectionner : entrée dans la boucle
    #   - >> : ajouter des utilisateurs au groupe
    #   - << : retirer des utilisateurs du groupe
    #   - Enregistrer : enregistrer les valeurs courantes
    #

    switch -- $valider {
	Sélectionner {
	    actualiser $groupe $descr $vraismembres
	}
	{>>} {
	    set vraismembres [modifier-membres $vraismembres $utilisateurs {}]
	    actualiser $groupe $descr $vraismembres
	}
	{<<} {
	    set vraismembres [modifier-membres $vraismembres {} $membres]
	    actualiser $groupe $descr $vraismembres
	}
	Enregistrer {
	    #
	    # Enregistrer les modifications du groupe
	    #

	    if {! [auth-setgroup $groupe $descr $vraismembres msg]} then {
		::webapp::error-exit $conf(err) $msg
	    }

	    #
	    # Indiquer le succès de l'action effectuée
	    #

	    set action "de modification du groupe '$groupe'"

	    #
	    # Sortie du résultat
	    #

	    ::webapp::send html [::webapp::file-subst $conf(ok) \
					[list \
						[list %TITREACTION% $action] \
						[list %COMPLEMENT% ""] \
					    ] \
				    ]
	}
	default {
	    ::webapp::error-exit $conf(err) "Paramètres du formulaire invalides"
	}
    }

    #
    # Déconnexion de la base
    #

    end-auth
}

::webapp::cgi-exec main %DEBUG%
