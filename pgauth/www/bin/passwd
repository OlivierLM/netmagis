#!%TCLSH%

#
# Script pour modifier le mot de passe d'un utilisateur
#
# Appelé par : script accueil, et ce script lui-même sous diverses
#	facettes
#
# Paramètres (formulaire ou URL) :
#   - si appelé par script accueil : aucun
#   - si appelé par script
#
# Historique
#   2003/07/29 : pda     : création
#

set conf(homeurl)	%HOMEURL%

#
# Chemins utilisés par les scripts
#

set conf(pkg)		%PKGTCL%
set conf(lib)		%DESTDIR%/lib

#
# Quelques paramètres du script
#

set conf(auth)		%AUTH%
set conf(nologin)	%NOLOGIN%

#
# Définition des noms des pages "à trous" et de l'environnement
# d'exécution en général
#

set e(page-erreur)	$conf(lib)/pwderr.html
set e(page-choix)	$conf(lib)/pwdchoix.html
set e(page-ok)		$conf(lib)/pwdok.html

#
# Les outils du parfait concepteur de pages Web dynamiques...
#

lappend auto_path $conf(pkg)
package require webapp
package require auth

#
# On y va !
#

# ::webapp::cgidebug ; exit

##############################################################################
# Programme principal
##############################################################################

proc main {} {
    global conf
    global e

    #
    # Initialisation
    #
    puts stderr 10

    set msg [::auth::init $conf(auth)]
    if {! [string equal $msg ""]} then {
	::webapp::error-exit $e(page-erreur) $msg
    }

    set login [::webapp::user]
    if {[string compare $login ""] == 0} then {
	::webapp::error-exit $e(page-erreur) \
		"Pas de login : l'authentification a échoué."
    }

    puts stderr 20

    #
    # Tout le travail est effectué là
    #

    ::auth::pwdmanage e

    #
    # Déconnexion de la base
    #

    ::auth::close
}

::webapp::cgi-exec main %DEBUG%
