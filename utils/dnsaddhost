#!%TCLSH%

#
# Add a host in Netmagis database
#
# Syntax:
#   dnsaddhost <fqdn> <ip> <viewname>
#
# History
#   2004/09/24 : pda/jean : design from cgi script
#   2005/04/11 : pda/jean : adaptation
#   2007/10/25 : jean     : log modify actions
#   2010/12/18 : pda      : use new install system
#   2013/03/28 : pda/jean : add views
#

source %LIBNETMAGIS%

##############################################################################
# Small utility functions
##############################################################################

proc syntax-error {argv0} {
    regsub {.*/} $argv0 {} argv0
    puts stderr "usage: $argv0 fqdn ip view"
    exit 1
}

##############################################################################
# Ajout d'une machine
##############################################################################

#
# Add a host in database
#
# Input:
#   - dbfd: database access
#   - login: login name of user doing the addition
#   - idcor: user id
#   - fqdn: host name
#   - addr: IP address to add
#   - view: view name
# Output:
#   - return value: error message or empty string
#
# History
#   2004/09/24 : pda/jean : design from cgi script
#

proc add-ip {dbfd login idcor fqdn addr view} {
    #
    # Host name validation
    #

    set msg [check-fqdn-syntax $dbfd $fqdn name domain iddom]
    if {$msg ne ""} then {
	return $msg
    }
    set name [string tolower $name]

    #
    # Check access to view
    #
    set idview [u viewid $view]
    if {$idview == -1} then {
	return [mc "Invalid view '%s'" $view]
    }
    if {! [u isallowedview $idview]} then {
	return [mc "Access denied to view '%s'" $view]
    }
    set idviews [list $idview]

    #
    # Check access to name
    #

    set msg [check-authorized-host $dbfd $idcor $name $domain $idviews trr "host"]
    if {$msg ne ""} then {
	return $msg
    }
    set iddom $trr(iddom)

    #
    # Does the name exist, and is already associated to an IP address?
    #

    set mac ""
    set comment ""
    set iddhcpprofil 0
    set hinfo ""
    set droitsmtp 0
    set ttl -1
    set comment ""
    set respname ""
    set respmail ""

    set rrexists 0
    if {$trr(idrr) != ""} then {
	set rrexists 1

	set mac		$trr(mac)
	set iddhcpprofil $trr(iddhcpprofil)
	set droitsmtp	$trr(droitsmtp)
	set ttl		$trr(ttl)
	set comment	$trr(commentaire)
	set respname	$trr(respnom)
	set respmail	$trr(respmel)
    }

    #
    # Check syntax of IP address
    #

    set msg [check-ip-syntax $dbfd $addr "inet"]
    if {$msg ne ""} then {
	return $msg
    }

    #
    # Check that we have access to tthis IP address
    #

    if {! [check-authorized-ip $dbfd $idcor $addr]} then {
	return [mc "Access denied to IP address '%s'" $addr]
    }

    #
    # Check that this address does not exist yet
    #

    if {[read-rr-by-ip $dbfd $addr $idview trrbidon]} then {
	return [mc "IP address '%1$s' already exists in view '%2$s'" $addr $view]
    }

    #
    # Insert host and return result
    #

    set msg [add-host $dbfd trr $name $iddom $addr $idviews \
    				$mac $iddhcpprofil "" $droitsmtp \
				$ttl $comment $respname $respmail $idcor]
    return $msg
}


##############################################################################
# Main program
##############################################################################

proc main {argv0 argv} {
    global conf

    #
    # Initialization
    #

    set msg [d init-script dbfd $argv0 false tabcor]
    if {$msg ne ""} then {
	puts stderr "$msg"
	puts stderr "Aborted."
	return 1
    }

    #
    # Argument checking
    #

    if {[llength $argv] != 3} then {
	syntax-error $argv0
	return 1
    }
    lassign $argv fqdn addr view

    set msg [add-ip $dbfd $tabcor(login) $tabcor(idcor) $fqdn $addr $view]
    if {$msg ne ""} then {
	puts stderr $msg
	puts stderr "Aborted."
	return 1
    }

    #
    # End
    #

    d end
    return 0
}

exit [main $argv0 $argv]
