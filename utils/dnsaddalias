#!%TCLSH%

#
# Script pour ajouter un alias dans la base
#
# Syntaxe :
#   dnsaddalias <fqdn-alias> <fqdn-machine>
#
# Historique
#   2004/09/24 : pda/jean : création à partir du script cgi
#   2005/04/11 : pda/jean : adaptation
#   2007/10/25 : jean     : log des actions de modification
#   2010/12/18 : pda      : use new install system
#

source %LIBNETMAGIS%

##############################################################################
# Petites fonctions utilitaires
##############################################################################

proc syntax-error {argv0} {
    regsub {.*/} $argv0 {} argv0
    puts stderr "usage: $argv0 fqdn-alias fqdn-machine"
    exit 1
}

##############################################################################
# Ajout d'un alias
##############################################################################

#
# Ajout d'un alias dans la base
#
# Entrée :
#   - dbfd : accès à la base
#   - idcor : id du correspondant faisant l'ajout
#   - fqdnalias : nom complet de l'alias
#   - fqdnref : nom complet de la cible de l'alias
# Sortie :
#   - valeur de retour : message d'erreur, ou chaîne vide si ok.
#
# Historique
#   2004/09/29 : pda/jean : conception à partir du script CGI
#

proc add-alias {dbfd login idcor fqdnalias fqdnref} {
    #
    # Vérifier le FDQN de l'alias
    #

    set msg [check-fqdn-syntax $dbfd $fqdnalias nom domaine iddom]
    if {! [string equal $msg ""]} then {
	return $msg
    }

    #
    # Vérifier le FQDN de la cible
    #

    set msg [check-fqdn-syntax $dbfd $fqdnref nomref domaineref iddomref]
    if {! [string equal $msg ""]} then {
	return $msg
    }

    #
    # Valider les noms d'alias et de machine.
    #

    set msg [check-authorized-host $dbfd $idcor $nom $domaine trr "alias"]
    if {! [string equal $msg ""]} then {
	return $msg
    }
    set iddom $trr(iddom)

    set msg [check-authorized-host $dbfd $idcor $nomref $domaineref trrref "existing-host"]
    if {! [string equal $msg ""]} then {
	return $msg
    }

    #
    # Tous les tests sont ok, il faut insérer l'alias
    #

    if {! [::pgsql::lock $dbfd {dns.rr dns.rr_cname} msg]} then {
	return "Transaction impossible : $msg"
    }

    #
    # Rien n'existait pour ce nom, donc on insère un nouveau
    # RR.
    #

    set msg [add-rr $dbfd $nom $iddom "" 0 "" 0 -1 "" "" "" $idcor newrr]
    if {! [string equal $msg ""]} then {
	return "Impossible d'insérer : $msg"
    }

    #
    # Ajouter l'alias proprement dit
    #

    set sql "INSERT INTO dns.rr_cname VALUES ($newrr(idrr), $trrref(idrr))"
    if {! [::pgsql::execsql $dbfd $sql msg]} then {
	return "Impossible d'insérer l'alias : $msg"
    }

    if {! [::pgsql::unlock $dbfd "commit" msg]} then {
       ::pgsql::unlock $dbfd "abort" m
       return "L'insertion a échoué : $msg"
    }

    #
    # Écrire le log
    #

    d writelog "ajoutalias" "ajout de l'alias $fqdnalias -> $fqdnref (ligne de commande)"

    #
    # Sortie du résultat
    #

    return ""
}

##############################################################################
# Programme principal
##############################################################################

proc main {argv0 argv} {
    global conf

    #
    # Initialisation des accès
    #

    set msg [d init-script dbfd $argv0 false tabcor]
    if {$msg ne ""} then {
	puts stderr "$msg"
	puts stderr "Aborted."
	return 1
    }

    #
    # Validation des arguments
    #

    if {[llength $argv] != 2} then {
	syntax-error $argv0
	return 1
    }

    set fqdnalias [lindex $argv 0]
    set fqdnref   [lindex $argv 1]

    set msg [add-alias $dbfd $tabcor(login) $tabcor(idcor) $fqdnalias $fqdnref]
    if {! [string equal $msg ""]} then {
	puts stderr $msg
	puts stderr "Aborted."
	return 1
    }

    #
    # Déconnexion de la base
    #

    d end
    return 0
}

exit [main $argv0 $argv]
