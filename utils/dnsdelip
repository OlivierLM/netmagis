#!%TCLSH%


#
# Script pour supprimer une adresse IP (voire une machine) dans la base
#
# Syntaxe :
#   dnsdelip <ip>
#
# Historique
#   2004/10/01 : pda/jean : conception
#   2007/10/25 : jean     : log des actions de modification
#   2010/12/18 : pda      : use new install system
#

source %LIBDNS%

##############################################################################
# Petites fonctions utilitaires
##############################################################################

proc syntax-error {argv0} {
    regsub {.*/} $argv0 {} argv0
    puts stderr "usage: $argv0 ip"
    exit 1
}

##############################################################################
# Suppression d'une adresse
##############################################################################

#
# Suppression d'une adresse dans la base
#
# Entrée :
#   - dbfd : accès à la base
#   - idcor : id du correspondant faisant la suppression
#   - adr : adresse IP à supprimer
# Sortie :
#   - valeur de retour : message d'erreur, ou chaîne vide si ok.
#
# Historique
#   2004/10/01 : pda/jean : conception
#

proc del-ip {dbfd login idcor adr} {
    #
    # Vérifier la syntaxe de l'adresse IP
    #

    set m [check-ip-syntax $dbfd $adr "inet"]
    if {[string length $m] > 0} then {
	return "Erreur sur l'adresse '$adr': $m"
    }

    #
    # Vérifier que l'adresse IP appartient bien à une des plages
    # autorisées pour le correspondant
    #

    if {! [check-authorized-ip $dbfd $idcor $adr]} then {
	return "Vous n'avez pas accès à l'adresse '$adr'"
    }

    #
    # Vérifier que l'adresse existe, en récupérant toutes les
    # informations de l'objet.
    #

    if {! [read-rr-by-ip $dbfd $adr trr]} then {
	return "L'adresse '$adr' n'existe pas dans la base."
    }

    #
    # Valider l'accès à ce nom
    #
    set nom     $trr(nom)
    set domaine $trr(domaine)
    set msg [check-authorized-host $dbfd $idcor $nom $domaine bidon "del-name"]
    if {! [string equal $msg ""]} then {
	return $msg
    }

    #
    # Est-ce la dernière adresse IP ou non ?
    #

    if {[llength $trr(ip)] == 1} then {
	set lastadr "oui"
    } else {
	set lastadr "non"
    }

    #
    # Verrouiller la base
    #

    if {! [::pgsql::lock $dbfd {} msg]} then {
	return "Transaction impossible : $msg"
    }

    #
    # Procéder à la destruction effective
    #

    if {[string equal $lastadr "non"]} then {
	#
	# Suppression d'une adresse seulement
	#

	set sql "DELETE FROM dns.rr_ip WHERE adr = '$adr'"
	if {! [::pgsql::execsql $dbfd $sql msg]} then {
	   ::pgsql::unkock $dbfd "abort" m
	    return "La suppression a échoué.\n$msg"
	}

	#
	# Se rappeler que le correspondant a fait la modification
	#

	set msg [touch-rr $dbfd $trr(idrr)]
	if {! [string equal $msg ""]} then {
	   ::pgsql::unkock $dbfd "abort" m
	    return "Mise à jour impossible.\n$msg"
	}

	set logevt "suppradr"
	set logmsg "suppression de l'adresse $adr de $nom.$domaine"

    } else {
	#
	# Suppression de l'objet entier
	#

	if {! [del-rr-and-dependancies $dbfd trr msg]} then {
	    ::pgsql::unlock $dbfd "abort" m
	    return "La suppression a échoué.\n$msg"
	}

	set logevt "suppradr"
	set logmsg "suppression de l'adresse $adr -> suppression totale de $nom.$domaine"
    }

    #
    # Enregistrer les modifications dans la base et la déverrouiller.
    #
    if {! [::pgsql::unlock $dbfd "commit" msg]} then {
       ::pgsql::unlock $dbfd "abort" m
       return "La suppression a échoué. Abandon.\n$msg"
    }

    #
    # Écrire le log
    #

    d writelog $logevt "$logmsg (ligne de commande)"

    return ""
}


##############################################################################
# Programme principal
##############################################################################

proc main {argv0 argv} {
    global conf

    #
    # Initialisation des accès
    #

    set msg [d init-script dbfd $argv0 tabcor]
    if {$msg ne ""} then {
	puts stderr "$msg"
	puts stderr "Aborted."
	return 1
    }

    #
    # Validation des arguments
    #

    if {[llength $argv] != 1} then {
	syntax-error $argv0
	return 1
    }

    set adr [lindex $argv 0]

    set msg [del-ip $dbfd $tabcor(login) $tabcor(idcor) $adr]
    if {! [string equal $msg ""]} then {
	puts stderr $msg
	puts stderr "Aborted."
	return 1
    }

    #
    # Déconnexion de la base
    #

    d end
    return 0
}

exit [main $argv0 $argv]
