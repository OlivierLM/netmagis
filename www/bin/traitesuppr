#!%TCLSH%


#
# Script pour enregistrer les suppressions demandées par un correspondant.
#
# Called by: script suppr (page lib/suppr.htgt)
#
# Parameters (form or url):
#   - suppression d'un nom
#	- action : "suppr-nom"
#	- confirm : "non" ou "oui" (si confirmation ok)
#	- nom : nom de l'objet à supprimer
#	- domaine : domaine dans lequel l'objet existait
#   - suppression d'une adresse IP
#	- action : "suppr-ip"
#	- confirm : "non" ou "oui" (si confirmation ok)
#	- adr: IP address
#
# History
#   2002/04/11 : pda/jean : design
#   2002/04/19 : pda/jean : ajout de la multi-adresses
#   2002/05/03 : pda/jean : séparation des trois types de modifications
#   2002/07/09 : pda      : add nologin
#   2003/05/13 : pda/jean : use auth base
#   2004/01/14 : pda/jean : add IPv6
#   2004/08/05 : pda/jean : add mac
#   2005/04/08 : pda/jean : ajout dhcpprofil
#   2007/10/25 : jean     : log modify actions
#   2008/07/24 : pda/jean : ajout droitsmtp
#   2008/07/29 : pda      : utilisation display-rr
#   2010/10/15 : pda      : ajout parcours
#


#
#


#
# Template pages used by this script
#

set conf(page-suppr-nom)	traitesuppr-nom.html
set conf(page-suppr-alias)	traitesuppr-alias.html
set conf(page-suppr-ip-uneip)	traitesuppr-ip-uneip.html
set conf(page-suppr-ip-objet)	traitesuppr-ip-objet.html
set conf(page-suppr-ok)		traitesuppr-ok.html
set conf(err)			erreur.html

#
# Next actions
# 

set conf(next)		"%HOMEURL%/bin/traitesuppr"
set conf(nextmap)	"%HOMEURL%/bin/liste"
set conf(nextlist)	"%HOMEURL%/bin/liste"
set conf(nextsuppr)	"%HOMEURL%/bin/suppr"

#
# Script parameters
#

# field used to determine next step
set conf(form)		{
	{action		1 1}
}

# action specific fields
set conf(form-suppr-nom)	{
	{confirm	1 1}
	{nom		1 1}
	{domaine	1 1}
}

set conf(form-suppr-ip)	{
	{confirm	1 1}
	{adr		1 1}
}

#
#

lappend auto_path %PKGTCL%
package require webdns

#
#

# ::webapp::cgidebug ; exit


##############################################################################
# Suppression d'un nom
##############################################################################

# History
#   2002/04/19 : pda/jean : conception
#
proc traitesuppr-nom {dbfd idcor login ft} {
    global conf
    upvar $ft ftab

    #
    # Validate form input
    #

    set confirm       [string trim [lindex $ftab(confirm) 0]]
    set nom           [string trim [lindex $ftab(nom) 0]]
    set domaine       [string trim [lindex $ftab(domaine) 0]]

    #
    # Valider le nom fourni
    #

    set msg [check-authorized-host $dbfd $idcor $nom $domaine trr "del-name"]
    if {[string length $msg] > 0} then {
	d error $msg
    }

    #
    # Vérifier que le nom demandé existe
    #

    if {[string equal $trr(idrr) ""]} then {
	d error "Le nom '$nom.$domaine' n'existe pas."
    }

    #
    # Noter si c'est un alias
    #

    if {[string equal $trr(cname) ""]} then {
	set alias 0

	#
	# Si ce n'est pas un alias, il doit y avoir au moins une adresse IP
	#
	if {[string equal $trr(ip) ""]} then {
	    d error "Le nom '$nom.$domaine' n'est pas une machine."
	}

    } else {
	set alias 1

	#
	# C'est un alias. Lisons les informations pour afficher
	# une page éventuelle de confirmation
	#
	if {! [read-rr-by-id $dbfd $trr(cname) trrref]} then {
	    d error "Erreur interne. Alias non trouvé"
	}
    }

    #
    # Demander confirmation à l'utilisateur si ce n'est pas encore
    # fait
    #

    if {! [string equal $confirm "oui"]} then {
	#
	# Envoyer la page de confirmation
	#

	d urlset "%URLFORM%" $conf(next) {}
	d urladdnext "%URLFORM%"

	if {$alias} then {
	    #
	    # Sortir la page de confirmation pour un alias
	    #
	    d result $conf(page-suppr-alias) [list \
					[list %NOM% $nom] \
					[list %DOMAINE% $domaine] \
					[list %NOMREF% $trrref(nom)] \
					[list %DOMAINEREF% $trrref(domaine)] \
				    ]
	} else {
	    #
	    # Sortir la page de confirmation pour une machine
	    #
	    set machine [display-rr $dbfd -1 trr]
	    d result $conf(page-suppr-nom) [list \
					[list %NOM% $nom] \
					[list %DOMAINE% $domaine] \
					[list %MACHINE% $machine] \
				    ]
	}
    } else {
	#
	# La confirmation est acquise. Effectuer la suppression dans
	# la base.
	#
	if {! [::pgsql::lock $dbfd {} msg]} then {
	    d error "Transaction impossible : $msg"
	}

	if {$alias} then {
	    if {! [del-alias-by-id $dbfd $trr(idrr) msg]} then {
		::pgsql::unlock $dbfd "abort" m
		 d error "La suppression a échoué.\n$msg"
	    }

	    set p "$trrref(nom).$trrref(domaine)"
	    set logevt "suppralias"
	    set logmsg "suppression de l'alias $nom.$domaine -> $p"
	} else {
	    #
	    # Ce n'est pas un alias. Supprimer toutes les dépendances
	    # du RR
	    # - les aliases pointant vers cet objet
	    # - les MX
	    # - les adresses IP
	    #
	    if {! [del-rr-and-dependancies $dbfd trr msg]} then {
		::pgsql::unlock $dbfd "abort" m
		d error "La suppression a échoué.\n$msg"
	    }
	    set logevt "supprnom"
	    set logmsg "suppression totale de $nom.$domaine"
	}

	#
	# Enregistrer les modifications dans la base
	#
	if {! [::pgsql::unlock $dbfd "commit" msg]} then {
	   ::pgsql::unlock $dbfd "abort" m
	   d error "La suppression a échoué. Abandon.\n$msg"
	}

	d writelog $logevt $logmsg

	#
	# Préparer la suite du parcours
	#

	switch -- [d nextprog] {
	    map {
		d urlset "%URLSUITE%" $conf(nextmap) [list {format carte} [d nextargs]]
	    }
	    list {
		d urlset "%URLSUITE%" $conf(nextlist) [list {format consulter} [d nextargs]]
	    }
	    default {
		d urlset "%URLSUITE%" $conf(nextsuppr) {}
	    }
	}

	#
	# End of script: output page and close database pour dire que la suppression a été effectuée
	# correctement.
	#
	set objet "$nom.$domaine"
	d result $conf(page-suppr-ok) [list \
						[list %OBJET% $objet] \
			    ]
    }
}

##############################################################################
# Suppression d'une adresse IP
##############################################################################

# History
#   2002/04/23 : pda/jean : conception
#   2002/04/26 : pda/jean : fin de la conception
#   2002/05/03 : pda/jean : mémoriser la mise à jour par le correspondant
#
proc traitesuppr-ip {dbfd idcor login ft} {
    global conf
    upvar $ft ftab

    #
    # Validate form input
    #

    set confirm       [string trim [lindex $ftab(confirm) 0]]
    set adr           [string trim [lindex $ftab(adr) 0]]

    #
    # Vérifier la syntaxe de l'adresse IP
    #

    set m [check-ip-syntax $dbfd $adr "inet"]
    if {[string length $m] > 0} then {
	d error "Erreur sur l'adresse '$adr': $m"
    }

    #
    # Vérifier que l'adresse IP appartient bien à une des plages
    # autorisées pour le correspondant
    #

    if {! [check-authorized-ip $dbfd $idcor $adr]} then {
	d error "Vous n'avez pas accès à l'adresse '$adr'"
    }

    #
    # Vérifier que l'adresse existe, en récupérant toutes les
    # informations de l'objet.
    #

    if {! [read-rr-by-ip $dbfd $adr trr]} then {
	d error "L'adresse '$adr' n'existe pas dans la base."
    }

    #
    # Valider l'accès à ce nom
    #

    set nom     $trr(nom)
    set domaine $trr(domaine)
    set msg [check-authorized-host $dbfd $idcor $nom $domaine bidon "del-name"]
    if {! [string equal $msg ""]} then {
	d error $msg
    }

    #
    # Est-ce la dernière adresse IP ou non ?
    #

    if {[llength $trr(ip)] == 1} then {
	set lastadr "oui"
    } else {
	set lastadr "non"
    }

    #
    # Préparer l'affichage des informations à afficher le cas échéant
    #

    set objet ""
    set machine [display-rr $dbfd -1 trr]

    #
    # Effectuer l'action de suppression seulement si confirmation
    #

    if {[string equal $confirm "oui"]} then {
	#
	# Verrouiller la base
	#

	if {! [::pgsql::lock $dbfd {} msg]} then {
	    d error "Transaction impossible : $msg"
	}

	#
	# Procéder à la destruction effective
	#

	if {[string equal $lastadr "non"]} then {
	    #
	    # Suppression d'une adresse seulement
	    #

	    set sql "DELETE FROM dns.rr_ip WHERE adr = '$adr'"
	    if {! [::pgsql::execsql $dbfd $sql msg]} then {
	       ::pgsql::unlock $dbfd "abort" m
		d error "La suppression a échoué.\n$msg"
	    }

	    #
	    # Se rappeler que le correspondant a fait la modification
	    #

	    set msg [touch-rr $dbfd $trr(idrr)]
	    if {! [string equal $msg ""]} then {
	       ::pgsql::unlock $dbfd "abort" m
		d error "Mise à jour impossible.\n$msg"
	    }

	    set logevt "suppradr"
	    set logmsg "suppression de l'adresse $adr de $nom.$domaine"

	} else {
	    #
	    # Suppression de l'objet entier
	    #

	    if {! [del-rr-and-dependancies $dbfd trr msg]} then {
		::pgsql::unlock $dbfd "abort" m
		d error "La suppression a échoué.\n$msg"
	    }

	    set logevt "suppradr"
	    set logmsg "suppression de l'adresse $adr -> suppression totale de $nom.$domaine"
	}

	#
	# Enregistrer les modifications dans la base et la déverrouiller.
	#
	if {! [::pgsql::unlock $dbfd "commit" msg]} then {
	   ::pgsql::unlock $dbfd "abort" m
	   d error "La suppression a échoué. Abandon.\n$msg"
	}
    
	d writelog $logevt $logmsg
    }

    #
    # Préparer la suite du parcours
    #

    switch -- [d nextprog] {
	map {
	    d urlset "%URLSUITE%" $conf(nextmap) [list {format carte} [d nextargs]]
	}
	list {
	    d urlset "%URLSUITE%" $conf(nextlist) [list {format consulter} [d nextargs]]
	}
	default {
	    d urlset "%URLSUITE%" $conf(nextsuppr) {}
	}
    }

    #
    # Préparer l'affichage de la page
    #

    switch -- "confirm=$confirm-lastadr=$lastadr" {
	confirm=non-lastadr=non {
	    #
	    # Demander confirmation pour la suppression d'une des adresses
	    # 
	    set page $conf(page-suppr-ip-uneip)
	}
	confirm=non-lastadr=oui {
	    #
	    # Demander confirmation pour la suppression de la dernière
	    # adresse et donc de l'objet entier.
	    # 
	    set page $conf(page-suppr-ip-objet)
	}
	confirm=oui-lastadr=non {
	    #
	    # L'adresse a été supprimée
	    #

	    set page $conf(page-suppr-ok)
	    set objet $adr
	}
	confirm=oui-lastadr=oui {
	    #
	    # L'objet entier a été supprimé
	    #

	    set page $conf(page-suppr-ok)
	    set objet "$nom.$domaine"
	}
	default {
	    d error "Cas impossible : confirm=$confirm, lastadr=$lastadr"
	}
    }

    d urlset "%URLFORM%" $conf(next) {}

    d result $page [list \
			[list %NOM%         $nom] \
			[list %DOMAINE%     $domaine] \
			[list %ADR%         $adr] \
			[list %MACHINE%     $machine] \
			[list %OBJET%       $objet] \
		    ]
}

##############################################################################
# Main procedure
##############################################################################

proc main {} {
    global conf

    #
    # Initialization
    #

    ::dnscontext create d
    d init-cgi "dns" $conf(err) "" $conf(form) ftab dbfd login tabuid

    #
    # Valider l'action, lire les autres champs du formulaire,
    # et faire le branchement
    #

    set action [lindex $ftab(action) 0]

    if {! [info exists conf(form-$action)]} then {
	d error "Champ 'action' non conforme : $action"
    }

    if {[llength [::webapp::get-data ftab $conf(form-$action)]] == 0} then {
	d error [mc "Invalid input"]
    }

    traite$action $dbfd $tabuid(idcor) $tabuid(login) ftab
}

::webapp::cgi-exec main %DEBUG%
