#!%TCLSH%

#
# Script pour lister les détails d'un réseau de niveau 3
#
# Appelé par : /applis/topo/<tous>
#
# Paramètres (formulaire ou URL) :
#	- addr : nom de l'équipement
#	- format : rien, ou "pdf" ou "png"
#
# Historique
#   2006/06/05 : pda      : création
#   2006/06/20 : pda      : prologue dépendant du format
#   2006/06/22 : pda      : sortie dépendante du format
#   2006/08/09 : pda      : ps2pdf avec chemin complet
#   2006/08/14 : pda      : fusion script l3
#   2007/01/04 : pda      : ajout du paramètre uti
#   2007/01/11 : pda      : mutualisation initialisation
#   2007/01/11 : pda      : substitution possible d'un uid
#

set conf(homeurl)	%HOMEURL%

#
# Chemins utilisés par les scripts
#

set conf(pkg)		%PKGTCL%
set conf(lib)		%DESTDIR%/lib
set conf(libdns)	%LIBDNS%
set conf(libtopo)	$conf(lib)/libtopo.tcl

#
# Définition des noms des pages "à trous"
#

set conf(err)		$conf(lib)/erreur.html
set conf(page1)		$conf(lib)/l3.html
set conf(pagen)		$conf(lib)/liste.html

#
# Quelques paramètres du script
#

set conf(auth)		%AUTH%
set conf(base)		%BASE%
set conf(nologin)	%NOLOGIN%

set conf(form)	{
    {addr		0 1}
    {format		0 1}
}

set conf(dumpgraph)	"%TOPODIR%/bin/dumpgraph %s < %GRAPH%"
set conf(extractl3)	"%TOPODIR%/bin/extractl3 %s %s %s < %GRAPH%"
set conf(urleq)		"$conf(homeurl)/bin/eq?eq=%s%s"
set conf(urleqiface)	"$conf(homeurl)/bin/eq?eq=%s&iface=%s%s"
set conf(urll2)		"$conf(homeurl)/bin/l2?vlan=%d%s"
set conf(urll3)		"$conf(homeurl)/bin/l3?addr=%s%s"
set conf(dot)		"%DOT%"
set conf(neato)		"%NEATO%"
set conf(ps2pdf)	"%PS2PDF%"

set conf(bb4)		"130.79.20.0/28 130.79.20.16/29"
set conf(bb6)		"2001:660:2402::/61"


#
# Les outils du parfait concepteur de pages Web dynamiques...
#

# tcllib
package require ip

lappend auto_path $conf(pkg)
package require webapp
package require pgsql

#
# On y va !
#

# ::webapp::cgidebug ; exit

source $conf(libdns)
source $conf(libtopo)

##############################################################################
# Fonctions utilitaires
##############################################################################

proc prologue {format} {
    set g "graph l3graph \{\n"
    switch $format {
	pdf {
	    append g {
		fontsize = 14 ;
		margin = .3 ;
		center = true ;
		page="8.26,11.69" ;

		size="11,7.6" ;
		orientation = landscape ;

		/* len = 0.5 ; */
		/* ranksep = 0.5 */
		fontname = Helvetica ;

		node [fontname = Helvetica, fontsize = 10,
			    color = grey
			] ;
		edge [fontname = Helvetica, fontsize = 8,
			    /* len = 1.4, */
			    len = 2.2,
			    labelfontname = Helvetica, labelfontsize = 6,
			    color = grey
			] ;

		overlap = false ;
		spline = true ;
	    }
	}
	png -
	default {
	    append g {
		fontsize = 14 ;
		margin = .3 ;
		center = true ;

		orientation = portrait ;

		/* len = 0.5 ; */
		/* ranksep = 0.5 */
		fontname = Helvetica ;

		node [fontname = Helvetica, fontsize = 10,
			    color = grey
			] ;
		edge [fontname = Helvetica, fontsize = 8,
			    len = 3.0,
			    labelfontname = Helvetica, labelfontsize = 6,
			    color = grey
			] ;

		overlap = false ;
		spline = true ;
	    }
	}
    }
    return $g
}

proc title {label} {
    return "label = \"$label\" ;\n"
}

proc epilogue {format} {
    return "\}\n"
}

proc generer-dot {format prog urleq urll2 u1} {

    set dot [prologue $format]

    set fd [open "|$prog" "r"]
    while {[gets $fd line] > 0} {
	switch -- [lindex $line 0] {
	    selection {
		append dot [title [lreplace $line 0 0]]
	    }
	    eq {
		set nodename [lindex $line 1]
		set nodetype [lindex $line 2]
		switch $nodetype {
		    router {
			if {! [regexp -- {([^:]+):(.*)} $nodename bidon eqname rinst]} then {
			    puts stderr "Invalid router instance ($nodename)"
			    return ""
			}
			switch -- $rinst {
			    _v4 { set label "$eqname\\ndefault" }
			    _v6 { set label "$eqname\\ndefault (IPv6)" }
			    default { set label "$eqname\\r$rinst" }
			}
			set attrlist {shape=circle
					    style=filled fillcolor=lightgrey
					    fixedsize height=1.5}
			lappend attrlist label=\"$label\"
		    }
		    host {
			set eqname $nodename
			set attrlist {shape=box
					    style=filled fillcolor=lightblue
					    height=.25}
		    }
		    default {
			puts stderr "Invalid node type ($nodetype) for $nodename"
			return ""
		    }
		}

		set url [format $urleq $eqname $u1]
		lappend attrlist "href=\"$url\""

		set attr [join $attrlist ", "]

		append dot "\"$nodename\" \[$attr\] ;\n"
	    }
	    direct {
		set eq1 [lindex $line 1]
		set if1 [lindex $line 2]
		set ip1 [lindex $line 3]
		set linkname [lindex $line 4]
		set eq2 [lindex $line 5]
		set if2 [lindex $line 6]
		set ip2 [lindex $line 7]

		set attrlist [list label=\"$linkname\" \
					headlabel=\"$if2\\n$ip2\" \
					taillabel=\"$if1\\n$ip1\" \
				    ]
		set attr [join $attrlist ", "]
		append dot "\"$eq1\" -- \"$eq2\" \[$attr\] ;\n"
	    }
	    cloud {
		set nodename [lindex $line 1]
		set bcastref [lindex $line 2]
		set vlans    [lindex $line 3]
		set networks [lindex $line 4]

		set attrlist {shape=ellipse
				style=filled fillcolor=palegreen
				width=1.5}

		set l {}
		set vlanid -1
		foreach vl $vlans {
		    set v [lindex $vl 0]
		    lappend l $v
		    if {$v != 0 && $vlanid == -1} then {
			set vlanid $v
		    }
		}
		set l [join $l ", "]
		if {[llength $vlans] > 1} then {
		    set s "s"
		} else {
		    set s ""
		}
		set label "Vlan$s $l\\n"
		append label [join $networks "\\n"]
		lappend attrlist "label=\"$label\""

		if {$vlanid != -1} then {
		    set url [format $urll2 $vlanid $u1]
		    lappend attrlist "href=\"$url\""
		}

		set attr [join $attrlist ", "]

		append dot "\"$nodename\" \[$attr\] ;\n"
	    }
	    link {
		set eqname   [lindex $line 1]
		set ifname   [lindex $line 2]
		set ipaddr   [lindex $line 3]
		set linkname [lindex $line 4]
		set cloud    [lindex $line 5]

		set attrlist [list headlabel=\"$linkname\" \
					taillabel=\"$ifname\\n$ipaddr\" \
				    ]
		set attr [join $attrlist ", "]
		append dot "\"$eqname\" -- \"$cloud\" \[$attr\] ;\n"
	    }
	}
    }
    close $fd

    append dot [epilogue $format]

    return $dot
}


##############################################################################
# Programme principal
##############################################################################

proc main {} {
    global conf

    #
    # Initialisation
    #

    init-topo $conf(nologin) $conf(base) $conf(err) "corresp" \
			$conf(form) ftab dbfd uid tabuid ouid tabouid urluid

    foreach f $conf(form) {
	set var [lindex $f 0]
	set $var [string trim [lindex [set $var] 0]]
    }

    set tmp /tmp/l3-[pid]

    set u1 ""
    set u2 ""
    if {! [string equal $urluid ""]} then {
	set u1 "&$urluid"
	set u2 "?$urluid"
    }

    #
    # Récupérer les réseaux IP déclarés dans le graphe
    #

    set cmd [format $conf(dumpgraph) $tabuid(flags)]
    set fd [open "|$cmd" "r"]

    while {[gets $fd ligne] > -1} {
	if {[regexp {^rnet ([^ ]+)} $ligne bidon a]} then {
	    set tabip($a) ""
	}
    }
    if {[catch {close $fd} msg]} then {
	::webapp::error-exit $conf(err) \
		"Erreur lors de la lecture des réseaux (msg)"
    }

    if {[string equal $addr ""]} then {
	#
	# Trier les adresses IP pour les présenter dans le bon ordre
	#

	set liste "<UL>\n"
	foreach addr [lsort -command comparer-ip [array names tabip]] {
	    set url [format $conf(urll3) $addr $u1]
	    append liste [format "<LI><A HREF=\"%s\">$addr</A>\n" $url]
	}
	append liste "</UL>"

	#
	# Sortie de la page
	#

	::webapp::send html [::webapp::file-subst $conf(pagen) \
					    [list \
						    [list %OBJETS% "réseaux IP"] \
						    [list %LISTE%  $liste] \
						    [list %EQ%     ""] \
						    [list %VLAN%   ""] \
						    [list %ADDR%   ""] \
						    [list %URLUID% $u2] \
						] \
					]
    } else {
	#
	# Valider l'adresse IP
	#

	#XX# set msg [syntaxe-ip $dbfd $addr "inet"]
	set msg [syntaxe-ip $dbfd $addr "loosecidr"]
puts stderr "msg=<$msg>"
	if {! [string equal $msg ""]} then {
	    ::webapp::error-exit $conf(err) $msg
	}

	#
	# Rechercher l'adresse IP fournie et obtenir le réseau
	#

	set lnet {}
	foreach net [array names tabip] {
	    if {[ip-in $addr $net]} then {
		lappend lnet $net
	    }
	}
	if {[llength $lnet] == 0} then {
	    set lnet $addr
	}

	#
	# Récupérer les informations lues dans le graphe
	#

	if {! [string equal $urluid ""]} then {
	    set bb ""
	} else {
	    if {[::ip::version $addr] == 6} then {
		set bb $conf(bb6)
	    } else {
		set bb $conf(bb4)
	    }
	}
	set xl3 [format $conf(extractl3) $tabuid(flags) [join $lnet " "] $bb]
puts stderr "xl3=<$xl3>"
	set dot [generer-dot $format $xl3 $conf(urleq) $conf(urll2) $u1]
	set fd [open "$tmp.dot" "w"]
	puts $fd $dot
	close $fd

	#
	# Sélectionner le format et sortir la page
	#

	set url "addr=$addr$u1"
	set prog "$conf(neato) -Gmaxiter=10000"

	switch -- $format {
	    pdf {
		set fd [open "|$prog -Tps $tmp.dot | $conf(ps2pdf) - -" "r"]
		fconfigure $fd -translation binary
		set pdf [read $fd]
		close $fd
		::webapp::send rawpdf $pdf
	    }
	    png {
		set fd [open "| $prog -Tpng $tmp.dot 2>/dev/null" "r"]
		fconfigure $fd -translation binary
		set img [read $fd]
		close $fd
		::webapp::send png $img
		exit 0
	    }
	    default {
		set map [exec sh -c "$prog -Tcmapx < $tmp.dot"]
		::webapp::send html [::webapp::file-subst $conf(page1) \
					    [list \
						    [list %EQ%     ""] \
						    [list %VLAN%   ""] \
						    [list %RESEAU% $lnet] \
						    [list %ADDR%   $addr] \
						    [list %URL%    $url] \
						    [list %MAP%    $map] \
						    [list %URLUID% $u2] \
						] \
					]
	    }
	}

	file delete -force -- $tmp.dot
    }

    #
    # Déconnexion de la base
    #

    fermer-base $dbfd
}

::webapp::cgi-exec main %DEBUG%
