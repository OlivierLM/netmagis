#!%TCLSH%

#
# Script pour récupérer et envoyer juste le graphe de la page de trafic
#
# Called by: /applis/topo/bin/metro
#
# Parameters (form or url):
#   - id : id du point de collecte sélectionné
#	ou plusieurs id, séparés par soit des "+", soit des "|"
#   - taille : taille du graphe : "petit", "moyen", "grand"
#   - un intervalle de temps :
#	- soit periode
#	- soit debut et fin
# Avec :
#   - periode : "daily", "weekly", "monthly", "yearly"
# ou
#   - debut : heure de début (time_t)
#   - fin : heure de fin (time_t)
#
#
# History
#   2006/08/09 : pda/boggia      : design
#   2006/08/10 : pda/boggia      : ajout du paramètre uti
#   2006/12/12 : jean/boggia     : ajout du paramètre periode et taille
#   2007/01/12 : pda             : mutualisation initialisation
#   2008/07/30 : pda             : généralisation aux graphes wifi
#   2008/07/31 : pda             : plusieurs courbes sur le même graphe avec "|"
#


#
#


#
# Template pages used by this script
#

set conf(err)		erreur.html

#
# Next actions
# 

# none (no-return page)

#
# Script parameters
#


set conf(form)	{
    {id			1 1}
    {debut		0 1}
    {fin		0 1}
    {periode		0 1}
    {taille		0 1}
}

set conf(idrfmt)	"http://%IDRHOST%/bin/gengraph?%s&debut=%d&fin=%d"

#
#

lappend auto_path %PKGTCL%
package require webdns

#
#

# ::webapp::cgidebug ; exit


##############################################################################
# Main procedure
##############################################################################

proc main {} {
    global conf

    #
    # Initialization
    #

    ::dnscontext create d
    d init-cgi "topo" $conf(err) "" $conf(form) ftab dbfd login tabuid

    ::webapp::import-vars ftab
    foreach f $conf(form) {
	set var [lindex $f 0]
	set $var [string trim [lindex [set $var] 0]]
    }

    #
    # valider l'id du graphe en fonction des droits
    #

    set msg [check-metro-id $dbfd $id tabuid titre]
    if {! $tabuid(admin) && ! [string equal $msg ""]} then {
	d error $msg
    }

    #
    # Valider l'intervalle de temps
    # Si 'periode' est present, on ignore les paramètre 'debut' et 'fin'.
    #

    if {! [string equal $periode ""]} then {
	set fin [clock second]
	switch -exact $periode {
	    daily {
		set debut [clock scan "yesterday"]
	    }
	    weekly {
		set debut [clock scan "last week"]
	    }
	    monthly {
		set debut [clock scan "last month"]
	    }
	    yearly {
		set debut [clock scan "last year"]
	    }
	    default {
		d error "Période '$periode' invalide"
	    }
	}
    } elseif {[string equal $debut ""] && [string equal $fin ""]} then {
	set fin   [clock second]
	set debut [clock scan "yesterday"]
    } else {
	if {[catch {clock format $debut}]} then {
	    d error "Date de début invalide '$debut'"
	}
	if {[catch {clock format $fin}]} then {
	    d error "Date de fin invalide '$fin'"
	}
	if {$debut >= $fin} then {
	    d error "Date de début postérieure à la date de fin"
	}
    }

    #
    # Valider le paramètre taille du graphe
    #

    switch -exact $taille {
	petit -
	moyen -
	grand {
	    set urltaille "&taille=$taille"
	}
	"" {
	    set urltaille ""
	}
	default {
	    d error "Taille du graphe invalide '$taille'"
	}
    }

    #
    # Gestion des id. Deux cas sont possibles :
    # - plusieurs séparés par des "|"
    #	dans ce cas, on fait id= ... & id=... & ...
    # - plusieurs séparés par "+" ou un seul : 
    #	dans ce cas, on fait id=...
    #

    set lid [split $id "|"]
    if {[llength $lid] <= 1} then {
	set hid "id=[::webapp::post-string $id]"
    } else {
	set n 1
	set hid {}
	foreach i $lid {
	    lappend hid "id$n=[::webapp::post-string $i]"
	    incr n
	}
	set hid [join $hid "&"]
    }

    #
    # End of script: output page and close database
    #

    set url [format $conf(idrfmt) $hid $debut $fin]
    append url $urltaille
    gengraph $url

    #
    # Déconnexion de la base
    #

    d end
}

::webapp::cgi-exec main %DEBUG%
