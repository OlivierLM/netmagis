#!%TCLSH%

#
# Display page to edit one or more equipment interfaces
#
# Called by: eq
#
# Parameters (form or url):
# - eq: equipment name
# - iface : interface name, or empty for all interfaces of an equipement
#
# History
#   2010/11/03 : pda      : design
#   2010/11/30 : pda/jean : add sensor
#   2010/12/11 : pda      : i18n
#

#
# Template pages used by this script
#

set conf(err)		erreur.html
set conf(page)		ifchg.html

#
# Next actions
# 

set conf(next)		"%HOMEURL%/bin/traiteifchg"
set conf(nextifchg)	"%HOMEURL%/bin/ifchg"

#
# Script parameters
#

set conf(form)	{
    {eq			1 1}
    {iface		0 1}
}

#
# WebDNS general library
#

source %LIBDNS%

# ::webapp::cgidebug ; exit

##############################################################################
# Main procedure
##############################################################################

proc main {} {
    global conf

    #
    # Initialization
    #

    ::dnscontext create d
    d init-cgi "topo" $conf(err) "" $conf(form) ftab dbfd login tabuid

    ::webapp::import-vars ftab
    foreach f $conf(form) {
	set var [lindex $f 0]
	set $var [string trim [lindex [set $var] 0]]
    }

    #
    # Read equipment information from graph.
    #

    set l [eq-iflist $eq tabuid]

    lassign $l eq type model location liferr iflist arrayif arrayvlan
    array set tabiface $arrayif
    array set tabvlan  $arrayvlan

    #
    # If an error is found, exit immediately. This case means that
    # one (or more) interface(s) which is writable, but not readable.
    #

    if {[llength $liferr] > 0} then {
	set l [join $liferr " "]
	d error [mc "Inconsistent permissions on interfaces: %s" $l]
    }

    #
    # Prepare Vlan list for menus
    # Note : a Vlan is either a standard Vlan or a VoIP vlan
    #

    set lvlan [list [list -1 [mc "Shutdown interface"]]]
    set lvoip [list [list -1 [mc "Shutdown VoIP on this interface"]]]
    foreach id [lsort -integer [array names tabvlan]] {
	lassign $tabvlan($id) desc voip
	if {$desc eq "-"} then {
	    set desc ""
	} else {
	    set desc [binary format H* $desc]
	}
	if {$voip} then {
	    lappend lvoip [list $id "$id ($desc)"]
	} else {
	    lappend lvlan [list $id "$id ($desc)"]
	}
    }

    set nvoip [llength $lvoip]

    #
    # Do we have to display all interfaces, or just one?
    #

    if {$iface ne ""} then {
	#
	# There is a name. Just display this one.
	#

	if {! [info exists tabiface($iface)]} then {
	    d error [mc {Interface '%1$s' not found on %2$s} $iface $eq]
	}

	#
	# Get status information relative to this equipment and this
	# interface.
	#

	set eqsta [eq-graph-status $dbfd $eq $iface]

	#
	# Get interface characteristics
	#

	lassign $tabiface($iface) nom edit radio ifstat ifmode desc lien natif
	set trunk [lreplace $tabiface($iface) 0 7]

	if {$edit ne "edit"} then {
	    d error [mc {You can't modify interface %1$s on %2$s} $iface $eq]
	}

	#
	# Prepare informations
	#

	set mode "mono"
	set title [mc {Edit interface %1$s on %2$s} $iface $eq]
	set menuif [::webapp::form-hidden iface $iface]

	# display option "multiple interfaces" if there is more than one
	# writable interface
	set nifmod 0
	foreach i $iflist {
	    if {[lindex $tabiface($i) 1] eq "edit"} then {
		incr nifmod
	    }
	}
	if {$nifmod > 1} then {
	    d urlset "" $conf(nextifchg) [list [list "eq" $eq]]
	    set url [d urlget ""]
	    set multi [::webapp::helem "p" \
			    [format {You can also <a href="%s">edit more than one interfaces</a> simultaneously} $url] \
			]
	} else {
	    set multi ""
	}

	# interface description menu
	if {$desc eq "-"} then {
	    set desc ""
	} else {
	    set desc [::webapp::html-string [binary format H* $desc]]
	}
	set libifordesc [mc "Description"]
	set menuifordesc [::webapp::form-text desc 1 40 40 $desc]
	append menuifordesc " ("
	append menuifordesc [mc "authorized special characters: -+/()&.:#_"]
	append menuifordesc ")"

	append libifordesc [::webapp::form-hidden "iface" $iface]

	# vlan menu
	if {$ifmode eq "Disabled"} then {
	    set pos -1
	} else {
	    set pos [lsearch -index 0 $lvlan $natif]
	}
	if {$pos == -1} then {
	    set lsel {}
	} else {
	    set lsel [list $pos]
	}
	set menuvlan [::webapp::form-menu "vlan" 1 0 $lvlan $lsel]

	# voip vlan menu if needed
	if {$nvoip > 1} then {
	    set pos -1
	    if {$ifmode eq "Trunk"} then {
		# search voip vlan amon tagged vlans
		foreach v $trunk {
		    lassign $v id desc stat
		    # search for the vlan in the menu list
		    set pos [lsearch -index 0 $lvoip $id]
		    if {$pos != -1} then {
			break
		    }
		}
	    }
	    if {$pos == -1} then {
		set lsel {}
	    } else {
		set lsel [list $pos]
	    }
	    set libvoip [mc "VoIP"]
	    set menuvoip [::webapp::form-menu "voip" 1 0 $lvoip $lsel]
	} else {
	    set libvoip ""
	    set menuvoip [::webapp::form-hidden "voip" -1]
	}

	# sensor menu
	if {$tabuid(admin)} then {
	    if {$ifstat eq "-"} then {
		set ifstat ""
	    }
	    set libstat [mc "Sensors"]
	    set menustat [::webapp::form-text "stat" 1 40 40 $ifstat]
	} else {
	    set libstat ""
	    set menustat ""
	}

    } else {
	#
	# Display all interfaces
	#

	set title [mc "Edit interfaces on %s" $eq]
	set mode "multi"

	#
	# Get status information relative to this equipment and all
	# its interfaces.
	#
	set eqsta [eq-graph-status $dbfd $eq]

	# interface list
	set lif {}
	foreach i $iflist {
	    set edit [lindex $tabiface($i) 1]
	    if {$edit eq "edit"} then {
		lappend lif [list $i $i]
	    }
	}
	set nif [llength $lif]
	set libifordesc [mc "Interfaces"]
	set menuifordesc [::webapp::form-menu "iface" $nif 1 $lif {}]
	set multi ""

	# vlan menu
	set menuvlan [::webapp::form-menu "vlan" 1 0 $lvlan {}]

	# voip vlan menu if needed
	if {$nvoip > 1} then {
	    set libvoip [mc "VoIP"]
	    set menuvoip [::webapp::form-menu "voip" 1 0 $lvoip {}]
	} else {
	    set libvoip ""
	    set menuvoip [::webapp::form-hidden "voip" -1]
	}

	# sensor menu is empty
	set libstat ""
	set menustat ""
    }

    #
    # Next script
    #

    d urlset "%URLFORM%" $conf(next) {}

    #
    # End of script: output page and close database
    #

    d result $conf(page) [list \
			    [list %EQSTA%        $eqsta] \
			    [list %EQ%           $eq] \
			    [list %TITRE%        $title] \
			    [list %MODE%         $mode] \
			    [list %MULTI%        $multi] \
			    [list %LIBIFORDESC%  $libifordesc] \
			    [list %MENUIFORDESC% $menuifordesc] \
			    [list %MENUVLAN%     $menuvlan] \
			    [list %LIBVOIP%      $libvoip] \
			    [list %MENUVOIP%     $menuvoip] \
			    [list %LIBSTAT%      $libstat] \
			    [list %MENUSTAT%     $menustat] \
			]
}

::webapp::cgi-exec main %DEBUG%
