#!%TCLSH%

#
# Script pour présenter la page de modification d'une ou plusieurs
# interfaces de l'équipement.
#
# Appelé par : /applis/topo/eq
#
# Paramètres (formulaire ou URL) :
#	- eq : nom de l'équipement
#	- iface : nom de l'interface, ou vide pour toutes interfaces
#
# Historique
#   2010/11/03 : pda        : création
#

set conf(homeurl)	%HOMEURL%

#
# Chemins utilisés par les scripts
#

set conf(lib)		%DESTDIR%/lib
set conf(libdns)	$conf(lib)/libdns.tcl

#
# Définition des noms des pages "à trous"
#

set conf(err)		$conf(lib)/erreur.html
set conf(page)		$conf(lib)/ifchg.html

#
# Scripts suivants (actions de formulaire)
# 

set conf(next)		"%HOMEURL%/bin/traiteifchg"
set conf(nextifchg)	"%HOMEURL%/bin/ifchg"

#
# Quelques paramètres du script
#


set conf(form)	{
    {eq			1 1}
    {iface		1 1}
}

#
# Les outils du parfait concepteur de pages Web dynamiques...
#

lappend auto_path %PKGTCL%
package require webapp
package require pgsql

#
# On y va !
#

# ::webapp::cgidebug ; exit

source $conf(libdns)


##############################################################################
# Programme principal
##############################################################################

proc main {} {
    global conf

    #
    # Initialisation
    #

    ::dnscontext create d
    d init-cgi "topo" $conf(err) "" $conf(form) ftab dbfd login tabcor

    ::webapp::import-vars ftab
    foreach f $conf(form) {
	set var [lindex $f 0]
	set $var [string trim [lindex [set $var] 0]]
    }

    #
    # Lire les informations de l'équipement dans le graphe
    # Ces informations sont filtrées par tabcor qui n'affiche
    # que les vlans autorisés.
    #

    set l [eq-iflist $eq tabcor]

    lassign $l eq type model location iflist array
    array set tabiface $array

    #
    # Chercher les vlans accessibles sur l'équipement
    #

    # XXX

    #
    # Est-ce qu'il faut présenter toutes les interfaces ou juste une ?
    #

    if {$iface ne ""} then {
	#
	# Il y a un nom d'interface. Présenter juste cette interface
	#

	if {! [info exists tabiface($iface)]} then {
	    d error "L'interface $iface n'est pas trouvée sur $eq"
	}

	#
	# Récupérer les caractéristiques de l'interface
	#

	lassign $tabiface($iface) nom edit radio stat mode desc lien natif
	set ligne [lreplace $tabiface($iface) 0 7]

	if {$edit ne "edit"} then {
	    d error "Vous ne pouvez modifier l'interface $iface sur $eq"
	}

	#
	# Préparer les informations
	#

	set titre "Modification de l'interface $iface sur $eq"
	set menuif [::webapp::form-hidden iface $iface]

	# proposer l'option "plusieurs interfaces"
	d urlset "U" $conf(nextifchg) [list [list "eq" $eq]]
	set url [d urlget "U"]
	set multi [::webapp::helem "p" \
			[::webapp::helem "a" {Modifier plusieurs interfaces} \
					"href" $url] ]

	# proposer le menu de description d'interface
	set desc [::webapp::html-string [binary format H* $desc]]
	set menudesc "Description "
	append menudesc [::webapp::form-text desc 1 80 80 $desc]

	# proposer les différents vlans
	# XXX

    } else {
	#
	# Présenter toutes les interfaces
	#

	set titre "Modification des interfaces de $eq"

	# liste des interfaces
	set lif {}
	foreach i $iflist {
	    set edit [lindex $tabiface($i) 1]
	    if {$edit eq "edit"} then {
		lappend lif [list $i $i]
	    }
	}
	set nif [llength $lif]
	set menuif [::webapp::form-menu iface $nif 1 $lif {}]
	set multi ""
	set menudesc ""

	# proposer les différents vlans
    }

    #
    # Script suivant
    #

    d urlset "%URLFORM%" $conf(next) {}

    #
    # Sortie de la page
    #

    d result $conf(page) [list \
			    [list %EQ%     $eq] \
			    [list %TITRE% $titre] \
			    [list %MULTI% $multi] \
			    [list %MENUIF% $menuif] \
			    [list %MENUDESC% $menudesc] \
			]
}

::webapp::cgi-exec main %DEBUG%
