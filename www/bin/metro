#!%TCLSH%

#
# Script pour afficher la page contenant le graphe et le formulaire
# d'actualisation des dates
#
# Called by: /applis/dns/bin/eq
#
# Parameters (form or url):
#   - id : id du point de collecte sélectionné
#   - hdebut : heure de début
#   - jdebut : date de début
#   - hfin : heure de fin
#   - jfin : date de fin
#
# History
#   2006/05/24 : pda/jean/boggia : design
#   2006/08/10 : pda/boggia      : ajout du paramètre uti
#   2007/01/12 : pda             : mutualisation initialisation
#   2008/07/30 : pda             : généralisation aux graphes wifi
#   2008/07/30 : pda             : plus de souplesse dans les dates/heures
#


#
#


#
# Template pages used by this script
#

set conf(err)		erreur.html
set conf(page)		metro.html

#
# Next actions
# 

set conf(nextmetro)	"%HOMEURL%/bin/metro"


#
# Script parameters
#


set conf(form)	{
    {id			1 1}
    {jdebut		0 1}
    {hdebut		0 1}
    {jfin		0 1}
    {hfin		0 1}
}

set conf(urlgraph)	"%HOMEURL%/bin/graphe"

#
#

source %LIBDNS%

#
#

# ::webapp::cgidebug ; exit


##############################################################################
# Main procedure
##############################################################################

proc main {} {
    global conf

    #
    # Initialization
    #

    ::dnscontext create d
    d init-cgi "topo" $conf(err) "" $conf(form) ftab dbfd login tabuid

    set msgsta [topo-status $dbfd $tabuid(admin)]

    ::webapp::import-vars ftab
    foreach f $conf(form) {
	set var [lindex $f 0]
	set $var [string trim [lindex [set $var] 0]]
    }

    #
    # valider l'id du graphe en fonction des droits
    #

    set msg [check-metro-id $dbfd $id tabuid titre]
    if {! [string equal $msg ""]} then {
	d error $msg
    }

    #
    # Valider l'intervalle de temps : début
    #

    set aujourdhui [clock format [clock seconds] -format "%d/%m/%Y"]

    set debut ""
    switch -regexp -- "$jdebut-$hdebut" {
	{^[0-9/]+-[0-9:]+$} {
	    # spéc exacte
	    set debut [decode-date $jdebut $hdebut]
	}
	{^-[0-9:]+$} {
	    # aujourd'hui à x heures
	    set debut [decode-date $aujourdhui $hdebut]
	}
	{^[0-9/]+-$} {
	    # tel jour à 0 heure
	    set debut [decode-date $jdebut "00:00:00"]
	}
	{^-$} {
	    # il y a 36 heures
	    set debut "-1 day -12 hours"
	}
    }
    if {[string equal $debut ""]} then {
	d error "Date ou heure de début incorrecte"
    }
    set debut [clock scan $debut]

    #
    # Valider l'intervalle de temps : fin
    #

    set fin ""
    switch -regexp -- "$jfin-$hfin" {
	{^[0-9/]+-[0-9:]+$} {
	    # spéc exacte
	    set fin [decode-date $jfin $hfin]
	}
	{^-[0-9:]+$} {
	    # aujourd'hui à x heures
	    set fin [decode-date $aujourdhui $hfin]
	}
	{^[0-9/]+-$} {
	    # tel jour à minuit
	    set fin [decode-date $jfin "23:59:59"]
	}
	{^-$} {
	    # maintenant
	    set fin "now"
	}
    }
    if {[string equal $fin ""]} then {
	d error "Date ou heure de fin incorrecte"
    }
    set fin [clock scan $fin]

    #
    # Remettre l'id en forme
    #

    set hid [::webapp::html-string $id]

    #
    # Préparer les URL
    #

    d urlset "%URLMETRO%" $conf(nextmetro) {}
    d urlset "%URLGRAPH%" $conf(urlgraph) [list \
						[list "id" $id] \
						[list "debut" $debut] \
						[list "fin" $fin] \
					    ]

    #
    # End of script: output page and close database
    #

    d result $conf(page) [list \
			    [list %ADMIN%  "admin (future use)"] \
			    [list %MSGSTA% $msgsta] \
			    [list %TITRE%  $titre] \
			    [list %ID%     $hid] \
			    [list %JDEBUT% $jdebut] \
			    [list %HDEBUT% $hdebut] \
			    [list %JFIN%   $jfin] \
			    [list %HFIN%   $hfin] \
			]
}

::webapp::cgi-exec main %DEBUG%
