#!%TCLSH%

#
# Script pour afficher la page contenant le graphe et le formulaire
# d'actualisation des dates
#
# Appelé par : /applis/topo/bin/accueil
#
# Paramètres (formulaire ou URL) :
#   - id : id du point de collecte sélectionné
#   - hdebut : heure de début
#   - jdebut : date de début
#   - hfin : heure de fin
#   - jfin : date de fin
#
# Historique
#   2006/05/24 : pda/jean/boggia : création
#   2006/08/10 : pda/boggia      : ajout du paramètre uti
#   2007/01/12 : pda             : mutualisation initialisation
#   2008/07/30 : pda             : généralisation aux graphes wifi
#   2008/07/30 : pda             : plus de souplesse dans les dates/heures
#

set conf(homeurl)	%HOMEURL%

#
# Chemins utilisés par les scripts
#

set conf(lib)		%DESTDIR%/lib
set conf(libdns)	$conf(lib)/libdns.tcl

#
# Définition des noms des pages "à trous"
#

set conf(err)		$conf(lib)/erreur.html
set conf(page)		$conf(lib)/metro.html

#
# Quelques paramètres du script
#


set conf(form)	{
    {id			1 1}
    {jdebut		0 1}
    {hdebut		0 1}
    {jfin		0 1}
    {hfin		0 1}
}

#
# Les outils du parfait concepteur de pages Web dynamiques...
#

lappend auto_path %PKGTCL%
package require webapp
package require pgsql

#
# On y va !
#

# ::webapp::cgidebug ; exit

source $conf(libdns)

##############################################################################
# Programme principal
##############################################################################

proc main {} {
    global conf

    #
    # Initialisation
    #

    init-topo $conf(err) "corresp" $conf(form) ftab dbfd uid tabuid ouid tabouid urluid msgsta

    foreach f $conf(form) {
	set var [lindex $f 0]
	set $var [string trim [lindex [set $var] 0]]
    }

    set u1 ""
    set u2 ""
    if {! [string equal $urluid ""]} then {
	set u1 "&$urluid"
	set u2 "?$urluid"
    }

    #
    # valider l'id du graphe en fonction des droits
    #

    set msg [verifier-metro-id $dbfd $id tabuid titre]
    if {! [string equal $msg ""]} then {
	::webapp::error-exit $conf(err) $msg
    }

    #
    # Valider l'intervalle de temps : début
    #

    set aujourdhui [clock format [clock seconds] -format "%d/%m/%Y"]

    set debut ""
    switch -regexp -- "$jdebut-$hdebut" {
	{^[0-9/]+-[0-9:]+$} {
	    # spéc exacte
	    set debut [decoder-date $jdebut $hdebut]
	}
	{^-[0-9:]+$} {
	    # aujourd'hui à x heures
	    set debut [decoder-date $aujourdhui $hdebut]
	}
	{^[0-9/]+-$} {
	    # tel jour à 0 heure
	    set debut [decoder-date $jdebut "00:00:00"]
	}
	{^-$} {
	    # il y a 36 heures
	    set debut "-1 day -12 hours"
	}
    }
    if {[string equal $debut ""]} then {
	::webapp::error-exit $conf(err) "Date ou heure de début incorrecte"
    }
    set debut [clock scan $debut]

    #
    # Valider l'intervalle de temps : fin
    #

    set fin ""
    switch -regexp -- "$jfin-$hfin" {
	{^[0-9/]+-[0-9:]+$} {
	    # spéc exacte
	    set fin [decoder-date $jfin $hfin]
	}
	{^-[0-9:]+$} {
	    # aujourd'hui à x heures
	    set fin [decoder-date $aujourdhui $hfin]
	}
	{^[0-9/]+-$} {
	    # tel jour à minuit
	    set fin [decoder-date $jfin "23:59:59"]
	}
	{^-$} {
	    # maintenant
	    set fin "now"
	}
    }
    if {[string equal $fin ""]} then {
	::webapp::error-exit $conf(err) "Date ou heure de fin incorrecte"
    }
    set fin [clock scan $fin]

    #
    # Remettre l'id en forme
    #

    set id [::webapp::html-string $id]

    #
    # Sortie de la page
    #

    ::webapp::send html [::webapp::file-subst $conf(page) \
					[list \
						[list %ADMIN%  "admin (future use)"] \
						[list %MSGSTA% $msgsta] \
						[list %TITRE%  $titre] \
						[list %ID%     $id] \
						[list %JDEBUT% $jdebut] \
						[list %HDEBUT% $hdebut] \
						[list %JFIN%   $jfin] \
						[list %HFIN%   $hfin] \
						[list %DEBUT%  $debut] \
						[list %FIN%    $fin] \
						[list %URLUID% $u2] \
						[list %URL2%   $u1] \
					    ] \
				    ]

    #
    # Déconnexion de la base
    #

    fermer-base $dbfd
}

::webapp::cgi-exec main %DEBUG%
