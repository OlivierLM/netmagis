#!%TCLSH%


#
# Script pour présenter la page de saisie de l'hébergeur d'une adresse
# de messagerie (ou la liste des adresses de messagerie existantes)
#
# Called by: script mailheberg (page lib/mailheberg-edit.htgt)
#
# Parameters (form or url):
#   - nom : nom (premier constituant) de l'adresse de messagerie
#   - domaine : domaine de l'adresse de messagerie (tous les
#		constituants sauf le premier)
#   - nomh : nom (premier constituant) de l'hébergeur
#   - domaineh : domaine de l'hébergeur (tous les constituants sauf le premier)
#
# History
#   2004/02/12 : pda/jean : design
#   2007/10/25 : jean     : log modify actions
#


#
#


#
# Template pages used by this script
#

set conf(err)		erreur.html
set conf(page)		mailmodif.html

#
# Next actions
# 

# none (no-return page)

#
# Script parameters
#

set conf(form)		{
	{nom		1 1}
	{domaine	1 1}
	{nomh		1 1}
	{domaineh	1 1}
}

#
#

source %LIBDNS%

#
#

# ::webapp::cgidebug ; exit


##############################################################################
# Main procedure
##############################################################################

proc main {} {
    global conf

    #
    # Initialization
    #

    ::dnscontext create d
    d init-cgi "dns" $conf(err) "" $conf(form) ftab dbfd login tabuid

    set idcor $tabuid(idcor)

    set nom      [string trim [lindex $ftab(nom) 0]]
    set domaine  [string trim [lindex $ftab(domaine) 0]]
    set nomh     [string trim [lindex $ftab(nomh) 0]]
    set domaineh [string trim [lindex $ftab(domaineh) 0]]

    set toutnom "$nom.$domaine"
    set toutheb "$nomh.$domaineh"

    #
    # Vérifier le droit de déclarer un rôle mail
    # et récupérer les informations sur l'hébergeur éventuel
    #

    set msg [check-role-mail $dbfd $idcor $nom $domaine trr oldtrrh]
    if {! [string equal $msg ""]} then {
	d error $msg
    }

    set rrexiste [expr ! [string equal $trr(idrr) ""]]
    set oldnomh $oldtrrh(nom)

    #
    # Valider la syntaxe, l'existence et le droit d'accès au nouvel
    # hébergeur (du moins, si nomh existe, c'est à dire si ce n'est
    # pas une suppression).
    #

    set msg [check-authorized-host $dbfd $idcor $nomh $domaineh newtrrh "host"]
    if {! [string equal $msg ""]} then {
	d error "$msg\nAction refusée."
    }

    #
    # Si nomh existe, l'hébergeur fourni par l'utilisateur doit exister.
    #

    if {! [string equal $nomh ""]} then {
	if {[string equal $newtrrh(idrr) ""]} then {
	    d error "Nom d'hébergeur '$toutheb' non valide (n'existe pas)."
	}
    }

    #
    # Insertion des données dans la base
    #
    # SELON oldnomh ET nomh
    #   vide     ET vide     => erreur
    #	vide     ET non-vide => design
    #	non-vide ET vide     => suppression
    #   non-vide ET non-vide => modification
    #

    set videoldnomh [string equal $oldnomh ""]
    set videnewnomh [string equal $nomh ""]

    if {! [::pgsql::lock $dbfd {dns.rr dns.role_mail} msg]} then {
	d error "Transaction impossible\n$msg"
    }

    set lm ""
    switch "$videoldnomh-$videnewnomh" {
	1-1 {
	    d error "Le rôle '$toutnom' n'existe pas. Vous ne pouvez pas le supprimer."
	}
	1-0 {
	    #
	    # Création d'un rôle
	    #
	    set action "créée"

	    if {! $rrexiste} then {
		#
		# Le nom de "l'adresse de messagerie" n'existe pas encore.
		# Ajouter le RR correspondant
		#
		set msg [add-rr $dbfd $nom $trr(iddom) "" 0 "" 0 -1 \
						"" "" "" $idcor trr]
		if {! [string equal $msg ""]} then {
		    d error "Insertion de '$toutnom' impossible ($msg)"
		} 
	    }

	    #
	    # Ajouter le rôle dans la base
	    #

	    set sql "INSERT INTO dns.role_mail (idrr, heberg)
			    VALUES ($trr(idrr), $newtrrh(idrr))"
	    if {! [::pgsql::execsql $dbfd $sql msg]} then {
		::pgsql::unlock $dbfd "abort" m
		d error "Impossible d'insérer\n$msg"
	    }

	    #
	    # Affecter un droit pour l'hébergement des boîtes
	    # Ce droit est mis par défaut pour le groupe du correspondant
	    # faisant cette design.
	    #

	    set sql "INSERT INTO dns.dr_mbox (idgrp, idmail)
				VALUES ($tabuid(idgrp), $trr(idrr))"
	    if {! [::pgsql::execsql $dbfd $sql msg]} then {
		::pgsql::unlock $dbfd "abort" m
		d error "Impossible d'insérer\n$msg"
	    }

	    set lm "ajout role mail $toutnom -> $toutheb"
	}
	0-1 {
	    #
	    # Suppression d'un rôle et des droits associés
	    # On sait que le rôle mail préexistait (donc
	    # que trr(idrr) est non vide).
	    #

	    set action "supprimée"

	    set idrr $trr(idrr)

	    set sql "DELETE FROM dns.dr_mbox WHERE idmail = $idrr ;
		    DELETE FROM dns.role_mail WHERE idrr = $idrr"
	    if {! [::pgsql::execsql $dbfd $sql msg]} then {
		::pgsql::unlock $dbfd "abort" m
		d error "Impossible de supprimer\n$msg"
	    }

	    #
	    # Suppression du RR lui-même si possible
	    #
	    set msg [del-orphaned-rr $dbfd $idrr]
	    if {! [string equal $msg ""]} then {
		::pgsql::unlock $dbfd "abort" m
		d error "Impossible de supprimer\n$msg"
	    }

	    set lm "suppression du role mail $toutnom"
	}
	0-0 {
	    #
	    # Modification d'un rôle. On est sûr que le rôle mail
	    # préexistait (donc que trr(idrr) est non vide).
	    # On se borne à changer l'hébergeur.
	    #

	    set action "modifiée"

	    set idrr $trr(idrr)

	    set sql "UPDATE role_mail
				SET heberg = $newtrrh(idrr)
				WHERE idrr = $idrr"
	    if {! [::pgsql::execsql $dbfd $sql msg]} then {
		::pgsql::unlock $dbfd "abort" m
		d error "Impossible de modifier\n$msg"
	    }
	    set lm "modification du role mail $toutnom -> $toutheb"
	}
    }

    #
    # Les modifications de la base sont terminées sans erreur.
    # Procéder à la fin de la transaction.
    #

    if {! [::pgsql::unlock $dbfd "commit" msg]} then {
	::pgsql::unlock $dbfd "abort" m
	d error "L'insertion a échoué. Abandon.\n$msg"
    }

    d writelog "modifrolemail" $lm

    #
    # End of script: output page and close database
    #

    d result $conf(page) [list \
				[list %NOM% $toutnom] \
				[list %ACTION% $action] \
			    ]
}

::webapp::cgi-exec main %DEBUG%
