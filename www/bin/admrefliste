#!%TCLSH%

#
# Script to present table for edition
#
# Called by: admin
#
# Parameters (form or url):
#   - type : etabl, commu, hinfo, reseau, domaine, zone, zone4, zone6,
#
# History
#   2001/11/01 : pda      : design
#   2002/05/03 : pda/jean : re-use in webdns
#   2002/05/06 : pda/jean : add users
#   2002/05/16 : pda      : conversion to arrgen
#   2002/05/21 : pda/jean : add groups
#   2002/05/21 : pda/jean : add communauties
#   2002/07/09 : pda      : add nologin
#   2003/05/13 : pda/jean : use auth base
#   2003/08/12 : pda      : remove users (they go in group edition)
#   2004/01/14 : pda/jean : add IPv6
#   2004/08/06 : pda/jean : add flag dhcp by network
#   2005/04/08 : pda/jean : add table dhcpprofil
#   2010/11/16 : pda/jean : add table vlan
#   2010/12/09 : pda      : i18n
#   2010/12/09 : pda      : remove groups
#   2010/12/09 : pda      : rewrite with conf() array
#

#
# Next actions
# 

set conf(next)		"%HOMEURL%/bin/admrefmodif"
set conf(nexthelp)	"%HOMEURL%/bin/admrefhelp"

#
# Template pages used by this script
#

set conf(err)		erreur.html
set conf(page)		admrefliste.html

#
# Script parameters
#

set conf(form)	{
	{type	1 1}
}

set conf(etabl:ptitle) 	"Organization management"
set conf(etabl:cols)		{ {100 nom {Description} {string 30} {}} }
set conf(etabl:sql)		"SELECT * FROM dns.etablissement ORDER BY nom ASC"
set conf(etabl:id)		idetabl

set conf(commu:ptitle) 	"Community management"
set conf(commu:cols)		{ {100 nom {Description} {string 30} {}} }
set conf(commu:sql)		"SELECT * FROM dns.communaute ORDER BY nom ASC"
set conf(commu:id)		idcommu

set conf(hinfo:ptitle) 	"Host type management"
set conf(hinfo:cols)		{ {60 texte {Description} {string 30} {}}
				  {20 tri {Sort} {string 10} {}}
				  {20 present {Present} {bool} 1}
				}
set conf(hinfo:sql)		"SELECT * FROM dns.hinfo ORDER BY tri ASC, texte ASC"
set conf(hinfo:id)		idhinfo

set conf(reseau:ptitle)	"Network management"
set conf(reseau:cols)		{ {1 nom	{Intitulé} {string 20} {}}
				  {1 localisation {Location} {string 10} {}}
				  {1 adr4	{IPv4 address} {string 15} {}}
				  {1 gw4	{IPv4 gateway} {string 12} {}}
				  {1 dhcp	{DHCP enabled} {bool} 0}
				  {1 adr6	{Adr IPv6} {string 49}
				  {1 gw6	{IPv6 gateway} {string 45} {}}
				  {1 idetabl	{Organization} {menu {%MENUETABL%} {}}
				  {1 idcommu	{Community} {menu {%MENUCOMMU%} {}}
				  {1 commentaire {Comment} {string 15} {}}
				}
set conf(reseau:sql)		"SELECT * FROM dns.reseau ORDER BY adr4"
set conf(reseau:id)		idreseau

set conf(domaine:ptitle) "Domain management"
set conf(domaine:cols)		{ {100 nom {Domain } {string 30} {}} }
set conf(domaine:sql)		"SELECT * FROM dns.domaine ORDER BY nom ASC"
set conf(domaine:id)		iddom

set conf(zone:ptitle)	"Zone management"
set conf(zone:cols)		{ {15 domaine	{Domain} {string 15} {}}
				  {45 prologue	{Prolog} {textarea {45 10}} {}}
				  {25 rrsup	{Addtl RR} {textarea {30 10}} {}}
				  {15 selection	{Criterium} {string 15} {}}
				}
set conf(zone:sql)		"SELECT * FROM dns.zone_normale ORDER BY domaine ASC"
set conf(zone:id)		idzone

set conf(zone4:ptitle)		$conf(zone:ptitle)
set conf(zone4:cols)		$conf(zone:cols)
set conf(zone4:sql)		"SELECT * FROM dns.zone_reverse4 ORDER BY domaine ASC"
set conf(zone4:id)		$conf(zone:id)

set conf(zone6:ptitle)		$conf(zone:ptitle)
set conf(zone6:cols)		$conf(zone:cols)
set conf(zone6:sql)		"SELECT * FROM dns.zone_reverse6 ORDER BY domaine ASC"
set conf(zone6:id)		$conf(zone:id)

set conf(dhcpprofil:ptitle) "DHCP profile management"
set conf(dhcpprofil:cols)	{ {20 nom {Name} {string 20} {}}
				  {80 texte {Directives dhcpd.conf} {textarea {80 10}} {}}
				}
set conf(dhcpprofil:sql)	"SELECT * FROM dns.dhcpprofil ORDER BY nom ASC"
set conf(dhcpprofil:id)		iddhcpprofil

set conf(vlan:ptitle)	"Vlan management"
set conf(vlan:cols)		{ {15 vlanid {Vlan-Id} {string 10} {}}
				  {75 descr {Description} {string 40} {}}
				  {10 voip {VoIP Vlan} {bool} 0}
				}
set conf(vlan:sql)		"SELECT * FROM topo.vlan ORDER BY vlanid ASC"
set conf(vlan:id)		vlanid

#
# WebDNS general library
#

lappend auto_path %PKGTCL%
package require webdns

# ::webapp::cgidebug ; exit

##############################################################################
# Help for column titles
##############################################################################

#
# Prepare a title list for the library function display-tabular
#
# Input:
#   - parameters :
#	- cols : title specification {{col txt} {col txt} ...} where:
#		- col is the name of column in the SQL table, but also
#			name of anchor in the help page
#		- txt is the text to be displayed in the title
#	- url : url of help page (format string where %1$s is the column
#		name and %2$s is the text)
# Output:
#   - return value : specification ready for display-tabular
#
# History
#   2001/11/02 : pda      : design and documentation
#   2010/12/09 : pda      : i18n
#

proc prep-titles {cols url} {
    set titles {}
    foreach c $cols {
	lassign $c key legend
	lappend titles [list "html" [format $url $key $legend]]
    }
    return $titles
}

##############################################################################
# Main procedure
##############################################################################

proc main {} {
    global conf

    #
    # Initialization
    #

    ::dnscontext create d
    d init-cgi "admin" $conf(err) "admin" $conf(form) ftab dbfd login tabuid

    #
    # Case type
    #

    set type [string trim [lindex $ftab(type) 0]]

    #
    # Prepare help url
    #

    d urlset "" $conf(nexthelp) [list [list "type" $type] ]
    set url [d urlget ""]
    append url {#%1$s}
    set urlhelp [::webapp::helem "a" {%2$s} "href" $url]

    #
    # Analyze type specifications
    #

    if {! [info exists conf($type:ptitle)]} then {
	d error [format [mc "Type '%s' not supported"] $type]
    }

    set ptitle [mc $conf($type:ptitle)]

    set allwidths {}
    set alltitles {}
    foreach c $conf($type:cols) {
	lassign $c width var desc formtype defval

	lappend allwidths $width
	lappend alltitles [list $var [mc $desc]]
	lappend colspecs [list $var $formtype $defval]
    }

    set title [prep-titles $alltitles $urlhelp]

    set sql $conf($type:sql)
    set id $conf($type:id)

    #
    # Particular cases
    #

    switch -- $type {
	reseau	{
	    set menuetabl [::pgsql::getcols $dbfd dns.etablissement "" "nom ASC" \
						{idetabl nom}]
	    set menucommu [::pgsql::getcols $dbfd dns.communaute "" "nom ASC" \
						{idcommu nom}]
	    regsub -- "%MENUETABL%" $colspecs "$menuetabl" colspecs
	    regsub -- "%MENUCOMMU%" $colspecs "$menucommu" colspecs
	}
    }

    #
    # Display data
    #

    set msg [display-tabular $allwidths $title $colspecs $dbfd $sql $id tab]
    if {$msg ne ""} then {
	d error $msg
    }

    #
    # End of script: output page and close database
    #

    d urlset "%URLFORM%" $conf(next) [list [list "type" $type]]

    d result $conf(page) [list \
				[list %TABLEAU% $tab] \
				[list %TITREPAGE% $ptitle] \
			    ]
}

::webapp::cgi-exec main %DEBUG%
