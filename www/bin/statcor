#!%TCLSH%


#
# Script pour consulter des stats sur les correspondants
#
# Called by: admin.htgt
#
# Parameters (form or url): none
#
# History
#   2002/07/25 : pda      : design
#   2003/05/13 : pda/jean : use auth base
#


#
#


#
# Template pages used by this script
#

set conf(err)		erreur.html
set conf(page)		statcor.html

#
# Next actions
# 

# none (no-return page)

#
# Le tableau servant à présenter le nb de machines par correspondant
# Colonnes
#	nom du correspondant
#	nombre de RR déclarés
#	pourcentage par rapport au nb de machines
#	[nb d'adresses allouées au correspondant]
#

set conf(tabrrcor) {
    global {
	chars {10 normal}
	columns {70 15 15}
	botbar {yes}
	align {right}
    }
    motif {Titre} {
	align {center}
	title {yes}
	topbar {yes}
	chars {bold}
	vbar {yes}
	colonne { }
	vbar {yes}
	colonne { }
	vbar {yes}
	colonne { }
	vbar {yes}
    }
    motif {Normal} {
	title {yes}
	vbar {yes}
	colonne {
	    align {left}
	}
	vbar {yes}
	colonne { }
	vbar {yes}
	colonne { }
	vbar {yes}
    }
    motif {Total} {
	title {yes}
	chars {bold}
	vbar {yes}
	colonne {
	    align {left}
	}
	vbar {yes}
	colonne { }
	vbar {yes}
	colonne { }
	vbar {yes}
    }
}

#
#

lappend auto_path %PKGTCL%
package require webdns

#
#

# ::webapp::cgidebug ; exit


##############################################################################
# Comparaison de deux éléments de liste (pour les tris)
##############################################################################

proc comparer {e1 e2} {
    set nb1 [lindex $e1 0]
    set nb2 [lindex $e2 0]
    if {$nb1 < $nb2} then {
	return 1
    } elseif {$nb1 > $nb2} then {
	return -1
    }
    return [string compare [lindex $e1 1] [lindex $e2 1]]
}

##############################################################################
# Main procedure
##############################################################################

proc main {} {
    global conf
    global ah

    #
    # Initialization
    #

    ::dnscontext create d
    d init-cgi "admin" $conf(err) "admin" {} ftab dbfd login tabuid

    #
    # Calcule les stats, et former une liste {nb nomprenom}
    #

    set sql "SELECT c.login, count(*) AS nb
		    FROM dns.rr r, global.corresp c
		    WHERE r.idcor = c.idcor
		    GROUP BY c.login
		"
    set total 0
    set liste {}

    set u [::webapp::authuser create %AUTO%]

    pg_select $dbfd $sql tab {
	catch {unset tabuid}

	if {[catch {set n [$ah getuser $tab(login) $u]} m]} then {
	    return "Problème dans la base d'authentification ($m)"
	}
	
	if {$n == 1} then {
	    set nomprenom "[$u get nom] [$u get prenom]"
	} else {
	    set nomprenom $tab(login)
	}

	lappend liste [list $tab(nb) $nomprenom]
	incr total $tab(nb)
    }

    $u destroy

    #
    # Trier la liste par nb, puis par nomprénom
    #

    set liste [lsort -command comparer $liste]

    #
    # Présenter les données dans un zoli tableau
    #

    set donnees {}
    lappend donnees {Total Correspondant {Nombre de RR} {Pourcentage}}
    set ptotal 0.0
    foreach e $liste {
	set nb    [lindex $e 0]
	set nom   [lindex $e 1]
	set pcent [expr $nb * 100.0 / $total]
	lappend donnees [list Normal $nom $nb [format "%5.2f" $pcent]]
	set ptotal [expr $ptotal + $pcent]
    }
    lappend donnees [list Total Total $total [format "%5.2f" $ptotal]]

    set nbrrcor [::arrgen::output "html" $conf(tabrrcor) $donnees]

    #
    # End of script: output page and close database
    #

    d result $conf(page) [list \
				[list %NBRRCOR% $nbrrcor] \
			    ]
}

::webapp::cgi-exec main %DEBUG%
