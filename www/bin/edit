#!%TCLSH%


#
# Script pour permettre au correspondant de choisir la modification
# qu'il veut effectuer sur l'adresse sélectionnée.
#
# Appelé par : script liste (carte des adresses disponibles)
#
# Paramètres (formulaire ou URL) :
#   - adr : adresse IP (v4 en l'occurrence sélectionnée)
#
# Historique
#   2010/10/10 : pda      : spécification
#

set conf(homeurl)	%HOMEURL%

#
# Chemins utilisés par les scripts
#

set conf(lib)		%DESTDIR%/lib
set conf(libdns)	$conf(lib)/libdns.tcl

#
# Définition des noms des pages "à trous"
#

set conf(page)		$conf(lib)/edit.html
set conf(err)		$conf(lib)/erreur.html

#
# Scripts suivants (actions de formulaire)
# 

set conf(nextsuppr)	"%HOMEURL%/bin/traitesuppr"
set conf(nextedit)	"%HOMEURL%/bin/editmodif"
set conf(nextlist)	"%HOMEURL%/bin/liste"

#
# Quelques paramètres du script
#

# scripts cgi
set conf(script-map)	bin/liste
set conf(script-liste)	bin/liste
set conf(script-accueil) bin/accueil

#
# Les paramètres du formulaire
#

set conf(form)		{
	{adr		1 1}
}

#
# Les outils du parfait concepteur de pages Web dynamiques...
#

lappend auto_path %PKGTCL%
package require webapp
package require pgsql
package require arrgen

#
# On y va !
#

# ::webapp::cgidebug ; exit

source $conf(libdns)

##############################################################################
# Programme principal
##############################################################################

proc main {} {
    global conf

    #
    # Initialisation
    #

    ::dnscontext create d
    d init-cgi "dns" $conf(err) "" $conf(form) ftab dbfd login tabcor

    set idcor $tabcor(idcor)

    #
    # Lire les champs du formulaire
    #

    set adr      [string trim [lindex $ftab(adr) 0]]

    #
    # Vérifier la syntaxe de l'adresse IP
    #

    set m [syntaxe-ip $dbfd $adr "inet"]
    if {[string length $m] > 0} then {
	d error "Erreur sur l'adresse '$adr': $m"
    }

    #
    # Vérifier que l'adresse IP appartient bien à une des plages
    # autorisées pour le correspondant
    #

    if {! [droit-correspondant-ip $dbfd $idcor $adr]} then {
	d error "Vous n'avez pas accès à l'adresse '$adr'"
    }

    #
    # Vérifier que l'adresse existe, en récupérant toutes les
    # informations de l'objet.
    #

    if {! [lire-rr-par-ip $dbfd $adr trr]} then {
	d error "L'adresse '$adr' n'existe pas dans la base."
    }

    #
    # Valider l'accès à ce nom
    #

    set nom     $trr(nom)
    set domaine $trr(domaine)
    set msg [valide-droit-nom $dbfd $idcor $nom $domaine bidon "supprimer-un-nom"]
    if {! [string equal $msg ""]} then {
	d error $msg
    }

    #
    # Est-ce qu'il y a une seule adresse IP ?
    # Si = 1 : supprimer l'adresse revient à supprimer l'ensemble
    # Si > 1 : supprimer l'adresse ne fait que supprimer *une* des adresses
    # On fait ce test essentiellement pour différencier le message.
    #

    if {[llength $trr(ip)] == 1} then {
	# ne pas afficher l'action "supprimer une ip mais pas le nom"
	set dispuneip "none"
    } else {
	# afficher l'action "supprimer une ip mais pas le nom"
	set dispuneip "block"
    }

    #
    # Préparer l'affichage des informations à afficher le cas échéant
    #

    set machine [presenter-rr $dbfd -1 trr]

    #
    # Préparer la suite du parcours
    #

    d urlset "%URLSUPPR%" $conf(nextsuppr) [list \
						[list "action" "suppr-nom"] \
						[list "confirm" "oui"] \
						[list "nom" $nom] \
						[list "domaine" $domaine] \
					    ]
    d urladdnext "%URLSUPPR%"

    d urlset "%URLSUPPRIP%" $conf(nextsuppr) [list \
						[list "action" "suppr-ip"] \
						[list "confirm" "oui"] \
						[list "adr" $adr] \
					    ]
    d urladdnext "%URLSUPPRIP%"

    d urlset "%URLEDIT%" $conf(nextedit) [list \
						[list "action" "modif-infos"] \
						[list "nom" $nom] \
						[list "domaine" $domaine] \
					    ]
    d urladdnext "%URLEDIT%"

    switch -- [d nextprog] {
	map { set format "carte" }
	list -
	default { set format "consulter" }
    }
    d urlset "%URLBACK%" $conf(nextlist) [list \
						[list "format" $format] \
						[d nextargs] \
					    ]

    #
    # Fin du script : sortie de la page et fermeture de la base
    #

    d result $conf(page) [list \
				[list %ADR%         $adr] \
				[list %NOM%         $nom] \
				[list %DOMAINE%     $domaine] \
				[list %MACHINE%     $machine] \
				[list %DISPUNEIP%   $dispuneip] \
			    ]
}

::webapp::cgi-exec main %DEBUG%
