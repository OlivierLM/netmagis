#!%TCLSH%


#
# Script pour saisir les modifications demandées par un correspondant.
#
# Called by: script modif (page lib/modif.htgt)
#
# Parameters (form or url):
#   - édition des informations d'une machine
#	- nom : nom de la machine à ajouter
#	- domaine : domaine dans lequel elle doit être ajoutée
#
# History
#   2002/05/03 : pda/jean : design
#   2002/07/09 : pda      : add nologin
#   2002/07/09 : pda      : conversion des noms en minuscules
#   2003/05/13 : pda/jean : use auth base
#   2004/08/05 : pda/jean : add mac
#   2005/04/08 : pda/jean : ajout dhcpprofil
#   2008/07/25 : pda/jean : ajout du droit d'émission SMTP
#   2010/10/26 : pda      : rendre le nom+domaine éditable
#   2010/10/31 : pda      : ajout ttl
#


#
#


#
# Template pages used by this script
#

set conf(page-edit-infos)	editmodif-infos.html
set conf(err)			erreur.html

#
# Next actions
# 

set conf(next)		"%HOMEURL%/bin/traitemodif"
set conf(nextajout)	"%HOMEURL%/bin/ajout"
set conf(nextsuppr)	"%HOMEURL%/bin/suppr"


#
# Script parameters
#

# field used to determine next step
set conf(form)		{
	{action		1 1}
}

# action specific fields
set conf(form-modif-infos)	{
	{nom		1 1}
	{domaine	1 1}
}

#
#

source %LIBDNS%

#
#

# ::webapp::cgidebug ; exit


##############################################################################
# Ajout d'un nom
##############################################################################

# History
#   2002/05/03 : pda/jean : conception
#
proc editmodif-infos {dbfd _tabuid _ftab} {
    global conf
    upvar $_tabuid tabuid
    upvar $_ftab ftab

    #
    # Validate form input
    #

    set nom           [string trim [lindex $ftab(nom) 0]]
    set domaine       [string trim [lindex $ftab(domaine) 0]]

    #
    # Valider la syntaxe du nom au sens de la RFC ????
    #

    set m [check-name-syntax $nom]
    if {[string length $m] > 0} then {
	d error "Erreur sur le nom '$nom': $m"
    }
    set nom [string tolower $nom]

    #
    # Valider le domaine, le nom (qui ne doit pas être un alias, un MX, etc)
    #

    set msg [check-authorized-host $dbfd $tabuid(idcor) $nom $domaine trr "existing-host"]
    if {[string length $msg] > 0} then {
	d error $msg
    }

    #
    # Vérifier que le nom à modifier existe bien
    #

    if {[string equal $trr(idrr) ""]} then {
	d error "Le nom '$nom' n'existe pas"
    }

    #
    # Pour l'affichage du nom original de la machine
    #

    set vnom $nom
    set vdomaine $domaine

    #
    # Pré-saisir les champs à éditer
    #

    set nom [::webapp::form-text nom 1 20 64 $nom]
    set domaine [menu-domain $dbfd $tabuid(idcor) domaine "" $domaine]

    set val [::webapp::html-string $trr(mac)]
    set mac [::webapp::form-text mac 1 20 17 $val]
    set dhcpprofil [menu-dhcp-profile $dbfd iddhcpprofil $tabuid(idcor) $trr(iddhcpprofil)]
    set dhcpprofillibelle [lindex $dhcpprofil 0]
    set dhcpprofilmenu    [lindex $dhcpprofil 1]

    set menuhinfo [menu-hinfo $dbfd hinfo $trr(hinfo)]

    set droitsmtp [menu-droitsmtp $dbfd "droitsmtp" tabuid $trr(droitsmtp)]
    set droitsmtplibelle [lindex $droitsmtp 0]
    set droitsmtpmenu    [lindex $droitsmtp 1]

    set ttl [menu-ttl $dbfd "ttl" tabuid $trr(ttl)]
    set ttllibelle [lindex $ttl 0]
    set ttlval     [lindex $ttl 1]

    set val [::webapp::html-string $trr(commentaire)]
    set commentaire [::webapp::form-text commentaire 1 50 50 $val]

    set val [::webapp::html-string $trr(respnom)]
    set respnom [::webapp::form-text respnom 1 50 50 $val]

    set val [::webapp::html-string $trr(respmel)]
    set respmel [::webapp::form-text respmel 1 50 50 $val]

    #
    # Script suivant
    #

    d urlset "%URLFORM%" $conf(next) {}
    d urladdnext "%URLFORM%"

    d urlset "%URLAJOUT%" $conf(nextajout) {}
    d urlset "%URLSUPPR%" $conf(nextsuppr) {}

    #
    # End of script: output page and close database
    #

    d result $conf(page-edit-infos) [list \
					[list %IDRR% $trr(idrr)] \
					[list %VNOM% $vnom] \
					[list %VDOMAINE% $vdomaine] \
					[list %NOM% $nom] \
					[list %DOMAINE% $domaine] \
					[list %MAC% $mac] \
					[list %DHCPPROFILLIBELLE% $dhcpprofillibelle] \
					[list %DHCPPROFILMENU% $dhcpprofilmenu] \
					[list %MENUHINFO% $menuhinfo] \
					[list %DROITSMTPLIBELLE% $droitsmtplibelle] \
					[list %DROITSMTPMENU% $droitsmtpmenu] \
					[list %TTLLIBELLE% $ttllibelle] \
					[list %TTLVAL% $ttlval] \
					[list %COMMENTAIRE% $commentaire] \
					[list %RESPNOM% $respnom] \
					[list %RESPMEL% $respmel] \
			    ]
}

##############################################################################
# Main procedure
##############################################################################

proc main {} {
    global conf

    #
    # Initialization
    #

    ::dnscontext create d
    d init-cgi "dns" $conf(err) "" $conf(form) ftab dbfd login tabuid

    #
    # Valider l'action, lire les autres champs du formulaire,
    # et faire le branchement
    #

    set action [lindex $ftab(action) 0]

    if {! [info exists conf(form-$action)]} then {
	d error "Champ 'action' non conforme : $action"
    }

    if {[llength [::webapp::get-data ftab $conf(form-$action)]] == 0} then {
	d error [mc "Invalid input"]
    }

    edit$action $dbfd tabuid ftab
}

::webapp::cgi-exec main %DEBUG%
