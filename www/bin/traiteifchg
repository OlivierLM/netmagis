#!%TCLSH%

#
# Handle change on one or more equipment interfaces
#
# Called by: ifchg
#
# Parameters (form or url):
#	- eq: equipment name
#	- iface : interface name (may be given more than once)
#	- mode : "mono" or "multi" (single or multiple interfaces)
#	- vlan : vlan-id or -1 to shutdown the interface
#	- voip : vlan-id or -1 to shutdown the interface
#	- desc : description (or empty, notably if multiple interfaces)
#	- stat : sensors (or empty)
#
# History
#   2010/11/26 : pda/jean : design
#   2010/11/30 : pda/jean : add sensor
#   2010/12/14 : pda      : i18n
#

#
# Template pages used by this script
#

set conf(err)		erreur.html
set conf(page)		traiteifchg.html

#
# Script parameters
#


set conf(form)	{
    {eq			1 1}
    {iface		0 999999}
    {mode		1 1}
    {vlan		1 1}
    {voip		1 1}
    {desc		0 1}
    {stat		0 1}
}

#
# WebDNS general library
#

source %LIBDNS%

# ::webapp::cgidebug ; exit

##############################################################################
# Main procedure
##############################################################################

proc main {} {
    global conf

    #
    # Initialization
    #

    ::dnscontext create d
    d init-cgi "topo" $conf(err) "" $conf(form) ftab dbfd login tabuid

    ::webapp::import-vars ftab
    foreach f $conf(form) {
	set var [lindex $f 0]
	if {$var ne "iface"} then {
	    set $var [string trim [lindex [set $var] 0]]
	}
    }

    #
    # Read equipment information from the graph
    #

    set l [eq-iflist $eq tabuid]

    lassign $l eq type model location liferr iflist arrayif arrayvlan
    array set tabiface $arrayif
    array set tabvlan  $arrayvlan

    #
    # If there is an error, exit immediately
    # This case means than one (or more) interfaces are writable, but
    # not readable: this does not make sense.
    #

    if {[llength $liferr] > 0} then {
	d error [format [mc "Inconsistency in access rights for following interfaces: %s"] [join $liferr ", "]]
    }

    #
    # If no interface is given, there is nothing to do
    #

    if {[llength $iface] == 0} then {
	d error [mc "You did not selected any interface"]
    }

    #
    # Check write consistency for interfaces
    #

    foreach i $iface {
	if {! ([info exists tabiface($i)] &&
				[lindex $tabiface($i) 1] eq "edit")} then {
	    d error [format [mc {You don't have write access to interface '%1$s' on '%2$s'}] $i $eq]
	}
    }

    #
    # Check parameters
    #

    # vlan
    if {$vlan eq "-1"} then {
	# shutdown interface
    } elseif {[regexp {^[0-9]+$} $vlan] && [info exists tabvlan($vlan)]} then {
	lassign $tabvlan($vlan) vlandesc isvoip
	if {$isvoip} then {
	    d error [format [mc "Vlan '%s' is a voice Vlan"] $vlan]
	}
    } else {
	d error [format [mc "Vlan '%s' not found"] $vlan]
    }

    # voip
    if {$voip eq "-1"} then {
	# disable voip
    } elseif {[regexp {^[0-9]+$} $voip] && [info exists tabvlan($voip)]} then {
	lassign $tabvlan($voip) vlandesc isvoip
	if {! $isvoip} then {
	    d error [format [mc "Vlan '%s' is not a voice Vlan"] $voip]
	}
    } else {
	d error [format [mc "Vlan '%s' not found"] $voip]
    }

    # description
    switch -- $mode {
	multi {
	    # nothing: we'll do the test in the next loop
	}
	mono {
	    # check special characters and add "X"
	    if {[regexp {[^- a-zA-Z0-9+/()&.:#_]} $desc match]} then {
		d error [format [mc "Special character '%s' is not allowed"] $match]
	    }
	    # if user is admin, use the given sensor, else use the old sensor
	    if {! $tabuid(admin)} then {
		set i [lindex $iface 0]
		set stat [lindex $tabiface($i) 3]
	    }
	    if {$stat eq ""} then {
		set desc "X $desc"
	    } else {
		set desc "$desc <X $stat>"
	    }
	    set qifdesc [::pgsql::quote $desc]
	}
    }

    #
    # Search equipement id
    #

    if {! [regexp {^([^.]+)\.(.+)$} $eq bidon host domain]} then {
	set host $eq
	set domain %DEFDOM%
    }

    set iddom [read-domain $dbfd $domain]
    if {$iddom == -1} then {
	d error [format [mc "Domain '%s' not found"] $domain]
    }
    if {! [read-rr-by-name $dbfd $host $iddom tabrr]} then {
	d error [format [mc "Equipment '%s' not found"] $eq]
    }
    set idrr $tabrr(idrr)

    #
    # Insert changes in spool
    #

    # the real user (not the substituted one)
    set qlogin [::pgsql::quote [lindex [d euid] 0]]

    set sql {}
    foreach i $iface {
	set qiface [::pgsql::quote $i]
	switch $mode {
	    multi {
		if {! ([info exists tabiface($i)] &&
					[lindex $tabiface($i) 5] eq "")} then {
		    # description is empty: (re)create one
		    set qifdesc "X"
		} else {
		    set qifdesc ""
		}
	    }
	    mono {
		# nothing: qifdesc has been filled above
	    }
	}
	lappend sql "INSERT INTO topo.ifchanges
			    (login, idrr, iface, ifdesc, ethervlan, voicevlan)
			VALUES ('$qlogin', $idrr, '$qiface',
					'$qifdesc', $vlan, $voip)"
    }
    set sql [join $sql ";"]
    if {! [::pgsql::execsql $dbfd $sql msg]} then {
	d error [format [mc "Error during spool insertion: %s"] $msg]
    }

    #
    # Get status for graph building and spooled equipment modifications
    #

    if {[llength $iface] == 1} then {
	set eqsta [eq-graph-status $dbfd $eq $iface]
    } else {
	set eqsta [eq-graph-status $dbfd $eq]
    }

    #
    # End of script: output page and close database
    #

    d result $conf(page) [list \
			    [list %EQSTA%        $eqsta] \
			]
}

::webapp::cgi-exec main %DEBUG%
