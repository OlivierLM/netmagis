#!%TCLSH%


#
# Script pour enregistrer les modifications demandées par un correspondant.
#
# Appelé par : script editmodif (page lib/editmodif-infos.htgt)
#
# Paramètres (formulaire ou URL) :
#   - modifications des informations d'une machine
#	- action : "modif-infos"
#	- confirm : "non" ou "oui" (si confirmation ok)
#	- idrr : idrr original de la machine à modifier
#	- nom : nom modifié de la machine
#	- domaine : domaine modifié de la machine 
#	- mac : adresse mac
#	- iddhcpprofil : l'id du profil DHCP, ou 0
#	- hinfo : type de machine (id)
#	- droitsmtp : inexistant ou non vide
#	- ttl : valeur (ou vide si pas autorisé)
#	- commentaire : informations complémentaires
#	- respnom : nom+prénom du responsable
#	- respmel : mél du responsable
#	- nextprog, nextargs : suite du parcours (en cas d'édition depuis
#		la carte ou depuis la recherche de plage consécutive)
#
# Historique
#   2002/05/03 : pda/jean : création
#   2002/05/23 : pda/jean : ajout du responsable
#   2002/07/09 : pda      : ajout de nologin
#   2002/07/09 : pda      : conversion des noms en minuscules
#   2003/05/13 : pda/jean : utilisation de la base d'authentification
#   2004/08/05 : pda/jean : ajout mac
#   2005/04/08 : pda/jean : ajout dhcppprofil
#   2007/10/25 : jean     : log des actions de modification
#   2008/02/13 : pda/jean : le responsable est le correspondant si pas précisé
#   2008/07/25 : pda/jean : ajout du droit d'émission SMTP et confirmation
#   2010/10/14 : pda      : codage parcours (via next*)
#   2010/10/26 : pda      : vérification dhcpprofil sans adresse mac
#   2010/10/26 : pda      : rendre le nom+domaine éditable
#   2010/10/31 : pda      : ajout ttl
#

set conf(homeurl)	%HOMEURL%

#
# Chemins utilisés par les scripts
#

set conf(pkg)		%PKGTCL%
set conf(lib)		%DESTDIR%/lib
set conf(libdns)	$conf(lib)/libdns.tcl

#
# Définition des noms des pages "à trous"
#

set conf(page-modif-infos)	$conf(lib)/traitemodif-infos.html
set conf(page-modif-smtp)	$conf(lib)/traitemodif-smtp.html
set conf(err)			$conf(lib)/erreur.html

#
# Quelques paramètres du script
#

set conf(auth)		%AUTH%
set conf(base)		%BASE%
set conf(nologin)	%NOLOGIN%
set conf(log)		%LOG%

# scripts cgi
set conf(script-map)	bin/liste
set conf(script-liste)	bin/liste
set conf(script-edit)	bin/modif

# le champ discriminant pour la suite
set conf(form)		{
	{action		1 1}
}

# les champs utilisés pour chacune des actions
set conf(form-modif-infos)	{
	{confirm	1 1}
	{idrr		1 1}
	{nom		1 1}
	{domaine	1 1}
	{mac		1 1}
	{iddhcpprofil	1 1}
	{hinfo		1 1}
	{droitsmtp	0 1}
	{ttl		1 1}
	{commentaire	1 1}
	{respnom	1 1}
	{respmel	1 1}
	{nextprog	1 1}
	{nextargs	1 1}
}

#
# Les outils du parfait concepteur de pages Web dynamiques...
#

lappend auto_path $conf(pkg)
package require webapp
package require pgsql

#
# On y va !
#

# ::webapp::cgidebug ; exit

source $conf(libdns)

##############################################################################
# Modification des informations
##############################################################################

# Historique
#   2002/05/03 : pda/jean : conception
#
proc traitemodif-infos {dbfd tc ft} {
    global conf
    upvar $ft ftab
    upvar $tc tabcor

    set login $tabcor(login)
    set idcor $tabcor(idcor)

    #
    # Valider les champs du formulaire
    #

    set idrr          [string trim [lindex $ftab(idrr) 0]]
    set nom           [string trim [lindex $ftab(nom) 0]]
    set domaine       [string trim [lindex $ftab(domaine) 0]]
    set mac           [string trim [lindex $ftab(mac) 0]]
    set iddhcpprofil  [string trim [lindex $ftab(iddhcpprofil) 0]]
    set hinfo         [string trim [lindex $ftab(hinfo) 0]]
    set droitsmtp     [string trim [lindex $ftab(droitsmtp) 0]]
    set ttl           [string trim [lindex $ftab(ttl) 0]]
    set commentaire   [string trim [lindex $ftab(commentaire) 0]]
    set respnom       [string trim [lindex $ftab(respnom) 0]]
    set respmel       [string trim [lindex $ftab(respmel) 0]]
    set confirm       [string trim [lindex $ftab(confirm) 0]]
    set nextprog      [string trim [lindex $ftab(nextprog) 0]]
    set nextargs      [string trim [lindex $ftab(nextargs) 0]]

    #
    # Vérifier l'idrr
    # Tester si l'idrr n'est pas un alias, et que le correspondant
    # est bien propriétaire de toutes les adresses associées au nom.
    #

    # tester la syntaxe du champ de formulaire qui nous est donné
    if {! [regexp {^\d+$} $idrr]} then {
	::webapp::error-exit $conf(err) "Erreur interne sur idrr"
    }
    if {! [lire-rr-par-id $dbfd $idrr trr]} then {
	::webapp::error-exit $conf(err) "Erreur de lecture de idrr"
    }
    # tester si la machine existe
    if {[string equal $trr(idrr) ""]} then {
	::webapp::error-exit $conf(err) "La machine d'id $idrr n'existe pas"
    }

    # tester les droits
    set m [valide-droit-nom $dbfd $idcor $trr(nom) $trr(domaine) trr "machine-existante"]
    if {! [string equal $m ""]} then {
	::webapp::error-exit $conf(err) "Erreur de droit sur idrr"
    }

    #
    # Vérifier le nouveau nom et le nouveau domaine
    #

    set m [syntaxe-nom $nom]
    if {[string length $m] > 0} then {
	::webapp::error-exit $conf(err) "Erreur sur le nom '$nom': $m"
    }
    set nom [string tolower $nom]

    set m [valide-droit-nom $dbfd $idcor $nom $domaine ntrr "machine"]
    if {! [string equal $m ""]} then {
	::webapp::error-exit $conf(err) \
		"Vous n'avez pas les droits sur $nom.$domaine"
    }
    if {$ntrr(idrr) != $idrr} then {
	#
	# Cas d'un nouveau nom de machine ou de domaine : il faut
	# vérifier que ce n'est pas une machine existante
	#
    	if {[info exists ntrr(ip)] && [llength $ntrr(ip)] > 0} then {
	    ::webapp::error-exit $conf(err) \
		    "La machine $nom.$domaine existe déjà"
	}
    }
    set iddom $ntrr(iddom)

    #
    # Vérifier la syntaxe de l'adresse MAC
    #

    if {! [string equal $mac ""]} then {
	set m [syntaxe-mac $dbfd $mac]
	if {[string length $m] > 0} then {
	    ::webapp::error-exit $conf(err) "Erreur sur l'adresse MAC : $m"
	}
    }

    #
    # Vérifier le profil DHCP
    #

    if {! [check-iddhcpprofil $dbfd $iddhcpprofil dhcpprofil msg]} then {
	::webapp::error-exit $conf(err) "Profil DHCP invalide ($msg)"
    }

    if {[string equal $mac ""] && $iddhcpprofil != 0} then {
	::webapp::error-exit $conf(err) \
		"Impossible de configurer un profil DHCP sans adresse MAC"
    }

    #
    # Récupérer le type de machine en clair
    #

    set idhinfo [lire-hinfo $dbfd $hinfo]
    if {$idhinfo == -1} then {
	::webapp::error-exit $conf(err) "Le type de machine '$hinfo' n'existe pas."
    }

    #
    # Vérifier le droit d'émission SMTP
    #

    set grdroitsmtp [droit-correspondant-smtp $dbfd $tabcor(idcor)]
    if {$grdroitsmtp} then {
	if {[string equal $droitsmtp ""]} then {
	    set droitsmtp 0
	} else {
	    set droitsmtp 1
	}
    } else {
	set droitsmtp 0
    }

    #
    # Vérifier le droit TTL
    #

    set grdroitttl [droit-correspondant-ttl $dbfd $tabcor(idcor)]
    if {$grdroitttl} then {
	if {[string equal $ttl ""]} then {
	    set ttl -1
	} else {
	    set msg [valide-ttl $ttl]
	    if {! [string equal $msg ""]} then {
		::webapp::error-exit $conf(err) $msg
	    }
	}
    } else {
	set ttl -1
    }

    #
    # Tester si la machine doit être ajoutée statiquement comme adresse DHCP
    #

    set m [valide-dhcp-statique $dbfd $mac $trr(ip)]
    if {! [string equal $m  ""]} then {
	::webapp::error-exit $conf(err) "$m.\nModification refusée"
    }

    #
    # Si le responsable n'est pas spécifié, mettre par défaut le
    # correspondant Tant pis pour lui.
    #

    if {[string equal $respnom ""] && [string equal $respmel ""]} then {
	set respnom "$tabcor(nom) $tabcor(prenom)"
	set respmel $tabcor(mel)
    }

    #
    # Demander confirmation s'il y a demande d'émission SMTP
    # (alors qu'il n'y en avait pas avant)
    #

    if {! $trr(droitsmtp) && $droitsmtp && ! [string equal $confirm "oui"]} then {
	#
	# Sortir une page de confirmation
	#

	set l {idrr nom domaine mac iddhcpprofil hinfo droitsmtp ttl
			commentaire respnom respmel nextprog nextargs}
	set hidden [::webapp::hide-parameters $l ftab]
	::webapp::send html [::webapp::file-subst $conf(page-modif-smtp) \
					[list \
						[list %HIDDEN% $hidden] \
					    ] \
				]
	return 0
    }

    #
    # Enregistrer les modifications
    #

    if {! [::pgsql::lock $dbfd {dns.rr} msg]} then {
	::webapp::error-exit $conf(err) "Transaction impossible : $msg"
    }

    if {! $grdroitsmtp} then {
	set droitsmtp $trr(droitsmtp)
    }
    if {! $grdroitttl} then {
	set ttl $trr(ttl)
    }

    if {[string equal $mac ""]} then {
	set qmac NULL
    } else {
	set qmac "'[::pgsql::quote $mac]'"
    }
    if {$iddhcpprofil == 0} then {
	set qiddhcpprofil NULL
    } else {
	set qiddhcpprofil $iddhcpprofil
    }
    if {$ttl == -1} then {
	set httl "(valeur par défaut de la zone)"
    } else {
	set httl $ttl
    }

    set qnom         [::pgsql::quote $nom]
    set qcommentaire [::pgsql::quote $commentaire]
    set qrespnom     [::pgsql::quote $respnom]
    set qrespmel     [::pgsql::quote $respmel]
    set sql "UPDATE rr SET
			    nom = '$qnom',
			    iddom = $iddom,
			    mac = $qmac,
			    iddhcpprofil = $qiddhcpprofil,
			    idhinfo = $idhinfo,
			    droitsmtp = $droitsmtp,
			    ttl = $ttl,
			    commentaire = '$qcommentaire',
			    respnom = '$qrespnom',
			    respmel = '$qrespmel'
			WHERE idrr = $trr(idrr)"
    if {! [::pgsql::execsql $dbfd $sql msg]} then {
       ::pgsql::unlock $dbfd "abort" m
	::webapp::error-exit $conf(err) "Impossible de mettre à jour : $msg"
    }

    set msg [touch-rr $dbfd $trr(idrr) $idcor]
    if {[string length $msg] > 0} then {
       ::pgsql::unlock $dbfd "abort" m
	::webapp::error-exit $conf(err) $msg
    }

    if {! [::pgsql::unlock $dbfd "commit" msg]} then {
       ::pgsql::unlock $dbfd "abort" m
       ::webapp::error-exit $conf(err) "L'insertion a échoué. Abandon.\n$msg"
    }

    #
    # Préparer la sortie du résultat
    #

    set commentaire [html-tab-string $commentaire]
    set respnom     [html-tab-string $respnom]
    set respmel     [html-tab-string $respmel]

    if {$droitsmtp} then {
	set droitsmtp "Oui"
    } else {
	set droitsmtp "Non"
    }

    #
    # Se rappeler du correspondant qui a affectué la modification
    #

    set m "modification de $trr(nom).$trr(domaine) :"
    foreach c {nom domaine mac dhcpprofil hinfo droitsmtp ttl commentaire respnom respmel} {
	append m " $c=[set $c]"
    }
    writelog "modifrr" $login $m

    #
    # Préparer la suite du parcours
    #

    switch -- $nextprog {
	map {
	    set suite "$conf(homeurl)/$conf(script-map)?format=carte&$nextargs"
	}
	list {
	    set suite "$conf(homeurl)/$conf(script-liste)?format=consulter&$nextargs"
	}
	default {
	    set suite "$conf(homeurl)/$conf(script-edit)"
	}
    }

    #
    # Sortie du résultat
    #

    ::webapp::send html [::webapp::file-subst $conf(page-modif-infos) \
				[list \
					[list %NOM% $nom] \
					[list %DOMAINE% $domaine] \
					[list %MAC% $mac] \
					[list %DHCPPROFIL% $dhcpprofil] \
					[list %HINFO% $hinfo] \
					[list %DROITSMTP% $droitsmtp] \
					[list %TTL% $httl] \
					[list %COMMENTAIRE% $commentaire] \
					[list %RESPNOM% $respnom] \
					[list %RESPMEL% $respmel] \
					[list %SUITE% $suite] \
				    ] \
			    ]

    return 0
}

##############################################################################
# Programme principal
##############################################################################

proc main {} {
    global conf

    #
    # Initialisation
    #

    init-dns $conf(nologin) $conf(auth) $conf(base) $conf(err) "" \
			$conf(form) ftab dbfd login tabcor $conf(log)

    #
    # Valider l'action, lire les autres champs du formulaire,
    # et faire le branchement
    #

    set action [lindex $ftab(action) 0]

    if {! [info exists conf(form-$action)]} then {
	::webapp::error-exit $conf(err) "Champ 'action' non conforme : $action"
    }

    if {[llength [::webapp::get-data ftab $conf(form-$action)]] == 0} then {
	::webapp::error-exit $conf(err) "Formulaire non conforme aux spécifications"
    }

    traite$action $dbfd tabcor ftab

    #
    # Déconnexion de la base
    #

    fermer-base $dbfd
}

::webapp::cgi-exec main %DEBUG%
