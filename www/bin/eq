#!%TCLSH%

#
# Script pour afficher la liste des équipements,
# ou les détails d'un équipement
#
# Appelé par : /applis/topo/<tous les scripts>
#
# Paramètres (formulaire ou URL) :
#	- eq : si fourni, nom (ou pattern glob) de l'équipement
#	- iface : si fourni, nom d'une interface à souligner
#
# Historique
#   2006/06/05 : pda      : création
#   2006/08/14 : pda      : fusion script listeq
#   2007/01/04 : pda      : ajout du paramètre uti
#   2007/01/11 : pda      : mutualisation initialisation
#   2007/01/11 : pda      : substitution possible d'un uid
#   2008/05/06 : pda      : ajout localisation
#

set conf(homeurl)	%HOMEURL%

#
# Chemins utilisés par les scripts
#

set conf(pkg)		%PKGTCL%
set conf(lib)		%DESTDIR%/lib
set conf(libdns)	%LIBDNS%
set conf(libtopo)	$conf(lib)/libtopo.tcl

#
# Définition des noms des pages "à trous"
#

set conf(err)		$conf(lib)/erreur.html
set conf(page1)		$conf(lib)/eq.html
set conf(pagen)		$conf(lib)/liste.html

#
# Quelques paramètres du script
#

set conf(base)		%BASE%
set conf(nologin)	%NOLOGIN%

set conf(form)	{
    {eq			0 1}
    {iface		0 1}
}

set conf(dumpgraph)	"%TOPODIR%/bin/dumpgraph %s < %GRAPH%"
set conf(extracteq)	"%TOPODIR%/bin/extracteq %s %s < %GRAPH%"
set conf(urlstat)	"$conf(homeurl)/bin/metro?id=%s%s"
set conf(urleq)		"$conf(homeurl)/bin/eq?eq=%s%s"
set conf(urleqiface)	"$conf(homeurl)/bin/eq?eq=%s&iface=%s%s"
set conf(urll2)		"$conf(homeurl)/bin/l2?eq=%s&iface=%s&vlan=%d%s"
set conf(urll3)		"$conf(homeurl)/bin/l3?addr=%s%s"

#
# Les fréquences radio
#

array set conf {
    freq:2412	1
    freq:2417	2
    freq:2422	3
    freq:2427	4
    freq:2432	5
    freq:2437	6
    freq:2442	7
    freq:2447	8
    freq:2452	9
    freq:2457	10
    freq:2462	11
}


#
# Les outils du parfait concepteur de pages Web dynamiques...
#

lappend auto_path $conf(pkg)
package require webapp
package require pgsql
package require arrgen

#
# Spécification du tableau pour l'affichage des points de collecte
# par réseau.
#

set conf(tabreseau) {
    global {
	chars {12 normal}
	align {left}
	botbar {yes}
	columns {100}
    }
    pattern Titre {
	vbar {yes}
	column {
	    align {center}
	    chars {14 bold}
	}
	vbar {yes}
    }
    pattern Normal {
	vbar {yes}
	column {
	    format {raw}
	}
	vbar {yes}
    }
}

#
# On y va !
#

# ::webapp::cgidebug ; exit

source $conf(libdns)
source $conf(libtopo)

##############################################################################
# Programme principal
##############################################################################

proc main {} {
    global conf

    #
    # Initialisation
    #

    init-topo $conf(nologin) $conf(base) $conf(err) "corresp" \
			$conf(form) ftab dbfd uid tabuid ouid tabouid urluid

    foreach f $conf(form) {
	set var [lindex $f 0]
	set $var [string trim [lindex [set $var] 0]]
    }

    set u1 ""
    set u2 ""
    if {! [string equal $urluid ""]} then {
	set u1 "&$urluid"
	set u2 "?$urluid"
    }

    #
    # Récupérer les informations lues dans le graphe
    #

    set cmd [format $conf(dumpgraph) $tabuid(flags)]
    set fd [open "|$cmd" "r"]
    while {[gets $fd ligne] > -1} {
	switch [lindex $ligne 0] {
	    eq {
		set nomeq  [lindex $ligne 1]
		if {[string equal $eq ""] || [string match -nocase $eq $nomeq]} then {
		    set type   [lindex $ligne 3]
		    set modele [lindex $ligne 5]
		    set tabeq($nomeq) [list $type $modele]
		}
	    }
	}
    }
    if {[catch {close $fd} msg]} then {
	::webapp::error-exit $conf(err) \
		"Erreur lors de la lecture des équipements (msg)"
    }

    #
    # S'il y a plusieurs équipements trouvés, les présenter
    # dans le bon ordre
    #

    switch [llength [array names tabeq]] {
	0 {
	    #
	    # Aucun équipement trouvé. Faire comme pour une liste, mais
	    # une liste vide ;-)
	    #

	    set liste "Aucun équipement trouvé"

	    #
	    # Sortie de la page
	    #

	    ::webapp::send html [::webapp::file-subst $conf(pagen) \
						[list \
							[list %OBJETS% "équipements"] \
							[list %LISTE%  $liste] \
							[list %EQ%     $eq] \
							[list %VLAN%   ""] \
							[list %ADDR%   ""] \
							[list %URLUID% $u2] \
						    ] \
					    ]
	}
	1 {
	    #
	    # Récupérer les informations lues dans le graphe
	    #

	    set nomeq [lindex [array names tabeq] 0]

	    set cmd [format $conf(extracteq) $tabuid(flags) $nomeq]
	    set fd [open "|$cmd" "r"]
	    while {[gets $fd ligne] > -1} {
		switch [lindex $ligne 0] {
		    eq {
			set nomeq    [lindex $ligne 1]
			set type     [lindex $ligne 2]
			set modele   [lindex $ligne 3]
			set location [lindex $ligne 4]
			set titre "Équipement $nomeq $type $modele"
			if {! [string equal $location "-"]} then {
			    set location [binary format H* $location]
			    append titre " (localisation $location)"
			}
		    }
		    iface {
			set if [lindex $ligne 1]
			set tabiface($if) $ligne
		    }
		}
	    }
	    close $fd

	    #
	    # Trier les interfaces pour les présenter dans le bon ordre
	    #

	    set iflist [lsort -command compare-interfaces \
					[array names tabiface] \
				    ]

	    #
	    # Mettre en forme toutes ces informations
	    #

	    set texte ""
	    foreach i $iflist {
		set txt ""
		set ligne $tabiface($i)

		set nom   [lindex $ligne 1]
		set radio [lindex $ligne 2]
		set stat  [lindex $ligne 3]
		set mode  [lindex $ligne 4]
		set lien  [lindex $ligne 5]
		set ligne [lreplace $ligne 0 5]


		if {[string equal $iface $nom]} then {
		    append txt [::webapp::helem "b" $nom]
		} else {
		    append txt "$nom"
		}

		if {[llength $radio] > 0} then {
		    set channel [lindex $radio 0]
		    set power   [lindex $radio 1]

		    if {[info exists conf(freq:$channel)]} then {
			set channel $conf(freq:$channel)
		    } else {
			set channel "$channel MHz"
		    }

		    append txt " (channel $channel power $power mW)"
		}

		if {! [string equal $stat "-"]} then {
		    set url [format $conf(urlstat) [::webapp::post-string $stat] $u1]
		    append txt " "
		    append txt [::webapp::helem "a" {[Trafic]} "href" $url]
		}

		append txt " $mode"

		if {[llength $lien] > 1} then {
		    set via [lindex $lien 0]
		    set eq2 [lindex $lien 1]
		    set if2 [lindex $lien 2]

		    set urleqiface [format $conf(urleqiface) $eq2 $if2 $u1]
		    append txt " $via vers "
		    append txt [::webapp::helem "a" "$eq2 $if2" "href" $urleqiface]
		}

		set nvlan [llength $ligne]
		foreach vlan [lsort -index 0 -integer $ligne] {
		    set vlanid [lindex $vlan 0]
		    set desc   [lindex $vlan 1]
		    if {[string equal $desc "-"]} then {
			set desc "pas de description"
		    } else {
			set desc [binary format H* $desc]
		    }
		    set stat   [lindex $vlan 2]

		    append txt "\n<BR>\n"

		    if {$nvlan > 1 || $vlanid != 0} then {
			set urll2 [format $conf(urll2) $nomeq $i $vlanid $u1]
			append txt "Vlan "
			append txt [::webapp::helem "a" "$vlanid ($desc)" \
						"href" $urll2]

			if {! [string equal $stat "-"]} then {
			    set url [format $conf(urlstat) $stat $u1]
			    append txt " "
			    append txt [::webapp::helem "a" {[Trafic]} \
						"href" $url]
			}
		    }

		    foreach ip [lsort [lindex $vlan 3]] {
			set urll3 [format $conf(urll3) $ip $u1]
			append txt " "
			append txt [::webapp::helem "a" $ip "href" $urll3]
		    }
		}
		append texte [::webapp::helem "li" [::webapp::helem "p" $txt]]
	    }
	    set texte [::webapp::helem "ul" $texte]

	    #
	    # Sortie de la page
	    #

	    ::webapp::send html [::webapp::file-subst $conf(page1) \
						[list \
							[list %TITRE% $titre] \
							[list %TEXTE% $texte] \
							[list %EQ%    $eq] \
							[list %VLAN%  ""] \
							[list %ADDR%  ""] \
							[list %URLUID% $u2] \
						    ] \
					    ]
	}
	default {
	    #
	    # Trier les équipements pour les présenter dans le bon ordre
	    #

	    set liste ""
	    foreach e [lsort [array names tabeq]] {
		set type   [lindex $tabeq($e) 0]
		set modele [lindex $tabeq($e) 1]
		set url [format $conf(urleq) $e $u1]

		set lien [::webapp::helem "a" $e "href" $url]
		append liste [::webapp::helem "li" "$lien $type $modele"]
	    }
	    set liste [::webapp::helem "ul" $liste]

	    #
	    # Sortie de la page
	    #

	    ::webapp::send html [::webapp::file-subst $conf(pagen) \
						[list \
							[list %OBJETS% "équipements"] \
							[list %LISTE%  $liste] \
							[list %EQ%     $eq] \
							[list %VLAN%   ""] \
							[list %ADDR%   ""] \
							[list %URLUID% $u2] \
						    ] \
					    ]
	}
    }

    #
    # Déconnexion de la base
    #

    fermer-base $dbfd
}

::webapp::cgi-exec main %DEBUG%
