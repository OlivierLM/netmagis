#!%TCLSH%

#
# Delete host, IP address or alias
#
# Called by: suppr
#
# Parameters (form or url):
#   - display page
#	- action : (empty)
#   - name removal
#	- action : "del-name"
#	- confirm : "no" or "yes" (if confirm ok)
#	- nom : name of object to delete
#	- domaine : domain of object to delete
#   - IP address removal
#	- action : "del-ip"
#	- confirm : "no" or "yes" (if confirm ok)
#	- adr: IP address
#
# History
#   2002/04/11 : pda/jean : design
#   2002/05/03 : pda/jean : split 3 modification types
#   2002/07/09 : pda      : add nologin
#   2003/05/13 : pda/jean : use auth base
#   2004/01/14 : pda/jean : add IPv6
#   2004/08/05 : pda/jean : add mac
#   2005/04/08 : pda/jean : add dhcpprofil
#   2007/10/25 : jean     : log modify actions
#   2008/07/24 : pda/jean : add droitsmtp
#   2008/07/29 : pda      : use display-rr
#   2010/10/15 : pda      : add journey
#   2010/12/14 : pda      : i18n
#   2010/12/25 : pda      : use cgi-dispatch
#

#
# Template pages used by this script
#

set conf(page)		del-sel.html
set conf(page-name)	del-name.html
set conf(page-alias)	del-alias.html
set conf(page-oneip)	del-ip1.html
set conf(page-obj)	del-ipobj.html
set conf(page-ok)	del-ok.html

#
# Next actions
# 

set conf(next)		"del"
set conf(nextmap)	"net"
set conf(nextlist)	"net"
set conf(nextipinact)	"ipinact"

#
# Netmagis general library
#

source %LIBDNS%

# ::webapp::cgidebug ; exit

##############################################################################
# Display page
##############################################################################

d cgi-register {action {}} {
} {
    global conf

    #
    # Get domains authorized for the user
    #

    set domain [menu-domain $dbfd $tabuid(idcor) "domaine" "" ""]

    #
    # End of script: output page and close database
    #

    d urlset "%URLFORM%" $conf(next) {}
    d result $conf(page) [list \
				[list %DOMAINE% $domain] \
			    ]
}

##############################################################################
# Name removal
##############################################################################

# History
#   2002/04/19 : pda/jean : design
#

d cgi-register {action del-name} {
    {confirm	1 1}
    {nom	1 1}
    {domaine	1 1}
} {
    global conf

    set fqdn "$nom.$domaine"

    #
    # Get dns update interval
    #

    set interval [dnsconfig get "dnsupdateperiod"]

    #
    # Check name
    #

    set msg [check-authorized-host $dbfd $tabuid(idcor) $nom $domaine trr "del-name"]
    if {$msg ne ""} then {
	d error $msg
    }

    #
    # Check that name exists
    #

    if {$trr(idrr) eq ""} then {
	d error [mc "Name '%s' does not exist" $fqdn]
    }

    #
    # Is it an alias?
    #

    if {$trr(cname) eq ""} then {
	set alias 0

	#
	# It is not an alias, there must be at least an IP address
	#
	if {$trr(ip) eq ""} then {
	    d error [mc "Name '%s' is not a host" $fqdn]
	}

    } else {
	set alias 1

	#
	# It is an alias. Read informations to display a confirmation page.
	#
	if {! [read-rr-by-id $dbfd $trr(cname) trrref]} then {
	    d error [mc "Internal error: object pointed by alias is not found"]
	}
    }

    #
    # Ask for confirmation if needed
    #

    if {$confirm ne "yes"} then {
	#
	# Confirmation needed
	#

	d urlset "%URLFORM%" $conf(next) {}
	d urladdnext "%URLFORM%"

	if {$alias} then {
	    #
	    # Confirmation page for an alias
	    #
	    d result $conf(page-alias) [list \
					[list %NOM% $nom] \
					[list %DOMAINE% $domaine] \
					[list %NOMREF% $trrref(nom)] \
					[list %DOMAINEREF% $trrref(domaine)] \
				    ]
	} else {
	    #
	    # Confirmation page for a host
	    #
	    set host [display-rr $dbfd -1 trr]
	    d result $conf(page-name) [list \
					[list %NOM% $nom] \
					[list %DOMAINE% $domaine] \
					[list %MACHINE% $host] \
				    ]
	}
    } else {
	#
	# Confirmation is accepted. Do the removal.
	#
	d dblock {}

	if {$alias} then {
	    if {! [del-alias-by-id $dbfd $trr(idrr) msg]} then {
		d dbabort [mc "delete %s" $fqdn] $msg
	    }

	    set p "$trrref(nom).$trrref(domaine)"
	    set logevt "delalias"
	    set logmsg "delete alias $fqdn -> $p"
	} else {
	    #
	    # This is not an alias: delete all RR dependancies:
	    # - aliases pointing this object
	    # - MX
	    # - IP addresses
	    #
	    if {! [del-rr-and-dependancies $dbfd trr msg]} then {
		d dbabort [mc "delete %s" $fqdn] $msg
	    }
	    set logevt "delname"
	    set logmsg "delete all of $nom.$domaine"
	}

	d dbcommit [mc "delete %s" $fqdn]
	d writelog $logevt $logmsg

	#
	# Prepare next step in journey
	#

	switch -- [d nextprog] {
	    map {
		d urlset "%URLSUITE%" $conf(nextmap) [list {domap {yes}} [d nextargs]]
	    }
	    list {
		d urlset "%URLSUITE%" $conf(nextlist) [list {dolist {yes}} [d nextargs]]
	    }
	    default {
		d urlset "%URLSUITE%" $conf(next) {}
	    }
	}

	#
	# End of script: output page and close database
	#

	d result $conf(page-ok) [list \
						[list %OBJET% $fqdn] \
						[list %INTERVAL% $interval] \
			    ]
    }
}

##############################################################################
# IP address removal
##############################################################################

# History
#   2002/04/23 : pda/jean : design
#   2002/04/26 : pda/jean : design end
#   2002/05/03 : pda/jean : keep a log of modification
#

d cgi-register {action del-ip} {
    {confirm	1 1}
    {adr	1 1}
} {
    global conf

    #
    # Get dns update interval
    #

    set interval [dnsconfig get "dnsupdateperiod"]

    #
    # Check IP address
    #

    set msg [check-ip-syntax $dbfd $adr "inet"]
    if {$msg ne ""} then {
	d error $msg
    }
    if {! [check-authorized-ip $dbfd $tabuid(idcor) $adr]} then {
	d error [mc "You don't have rights on '%s'" $adr]
    }

    #
    # Check that this address exists and get all stored informations
    #

    if {! [read-rr-by-ip $dbfd $adr trr]} then {
	d error [mc "Address '%s' not found" $adr]
    }

    #
    # Check access to this name
    #

    set nom     $trr(nom)
    set domaine $trr(domaine)
    set msg [check-authorized-host $dbfd $tabuid(idcor) $nom $domaine bidon "del-name"]
    if {$msg ne ""} then {
	d error $msg
    }
    set fqdn "$nom.$domaine"

    #
    # Is it the last IP address?
    #

    if {[llength $trr(ip)] == 1} then {
	set lastadr "yes"
    } else {
	set lastadr "no"
    }

    #
    # Prepare display of informations, if needed
    #

    set objet ""
    set host [display-rr $dbfd -1 trr]

    #
    # Remove only if confirmation is ok
    #

    if {$confirm eq "yes"} then {
	#
	# Proceed to removal
	#

	d dblock {}

	if {! $lastadr} then {
	    #
	    # Only delete an IP address
	    #

	    set sql "DELETE FROM dns.rr_ip WHERE adr = '$adr'"
	    if {! [::pgsql::execsql $dbfd $sql msg]} then {
		d dbabort [mc "delete %s" $adr] $msg
	    }
	    set msg [touch-rr $dbfd $trr(idrr)]
	    if {$msg ne ""} then {
		d dbabort [mc "modify %s" [mc "RR"]] $msg
	    }

	    set logevt "deladdr"
	    set logmsg "delete address $adr from $fqdn"

	} else {
	    #
	    # Delete the whole object
	    #

	    if {! [del-rr-and-dependancies $dbfd trr msg]} then {
		d dbabort [mc "delete %s" $fqdn] $msg
	    }

	    set logevt "deladr"
	    set logmsg "delete address $adr -> delete all $fqdn"
	}

	d dbcommit [mc "delete %s" $adr]
	d writelog $logevt $logmsg
    }

    #
    # Prepare next step in journey
    #

    switch -- [d nextprog] {
	map {
	    d urlset "%URLSUITE%" $conf(nextmap) [list {domap {yes}} [d nextargs]]
	}
	list {
	    d urlset "%URLSUITE%" $conf(nextlist) [list {dolist {yes}} [d nextargs]]
	}
	ipinact {
	    d urlset "%URLSUITE%" $conf(nextipinact) [list [d nextargs]]
	}
	default {
	    d urlset "%URLSUITE%" $conf(next) {}
	}
    }

    #
    # Prepare page display
    #

    d urlset "%URLFORM%" $conf(next) {}

    switch -- "confirm=$confirm-lastadr=$lastadr" {
	confirm=no-lastadr=no {
	    #
	    # Ask for confirmation to remove one of the IP addresses
	    # 
	    set page $conf(page-oneip)
	    d urladdnext "%URLFORM%"
	}
	confirm=no-lastadr=yes {
	    #
	    # Ask for confirmation to remove the last IP address, and thus
	    # of the whole object.
	    # 
	    set page $conf(page-obj)
	    d urladdnext "%URLFORM%"
	}
	confirm=yes-lastadr=no {
	    #
	    # Address has been removed
	    #
	    set page $conf(page-ok)
	    set objet $adr
	}
	confirm=yes-lastadr=yes {
	    #
	    # The whole object has been removed
	    #
	    set page $conf(page-ok)
	    set objet "$nom.$domaine"
	}
	default {
	    d error [mc "Internal error: impossible case '%s'" "confirm=$confirm, lastadr=$lastadr"]
	}
    }

    d result $page [list \
			[list %NOM%         $nom] \
			[list %DOMAINE%     $domaine] \
			[list %ADR%         $adr] \
			[list %MACHINE%     $host] \
			[list %OBJET%       $objet] \
			[list %INTERVAL%    $interval] \
		    ]
}

##############################################################################
# Main procedure
##############################################################################

d cgi-dispatch "dns" ""
