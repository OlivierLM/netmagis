#!%TCLSH%

#
# Delete host, IP address or alias
#
# Called by: suppr
#
# Parameters (form or url):
#   - display page
#   - name or IP address removal
#	- action : "del"
#	- name & domain : name and domain of object to remove
#	- addr : IP address to remove or FQDN
#		(addr is exclusive with name & domain)
#	- idviews : selected (after confirmation) views
#
# Note:
#   If script is called for the first time, addr & name & domain are
#	empty, so the script display the selection page
#   When user inputs either a name&domain, or an addr (which may also
#	be a fqdn), all found objects (in all views) are presented
#	for confirmation
#   When some objets are selected (idviews is not empty), removal is
#	performed
#
# History
#   2002/04/11 : pda/jean : design
#   2002/05/03 : pda/jean : split 3 modification types
#   2002/07/09 : pda      : add nologin
#   2003/05/13 : pda/jean : use auth base
#   2004/01/14 : pda/jean : add IPv6
#   2004/08/05 : pda/jean : add mac
#   2005/04/08 : pda/jean : add dhcpprofil
#   2007/10/25 : jean     : log modify actions
#   2008/07/24 : pda/jean : add droitsmtp
#   2008/07/29 : pda      : use display-rr
#   2010/10/15 : pda      : add journey
#   2010/12/14 : pda      : i18n
#   2010/12/25 : pda      : use cgi-dispatch
#   2012/11/13 : pda/jean : add views
#   2012/11/14 : pda/jean : merge name and ip cases
#

#
# Template pages used by this script
#

set conf(page-sel)	del-sel.html
set conf(page-confirm)	del-confirm.html
set conf(page-ok)	del-ok.html

#
# Next actions
# 

set conf(next)		"del"
set conf(nextmap)	"net"
set conf(nextlist)	"net"
set conf(nextipinact)	"ipinact"

#
# Script parameters
#

set conf(tab-confirm) {
    global {
	chars {10 normal}
	columns {5 10 85}
	align {left}
	botbar {no}
    }
    pattern Line {
	vbar {no}
	column {
	    format {raw}
	}
	vbar {no}
	column {
	    format {raw}
	}
	vbar {no}
	column {
	    format {raw}
	}
	vbar {no}
    }
}

#
# Netmagis general library
#

source %LIBNETMAGIS%

# ::webapp::cgidebug ; exit

##############################################################################
# Ask for confirmation
##############################################################################

# mode : "addr" or "fqdn"
# object : ip address for "addr" mode, or fqdn for "fqdn" mode

proc confirm {dbfd mode object nok idviews _checkedviews} {
    upvar $_checkedviews checkedviews
    global conf

    # display checkbutton for view only if there is more than a single view
    set dispconfview [expr $nok > 1]

    # terrible hack
    set empty [::webapp::helem "span" "" "style" "display:none"]

    set lines {}
    foreach idview $idviews {
	lassign $checkedviews($idview) vn msg t

	set descid "hv$idview"
	set buttid "bv$idview"
	set desc ""

	array unset trr
	array set trr $t

	if {$msg ne ""} then {
	    #
	    # Error message
	    #
	    set check ""
	    set host [::webapp::html-string $msg]
	} else {
	    set desc [display-rr $dbfd -1 trr $idview]
	    set fqdn [::webapp::helem "a" "$trr(nom).$trr(domaine)" \
				"href" "#" "onclick" "invdisp('$descid')" \
				]
	    if {$mode eq "fqdn"} then {
		#
		# Information about host found
		#

		set cname [rr-cname-by-view trr $idview]
		if {$cname eq ""} then {
		    # This is not an alias
		    set host [mc "Remove host '%s'" $fqdn]
		} else {
		    # This is an alias, display informations about target host
		    set host [mc "Remove alias '%s'" $fqdn]
		}
	    } else {
		#
		# Information about IP address found.
		# Is it the last IP address?
		#

		set lip [rr-ip-by-view trr $idview]
		if {[llength $lip] == 1} then {
		    set host [mc "Remove host '%s'" $fqdn]
		} else {
		    set host [mc {Remove IP address '%1$s' from host '%2$s'} $object $fqdn]
		}
	    }

	    #
	    # View name and check box
	    #

	    if {$dispconfview} then {
		set c ""
	    } else {
		set c " CHECKED"
	    }
	    set check "<INPUT TYPE=CHECKBOX NAME=\"idviews\" ID=\"$buttid\" VALUE=\"$idview\" $c>"

	    set vn [::webapp::helem "label" $vn "for" $buttid]
	}
	lappend lines [list Line $check $vn $host]
	set desc [::webapp::helem "span" $desc \
				    "id" "$descid" \
				    "style" "display:none" \
				]
	lappend lines [list Line $empty $empty $desc]
    }

    set seldel [::arrgen::output "html" $conf(tab-confirm) $lines]

    #
    # Other parameters
    #

    set hidden [::webapp::form-hidden "addr" $object]

    #
    # Confirmation needed
    #

    d urlset "%URLFORM%" $conf(next) {}
    d urladdnext "%URLFORM%"

    d result $conf(page-confirm) [list \
					[list %OBJECT% $object] \
					[list %SELDEL% $seldel] \
					[list %HIDDEN% $hidden] \
				    ]
}

##############################################################################
# Process removal
##############################################################################

# mode : "addr" or "fqdn"
# object : ip address for "addr" mode, or fqdn for "fqdn" mode

proc remove {dbfd mode object idviews _checkedviews} {
    global conf
    upvar $_checkedviews checkedviews

    #
    # Confirmation is accepted. All view ids have been checked.
    # Do the removal.
    #

    d dblock {}

    set log {}
    set result {}

    foreach idview $idviews {
	lassign $checkedviews($idview) vn msg t

	array unset trr
	array set trr $t

	set o $object

	if {$mode eq "fqdn"} then {
	    set cname [rr-cname-by-view trr $idview]
	    if {$cname ne ""} then {
		if {! [del-alias-by-id $dbfd $trr(idrr) $idview msg]} then {
		    d dbabort [mc "delete %s" $object/$vn] $msg
		}

		set p "?"
		if {[read-rr-by-id $dbfd $cname tc]} then {
		    set p "$tc(nom).$tc(domaine)"
		}
		lappend log [list "delalias" "delete alias $object/$vn -> $p"]
	    } else {
		#
		# This is not an alias: delete all RR dependancies:
		# - aliases pointing this object
		# - MX
		# - IP addresses
		#
		if {! [del-rr-and-dependancies $dbfd trr $idview msg]} then {
		    d dbabort [mc "delete %s" $object/$vn] $msg
		}
		lappend log [list "delname" "delete all of $object/$vn"]
	    }
	} else {
	    set fqdn "$trr(nom).$trr(domaine)"
	    set lip [rr-ip-by-view trr $idview]
	    if {[llength $lip] > 1} then {
		#
		# Only delete one of these addresses
		#

		if {! [del-one-ip-address $dbfd $object $idview msg]} then {
		    d dbabort [mc "delete %s" $object/$vn] $msg
		}
		set msg [touch-rr $dbfd $trr(idrr)]
		if {$msg ne ""} then {
		    d dbabort [mc "modify %s" [mc "RR"]/$vn] $msg
		}
		lappend log [list "deladdr" "delete address $object from $fqdn/$vn"]
	    } else {
		#
		# Delete the whole object
		#

		if {! [del-rr-and-dependancies $dbfd trr $idview msg]} then {
		    d dbabort [mc "delete %s" $object/$vn] $msg
		}
		lappend log [list "deladdr" "delete address $object -> delete all $fqdn/$vn"]
		set o $fqdn
	    }
	}
	lappend result [mc {'%1$s' has been removed from view '%2$s'} $o $vn]
    }

    d dbcommit [mc "delete %s" $object]

    #
    # Leave a trace
    #

    foreach l $log {
	lassign $l logevt logmsg
	d writelog $logevt $logmsg
    }

    #
    # Prepare next step in journey
    #

    switch -- [d nextprog] {
	map {
	    d urlset "%URLSUITE%" $conf(nextmap) [list {domap {yes}} [d nextargs]]
	}
	list {
	    d urlset "%URLSUITE%" $conf(nextlist) [list {dolist {yes}} [d nextargs]]
	}
	ipinact {
	    d urlset "%URLSUITE%" $conf(nextipinact) [list [d nextargs]]
	}
	default {
	    d urlset "%URLSUITE%" $conf(next) {}
	}
    }

    #
    # End of script: output page and close database
    #

    set result [join $result "<br>"]

    d result $conf(page-ok) [list \
				    [list %RESULT% $result] \
			]
}

##############################################################################
# CGI script
##############################################################################

# History
#   2002/04/19 : pda/jean : design
#

d cgi-register {} {
    {addr	0 1}
    {name	0 1}
    {domain	0 1}
    {idviews	0 9999}
} {
    global conf

    #
    # Display the selection page if no parameter is given
    #

    if {$addr eq "" && $name eq "" && $domain eq ""} then {
	#
	# Get domains authorized for the user
	#

	set domain [menu-domain $dbfd $tabuid(idcor) "domain" "" ""]

	#
	# End of script: output page and close database
	#

	d urlset "%URLFORM%" $conf(next) {}
	d result $conf(page-sel) [list \
				    [list %DOMAIN% $domain] \
				]
	return 0
    }

    #
    # Addr and name/iddom are mutually exclusive
    #

    if {$addr ne "" && ($name ne "" || $domain ne "")} then {
	d error [mc "Invalid input"]
    }

    #
    # Check wether it is an address (which may be a FQDN) or name+domain
    #

    if {$addr ne ""} then {
	set object $addr
	set msg [check-ip-syntax $dbfd $addr "inet"]
	if {$msg ne ""} then {
	    #
	    # This is not an IP address. It is perhaps a FQDN
	    #
	    set msg [check-fqdn-syntax $dbfd $addr name domain]
	    if {$msg ne ""} then {
		d error $msg
	    }
	    set addr ""
	} else {
	    #
	    # This is an IP address. Check it.
	    #
	    if {! [check-authorized-ip $dbfd $tabuid(idcor) $addr]} then {
		d error [mc "You don't have rights on '%s'" $adr]
	    }
	}
    } else {
	# Check that name is not empty, or wrong domain
	set msg [check-fqdn-syntax $dbfd "$name.$domain" name domain]
	if {$msg ne ""} then {
	    d error $msg
	}
    }

    #
    # Identify proprer mode for later usage
    #

    if {$addr eq ""} then {
	set mode "fqdn"
	set object "$name.$domain"
    } else {
	set mode "addr"
	set object $addr
    }

    #
    # Are views selected? If so, this is a confirmation
    #

    set confirm [llength $idviews]
    if {! $confirm} then {
	#
	# We must check all our views in order to search deletion
	# candidates
	#
	set myviewids [u myviewids]
	if {[llength $myviewids] == 0} then {
	    d error "Sorry, but you do not have access to any view"
	}
    } else {
	#
	# User has selected one or more views. This is a confirmation.
	# 
	set myviewids $idviews
    }

    #
    # Check object in all views
    #

    set nok 0
    set nerr 0
    set mvi {}
    foreach idview $myviewids {
	set v [list $idview]
	set vn [u viewname $idview]

	set found 0
	set err 0

	if {$mode eq "fqdn"} then {
	    #
	    # FQDN
	    #

	    set found 1
	    set msg [check-authorized-host $dbfd $tabuid(idcor) $name $domain $v trr "del-name"]

	    if {$msg ne ""} then {
		set err 1
	    } else {
		#
		# Is it an alias in this view?
		#

		set cname [rr-cname-by-view trr $idview]
		if {$cname eq ""} then {
		    #
		    # It is not an alias, there must be at least an IP address
		    #
		    set ip [rr-ip-by-view trr $idview]
		    if {$ip eq ""} then {
			set msg [mc {Name '%1$s' is not a host in view '%2$s'} $object $vn]
			set err 1
		    }

		}
	    }
	} else {
	    #
	    # IP address. Check that this address exists and get
	    # all stored informations
	    #

	    if {[read-rr-by-ip $dbfd $addr $idview trr]} then {
		#
		# Check access to this name
		#

		set found 1
		set name   $trr(nom)
		set domain $trr(domaine)
		set msg [check-authorized-host $dbfd $tabuid(idcor) $name $domain $v bidon "del-name"]
		if {$msg ne ""} then {
		    set err 1
		}
	    }
	}

	if {$found} then {
	    if {$err} then {
		set checkedviews($idview) [list $vn $msg [array get trr]]
		incr nerr
	    } else {
		set checkedviews($idview) [list $vn "" [array get trr]]
		incr nok
	    }
	    lappend mvi $idview
	}
    }
    set myviewids $mvi

    #
    # If asked for a name, check that name exists
    #

    if {$mode eq "fqdn" eq "" && $trr(idrr) eq ""} then {
	d error [mc "Name '%s' does not exist" $object]
    }

    if {$mode eq "$addr" ne "" && $nok + $nerr == 0} then {
	d error [mc "Address '%s' not found" $object]
    }

    #
    # Check that :
    # - there is at least one view in which we can delete a name
    # - there is no view in error, if this is a confirmation
    #

    if {$nok == 0 || ($confirm && $nerr > 0)} then {
	set msg ""
	foreach idview $myviewids {
	    lassign $checkedviews($idview) vn m t
	    if {$m ne ""} then {
		append msg [mc {Error detected in view '%1$s': %2$s} $vn $m]
		append msg "\n"
	    }
	}
	d error $msg
    }

    #
    # At this point, myviewids contains:
    # - all user's view ids (good and in error) if confirmation is needed
    # - only good view ids if user has already confirmed
    # Views which do not include the searched IP address are not in myviewids
    #


    #
    # Ask for confirmation if needed
    #

    if {! $confirm} then {
	confirm $dbfd $mode $object $nok $myviewids checkedviews
    } else {
	remove $dbfd $mode $object $myviewids checkedviews
    }
}

##############################################################################
# Main procedure
##############################################################################

d cgi-dispatch "dns" ""
