#!%TCLSH%

#
# Search for a name or an IP/MAC address and display all sessions
#
# History
#   2004/11/14 : jean     : design
#   2005/06/04 : jean     : search optimization (gen-ipmac and gen-portmac)
#			    remove SQL joints, 2 requests and tcl processing
#   2010/11/30 : pda/jean : integration a Netmagis
#   2010/12/12 : pda      : i18n
#   2010/12/26 : pda      : use cgi-dispatch
#

#
# Template pages used by this script
#

set conf(page)          mac.html
set conf(pagesearch)	macsearch.html

#
# Next actions
#

set conf(next)		"mac"

#
# Script parameters
#

set conf(tabsession) {
    global {
        chars {12 normal}
        align {left}
        botbar {yes}
        columns {15 35 15 35}
    }   
    pattern Title {
        vbar {yes}
        column { 
            multicolumn {4}
            align {center}
            chars {14 bold}
        }
        vbar {yes}
    }
    pattern Rem {
        vbar {yes}
        column { 
            multicolumn {4}
            align {center}
            chars {14}
        }
        vbar {yes}
    }
    pattern Close {
        vbar {yes}
        column {
            multicolumn {2}
        }   
        vbar {yes} 
        column {
            multicolumn {2}
        }   
        vbar {yes}
    }
    pattern Active {
        vbar {yes}
        column {
            multicolumn {2}
            chars {bold}
        }
        vbar {yes}
        column {
            multicolumn {2}
            chars {bold}
        }   
        vbar {yes}
    }   
    pattern Info {
        vbar {yes}
        column {
	}
        vbar {yes}
        column {
            multicolumn {3}
            chars {bold}
	    format {raw}
        }
        vbar {yes}
    }
}

set conf(tabmenuipmac) {
    global {
        chars {12 normal}
        align {left}
        botbar {yes}
        columns {12 48 15 25}
    }   
    pattern Data {
        vbar {yes}
        column {
	    format {raw}
	}
        vbar {yes}
        column { 
	    format {raw}
	}
        vbar {yes}
        column {
	    format {raw}
	}
        vbar {yes} 
        column { }
        vbar {yes}
    }
    pattern Title {
        vbar {yes}
        column { 
            chars {bold}
	}
        vbar {yes}
        column { 
            chars {bold}
	}
        vbar {yes}
        column {
            chars {bold}
        }
        vbar {yes} 
        column {
            chars {bold}
        }
        vbar {yes}
    }
}

set conf(tabmenuportmac) {
    global {
        chars {12 normal}
        align {left}
        botbar {yes}
        columns {5 5 10 10 25 25}
    }   
    pattern Data {
        vbar {yes}
        column {
	    format {raw}
	}
        vbar {yes}
        column { 
	    format {raw}
	}
        vbar {yes}
        column {
	    format {raw}
	}
        vbar {yes} 
        column {
	}
        vbar {yes}
        column {
	    format {raw}
	}
        vbar {yes}
        column {
	}
        vbar {yes}
    }
    pattern Title {
        vbar {yes}
        column { 
            chars {bold}
	}
        vbar {yes}
        column { 
            chars {bold}
	}
        vbar {yes}
        column { 
            chars {bold}
	}
        vbar {yes}
        column {
            chars {bold}
        }
        vbar {yes} 
        column {
            chars {bold}
        }
        vbar {yes}
        column {
            chars {bold}
        }
        vbar {yes}
    }
}

#
# Script parameters
#

set conf(sqldateformat) {'DD/MM/YYYY HH24:MI:SS'}
set conf(clockformat)   {%d/%m/%Y %H:%M:%S}

#
# Netmagis general library
#

source %LIBDNS%

# ::webapp::cgidebug ; exit

##############################################################################
# Utility functions
##############################################################################

#
# Guess parameter type
#
# Input: 
#   - dbfd : database handle
#   - param : parameter given by the user
#   - _msg : in return, error message
# Output:
#   - return value: empty list (error) or list {type param} where
#	- type = "ip", "nom", "mac", "idipmac", ... 
#	- param = canonical representation of parameter
#   - msg : empty string or error message
#

proc guess-type {dbfd param _msg} {
    upvar $_msg msg

    set type ""
    set msg  ""

    if {[regexp {^[0-9a-f]{1,2}(:[0-9a-f]{1,2}){5}$} $param]} then {
	# MAC address
	set type "mac"
    } elseif {[regexp {^[0-9a-f]{4}(.[0-9a-f]{4}){2}$} $param]} then {
	# MAC address with Cisco format (00AB.1234.5678)
	set n {([0-9a-f]{2})}
	regsub  "^$n$n.$n$n.$n$n" $param {\1:\2:\3:\4:\5:\6} param
	set type "mac"
    } elseif {[regexp {^idportmac:([0-9]+)$} $param bidon idportmac]} then {
        # ID portmac
	set type "idportmac"
	set param $idportmac
    } elseif {[regexp {^idipmac:([0-9]+)$} $param bidon idipmac]} then {
        # ID ipmac
	set type "idipmac"
	set param $idipmac
    } elseif {[regexp {^eq:([a-z0-9\-.]+)$} $param bidon eq]} then {
        # By equipment
	set type "equipement"
	set param $eq
    } elseif {[regexp {^vlan:([a-z0-9\-.]+)$} $param bidon vlan]} then {
        # By VLAN
	set type "vlan"
	set param $vlan
    } elseif {[regexp {^([0-9.]+|[0-9a-f:.]+)$} $param]} then {
	# IP Address
        set msg [check-ip-syntax $dbfd $param "inet"]
        if {$msg eq ""} then {
  	    set type "ip"
	} else {
	    return {}
	}
    } elseif {[regexp {^[a-z0-9\-.]+$} $param]} then {
        # Nom
	set type "nom"
    } else {
	# Other
	set msg [mc "Invalid search string '%s'" $param]
	return {}
    }

    return [list $type $param]
}

#
# Display an HTML result with search result
#
# Input:
#   - dbfd : database handle
#   - type : search type (ip, mac, etc.)
#   - param : search criterion
# Output:
#   - return value : HTML code
#

proc html-result {dbfd type param} {
    set tab ""
    switch $type {
	nom {
	    set lip [resolve "nom" $param]
	    foreach ip $lip {
		append tab [gen-ipmac $dbfd $ip ""]
	    }
	}
	ip {
	    append tab [gen-ipmac $dbfd $param ""]
	}
	idipmac {
	    append tab [gen-idipmac-session $dbfd $param]
	}
	idportmac {
	    append tab [gen-idportmac-session $dbfd $param]
	}
	equipement {
	    append tab [gen-eq $dbfd $param]
	}
	vlan {
	    append tab [gen-vlan $dbfd $param]
	}
	mac {
	    append tab [gen-ipmac $dbfd "" $param]
 	    append tab [gen-mac $dbfd $param]
	}
	default {
	    d error [mc "Internal error: invalid parameter type '%s'" $type]
	}
    }
    return $tab
}

#
# Display an ipmac session
# Input:
#      idipmac : couple ip-mac identifier
#

proc gen-idipmac-session {dbfd idipmac} {
    global conf

    #
    # Find IP and MAC addresses
    #

    set ip ""
    set mac ""
    pg_select $dbfd "SELECT ip, mac FROM ipmac WHERE idipmac = $idipmac" tab {
	set ip $tab(ip)
	set mac $tab(mac)
    }
    if {$ip eq ""} then {
	return [mc "IP-MAC identifier '%s' not found" $idipmac]
    }

    set lines {}

    set dnsname [resolve "ip" $ip]

    set lienip [gen-link [display-ip $ip $dnsname] $ip]
    lappend lines [list Info [mc "IP address"] $lienip]

    lappend lines [list Info [mc "MAC address"] \
			[gen-link [display-mac $dbfd $mac] $mac] \
		    ]

    #
    # Display sessions
    #

    set found 0
    set sql "SELECT  to_char(debut,$conf(sqldateformat)) AS ddebut,
			to_char(fin,$conf(sqldateformat)) AS dfin,
			close
		FROM sessionipmac
		WHERE idipmac = '$idipmac'
		ORDER BY debut DESC"
    pg_select $dbfd $sql tab2 {
	if {$tab2(close)} then { set pat "Close" } else { set pat "Active" }
	if {$found == 0} then {
	    lappend lines [list Active [mc "Start"] [mc "End"]]
	    set found 1
	}
	lappend lines [list $pat $tab2(ddebut) $tab2(dfin)]
    }

    if {$found == 0} then {
	lappend lines [list Rem [mc "No IP-MAC session found"]]
    }

    # 
    # Final result for this couple IP-MAC
    # 

    return [::arrgen::output "html" $conf(tabsession) $lines]
}

#
# Display a portmac session list, for a given idportmac
#

proc gen-idportmac-session {dbfd idportmac} {
    global conf

    set lines {}
    set sql "SELECT portmac.mac AS mac,
		    portmac.port AS port,
		    portmac.ideq AS ideq,
		    portmac.idvlan AS idvlan
		FROM portmac
		WHERE portmac.idportmac=$idportmac"
    pg_select $dbfd $sql tab {
	lappend lines [list "Info" \
			    [mc "MAC address"] \
			    [gen-link [display-mac $dbfd $tab(mac)] $tab(mac)] \
			]
	set eq [get-eq-name $dbfd $tab(ideq)]
	lappend lines [list "Info" \
			    [mc "Équipement"] \
			    [gen-link $eq "eq:$tab(ideq)"] \
			]
	lappend lines [list "Info" \
			    [mc "Interface"] \
			    $tab(port) \
			]
	set vlan [display-vlan $dbfd $tab(idvlan)]
	lappend lines [list "Info" \
			    [mc "Vlan"] \
			    [gen-link $vlan "vlan:$tab(idvlan)"] \
			]
    }

    set found 0
    set sql "SELECT 
		    to_char(sessionportmac.debut,$conf(sqldateformat)) AS ddebut,
		    to_char(sessionportmac.fin,$conf(sqldateformat)) AS dfin,
		    sessionportmac.close AS close
		FROM sessionportmac
		WHERE sessionportmac.idportmac=$idportmac
		ORDER BY sessionportmac.fin DESC"
    pg_select $dbfd $sql tab2 {
	if {$found==0} then {
	    lappend lines [list Active [mc "Start"] [mc "End"]]
	    set found 1
	}

	if {$tab2(close)} then { set pat "Close" } else { set pat "Active" }
	lappend lines [list $pat $tab2(ddebut) $tab2(dfin)]
    }

    return [::arrgen::output "html" $conf(tabsession) $lines]
}

#
# Display a menu of IPMAC associations from an IP or MAC address
#
# Input:
#  - ip : ip address (may be null)
#  - mac : mac address (may be null)
#
# Output:
#  - return value : HTML code
#

proc gen-ipmac {dbfd ip mac} {
    global conf

    if {$mac eq "" && $ip eq ""} then {
	return ""
    }

    set tableau ""
    set lines {}
    lappend lines [list Title \
			[mc "Sessions"] \
			[mc "IP address"] \
			[mc "MAC address"] \
			[mc "Last occurrence"] \
		    ]
    set crit {}
    if {$ip ne ""} then {
	lappend crit " ipmac.ip='$ip' "
    }

    if {$mac ne ""} then {
	lappend crit " ipmac.mac='$mac' "
    }

    #
    # Search all ip-mac associations and last occurrence date
    #
    
    set n 0
    set sql "SELECT idipmac AS idipmac, ipmac.mac AS mac, ipmac.ip AS ip
		FROM ipmac WHERE [join $crit AND]"
    set d {}
    pg_select $dbfd $sql tab {
	incr n
	set idipmac $tab(idipmac)
	set lienidipmac [gen-link [mc "Details"] "idipmac:$idipmac"]
	set dnsname [resolve "ip" $tab(ip)]
	set lienip [gen-link [display-ip $tab(ip) $dnsname] $tab(ip)]

	pg_select $dbfd "SELECT extract(epoch from max(fin)) AS fin
		FROM sessionipmac
		WHERE idipmac=$idipmac" tab2 {
	    set fin $tab2(fin)
	}

	if {$fin ne ""} then {
	    set fin [expr int($fin)]
	} else {
	    set fin 0
	}
	set lienmac [gen-link [display-mac $dbfd $tab(mac)] $tab(mac)]
	lappend d [list Data $lienidipmac $lienip $lienmac $fin]
    }

    #
    # Sort list and convert date
    #

    foreach l [lsort -index end -integer $d] {
	set t [lindex $l end]
	set date [clock format $t -format "$conf(clockformat)"]
	if {[regexp {^01/01/1970} $date]} then {
	    set date [mc "(no date)"]
	}
	lappend lines [lreplace $l end end $date]
    }
    
    if {$n > 0} then {
	set tableau [mc {%1$s MAC-IP address associations found for %2$s:} $n "$mac$ip"]
	append tableau "<br>"
	append tableau [::arrgen::output "html" $conf(tabmenuipmac) $lines]
    } else {
	set tableau [mc "No MAC-IP address association found for %s" "$mac$ip"]
	append tableau "<br>"
    }

    append tableau "<br>"
    return $tableau
}

#
# Display a menu of MAC-Port associations
#
# Input:
#  - mac : MAC address
#
# Output:
#  - return value : HTML code
#

proc gen-mac {dbfd mac} {
    if {$mac eq ""} then {
	return ""
    }
    return [gen-portmac $dbfd "portmac.mac='$mac'"]
}

#
# Display a menu of MAC-Port-Vlan for an equipment
#
# Input:
#  - eq : equipment name
#
# Output:
#  - return value : HTML code
#

proc gen-eq {dbfd eq} {
    set ideq [get-eq-id $dbfd $eq]
    if {$ideq==0} then {
	return [mc "Equipment '%s' not found" $eq]
    }
    return [gen-portmac $dbfd "portmac.ideq=$ideq"]
}

#
# Display a menu of MAC-Port-Vlan for a Vlan
#
# Input:
#   - vlanid : vlan-id
#
# Output:
#  - return value : HTML code
#

proc gen-vlan {dbfd vlanid} {
    if {[display-vlan $dbfd $vlanid] eq ""} then {
	return [mc "Vlan '%s' not found" $vlanid]
    }
    return [gen-portmac $dbfd "portmac.idvlan=$vlanid"]
}

#
# Search all port-mac-vlan associations and last occurrence date
# according to a criterion (SQL expression).
#
    
proc gen-portmac {dbfd crit} {
    global conf

    set n 0
    set tableau ""
    set lines {}
    lappend lines [list Title \
			    [mc "Sessions"] \
			    [mc "MAC address"] \
			    [mc "Equipment"] \
			    [mc "Interface"] \
			    [mc "Vlan"] \
			    [mc "Last occurrence"] \
			]
    set sql "SELECT   mac, idvlan, idportmac, ideq, port
		    FROM	portmac
		    WHERE	$crit
		    GROUP BY    idportmac, mac, idvlan, port, ideq"
    set d {}
    pg_select $dbfd $sql tab {
	    incr n
	    set idportmac $tab(idportmac)
	    set lienidportmac [gen-link [mc "Details"] "idportmac:$idportmac"]
	    set lienmac [gen-link [display-mac $dbfd $tab(mac)] $tab(mac)]
	    set idvlan $tab(idvlan)
	    set lienvlan [gen-link [display-vlan $dbfd $idvlan] "vlan:$idvlan"]
	    set nomeq [get-eq-name $dbfd $tab(ideq)] 
	    set lieneq [gen-link $nomeq "eq:$nomeq"]

	    set sql "SELECT extract(epoch from max(fin)) AS fin
			FROM sessionportmac
			WHERE idportmac=$idportmac"
	    pg_select $dbfd $sql tab2 {
		set fin $tab2(fin)
	    }

	    if {$fin ne ""} then {
		set fin [expr int($fin)]
	    } else {
		set fin 0
	    }
	    lappend d [list Data \
		$lienidportmac $lienmac $lieneq $tab(port) $lienvlan $fin ]

    }

    #
    # Sort list and convert date
    #

    foreach l [lsort -index end -integer $d] {
	set t [lindex $l end]
	lappend lines [lreplace $l end end \
				[clock format $t -format "$conf(clockformat)"]]
    }

    if {$n > 0} then {
	set tableau [mc "%s MAC-Equipment-port-vlan associations found" $n]
	append tableau [::arrgen::output "html" $conf(tabmenuportmac) $lines]
    } else {
	set tableau [mc "No MAC-Equipment-port-vlan association found"]
    }

    return $tableau
}

#
# Display an HTML link
#

proc gen-link {text target} {
    global conf

    d urlset "" $conf(next) [list [list "recherche" $target]]
    set url [d urlget ""]
    return [::webapp::helem "a" $text "href" $url]
}

#
# Display a Vlan name: "vlanid (description)" or "vlanid"
#

proc display-vlan {dbfd vlanid} {
    global cachevlan

    if {[info exists cachevlan($vlanid)]} then {
	set vlandesc $cachevlan($vlanid)
    } else {
	set vlandesc ""
	pg_select $dbfd "SELECT nom FROM vlan WHERE idvlan=$vlanid" tab {
	    set vlandesc $tab(nom)
	}
	set cachevlan($vlanid) $vlandesc
    }

    if {$vlandesc ne ""} then {
	set dispvlan "$vlanid ($vlandesc)"
    } else {
	set dispvlan $vlanid
    }
    return $dispvlan
}

#
# Search equipment name from equipment id
#

proc get-eq-name {dbfd ideq} {
    global cacheideq
    global cacheeq

    if {[info exists cacheeq($ideq)]} then {
	set eq $cacheeq($ideq)
    } else {
	set eq [mc "Unknown equipment (id %s)" $ideq]
	pg_select $dbfd "SELECT nom FROM eq WHERE ideq=$ideq" tab {
	    set eq $tab(nom)
	}
	set cacheideq($eq) $ideq
	set cacheeq($ideq) $eq
    }
    return $eq
}

#
# Search equipment id from equipment name
# Returns 0 if not found
#

proc get-eq-id {dbfd eq} {
    global cacheideq
    global cacheeq

    if {[info exists cacheideq($eq)]} then {
	set ideq $cacheideq($eq)
    } else {
	set ideq 0
	pg_select $dbfd "SELECT ideq FROM eq WHERE nom='$eq'" tab {
	    set ideq $tab(ideq)
	}
	set cacheeq($ideq) $eq
	set cacheideq($eq) $ideq
    }
    return $ideq
}


#
# Display search criterion on result page as a readable text
#

proc display-crit {dbfd type param} {
    switch $type {
	mac       { set m "MAC address %s" }
	ip        { set m "IP address %s" }
	idipmac   { set m "this association IP-MAC" }
	idportmac { set m "this MAC-Equipment-Port-Vlan association" }
	vlan      { set m "Vlan %s" ; set param [display-vlan $dbfd $param] }
	nom       { set m "host %s" }
	default   { set m "???" }
    }
    return [mc $m $param]
}

#
# Format an IP address: either IP followed by DNS name if it exists, or IP
# address only.
#

proc display-ip {ip dnsname} {
    if {$dnsname ne ""} then {
	set disp "$ip ($dnsname)"
    } else {
	set disp "$ip"
    }
    return $disp
}

#
# Search OUI for a given MAC address and returns a string built from
# MAC address and manufacturer name
# 
# Example:
# - MAC address "08:00:20:67:89:ab" becomes
#	"08:00:20:67:89:ab (SUN MICROSYSTEMS INC.)"
#
# - MAC address mac "01:23:45:67:89:ab" becomes
#	"01:23:45:67:89:ab"
#	(no change since OUI is not found)
#

proc display-mac {dbfd mac} {
    global ouicache

    if {[info exists ouicache($mac)]} then {
	return $ouicache($mac)
    }

    set manuf 0
    pg_select $dbfd "SELECT manuf('$mac') AS m" tab {
	set manuf $tab(m)
    }

    if {$manuf ne ""} then {
	set dispmac "$mac ($manuf)"
    } else {
	set dispmac "$mac"
    }
    set ouicache($mac) $dispmac
    return $dispmac
}

#
# DNS resolver : calls "host" command and produces an IP address list or a FQDN
#
# Input: 
#  - type : "nom" for a standard resolution, "ip" for a reverse resolution
#  - arg  : resolve parameter
# Output: 
#  - return value: addresse list or domain name
#

proc resolve {type arg} {
    global conf
    global dnscache

    if {! ([regexp {^[a-z0-9\-.]+$} $arg] || [regexp {^([0-9.]+|[0-9a-f:.]+)$} $arg])} then {
	return {}
    }

    #
    # Filter definition
    #

    if {[info exists dnscache($arg)]} then {
	return $dnscache($arg)
    }

    switch $type {
	"nom" { set pat "address" }
	"ip"  { set pat "domain name pointer" }
    }

    #
    # Extract "host" command result
    #

    set hostcmd [get-local-conf "hostcmd"]
    if {[catch {set buf [exec $conf(cmdhost) $arg]} msg]} then {
	set buf ""
    }

    #
    # Keep only the last word of each line
    #

    set l {}
    foreach line [split $buf "\n"] {
	if {[regexp $pat $line]} then {
	    lappend l [lindex $line end]
	}
    }
    set dnscache($arg) $l
    return $l 
}

##############################################################################
# Display page
##############################################################################

d cgi-register {recherche {}} {} {
    global conf

    #
    # End of script: output page and close database
    #

    d urlset "%URLFORM%" $conf(next) {}
    d result $conf(pagesearch) {}
}

##############################################################################
# Search
##############################################################################

d cgi-register {recherche .+} {} {
    global conf

    #
    # Open MAC database
    #

    set conninfo [get-conninfo "macdb"]
    if {[catch {set dbfdmac [pg_connect -conninfo $conninfo]} msg]} then {
        d error $msg
    }

    #
    # Guess search type
    #

    set recherche [string tolower $recherche]
    set l [guess-type $dbfdmac $recherche msg]
    if {[llength $l] == 0} then {
	d error $msg
    } 
    lassign $l type param

    #
    # Display output
    #

    set tableau [html-result $dbfdmac $type $param]
    if {$tableau eq ""} then {
	set tableau [mc "No information found"]
    }

    #
    # End of script: output page and close database
    #

    d result $conf(page) [list \
				[list %RECHERCHE% [display-crit $dbfdmac $type $param]] \
				[list %TABLEAU%   $tableau] \
			    ]
}

##############################################################################
# Main procedure
##############################################################################

d cgi-dispatch "mac" "droitmac"
