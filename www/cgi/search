#!%TCLSH%

#
# Search users associated with a network, an IP address or a host name.
#
# Called by: index
#
# Parameters (form or url):
#	- critere : search criterion (ip, cidr, or fqdn, or _ for "here")
#
# History
#   2002/07/25 : pda      : design
#   2003/05/13 : pda/jean : use auth base
#   2004/01/14 : pda/jean : add IPv6
#   2004/08/06 : pda/jean : extend network access rights
#   2005/02/24 : pda      : add case role mail without IP address
#   2010/10/17 : pda      : add search case for "here"
#   2010/12/10 : pda      : i18n
#   2010/12/25 : pda      : use cgi-dispatch
#

#
# Template pages used by this script
#

set conf(page)		search.html

#
# Next actions
# 

set conf(next)		"search"

#
# Script parameters
#

set conf(form)	{
	{critere	0 1 {}}
}

#
# Netmagis general library
#

source %LIBNETMAGIS%

# ::webapp::cgidebug ; exit

##############################################################################
# Utilities
##############################################################################

proc user-error {crit msg} {
    global conf

    set qmsg  [::webapp::html-string $msg]
    set qcrit [::webapp::html-string $crit]
    set result [::webapp::helem "font" $qmsg "color" "#FF0000"]
    d urlset "%URLFORM%" $conf(next) {}
    d result $conf(page) [list \
				[list %CRITERE% $qcrit] \
				[list %RESULTAT% $result] \
			    ]
    exit 0
}


proc display-host {dbfd _trr idview} {
    upvar $_trr trr

    h mask-next
    set fqdn [h mask-link "$trr(nom).$trr(domaine)"]
    # XXXXXXXXXX : non-translated message
    set msg [mc {%1$s is a host in view %2$s} $fqdn [u viewname $idview]]

    set hostinfo [h mask-text [display-rr $dbfd -1 trr $idview]]

    return "$msg $hostinfo"
}


proc display-alias {dbfd _trr idview} {
    upvar $_trr trr

    h mask-next
    set fqdn "$trr(nom).$trr(domaine)"
    set idalias [rr-cname-by-view trr $idview]
    if {! [read-rr-by-id $dbfd $idalias trra]} then {
	d error [mc {Cannot read host-id %s} $idalias]
    }
    set fqdna [h mask-link "$trra(nom).$trra(domaine)"]
    # XXXXXXXXXX : non-translated message
    set msg [mc {%1$s is an alias to host %2$s in view %3$s} $fqdn $fqdna [u viewname $idview]]

    set hostinfo [h mask-text [display-rr $dbfd -1 trra $idview]]

    return "$msg $hostinfo"
}










##############################################################################
# OBSOLETE
##############################################################################

proc output-trr {dbfd crit addr _trr} {
    global conf
    upvar $_trr trr

    #
    # If we come here, it means that the search criterion is ok.
    # If trr(idrr) exists, it means that name or address match a real host.
    #

    #
    # If it is an alias, look for the pointed host.
    #

    if {[info exists trr(cname)]} then {
	if {$trr(cname) ne ""} then {
	    set idrr $trr(cname)
	    unset trr
	    if {! [read-rr-by-id $dbfd $idrr trr]} then {
		d error [mc "Internal error: object pointed by alias is not found"]
	    }
	}
    }

    #
    # If it is a mail role, without IP address, look for mail host.
    #

    if {[info exists trr(rolemail)] && [llength $trr(ip)] == 0} then {
	if {$trr(rolemail) ne ""} then {
	    set idrr $trr(rolemail)
	    unset trr
	    if {! [read-rr-by-id $dbfd $idrr trr]} then {
		d error [mc "Internal error: mail host of role mail not found"]
	    }
	}
    }

    #
    # If criterion was a name and not an IP address, extract one of its
    # IP addresses (random among all IP addresses)
    #

    if {$addr eq ""} then {
	if {! [info exists trr(ip)]} then {
	    d error [mc "Internal error: no IP address"]
	}
	set addr [lindex $trr(ip) 0]
    }

    #
    # Display address
    #

    set result ""
    append result [mc "Searched address: %s" $addr]
    append result "<P>\n"

    #
    # If we have found a host, display pertinent informations.
    #

    if {[info exists trr(idrr)]} then {
	append result [display-rr $dbfd -1 trr {}]
	append result "<P>"
    }

    #
    # Look for users who have access to this IP address.
    #

    set sql "SELECT c.login, c.idcor
		    FROM global.corresp c, global.groupe g,
			dns.dr_reseau d, dns.reseau r
		    WHERE c.idgrp = g.idgrp
			AND g.idgrp = d.idgrp
			AND d.idreseau = r.idreseau
			AND ('$addr' <<= r.adr4 OR '$addr' <<= r.adr6)
			ORDER BY g.admin, g.nom
			"
    set lcor {}
    pg_select $dbfd $sql tab {
	lappend lcor [list $tab(login) $tab(idcor)]
    }

    #
    # Among selected users, search for those who have access to
    # this host (checking all other permissions).
    #

    foreach cor $lcor {
	lassign $cor login idcor
	if {[check-authorized-ip $dbfd $idcor $addr]} then {
	    set n [read-user $dbfd $login tabuid msg]
	    if {$n != 1} then {
		d error $msg
	    }
	    append result [display-user tabuid]
	    append result "\n<P>\n"
	}
    }

    #
    # End of script: output page and close database
    #

    d urlset "%URLFORM%" $conf(next) {}
    d result $conf(page) [list \
				[list %CRITERE% $crit] \
				[list %RESULTAT% $result] \
			    ]
}

##############################################################################
# Display empty page
##############################################################################

d cgi-register {crit {}} {} {

    #
    # Not an error, strictly speaking, but treated as an error.
    #

    user-error "" ""
}

##############################################################################
# Display given address (or my current IP address)
##############################################################################

d cgi-register {crit .+} {} {
    global conf
    global env

    #
    # One list element (HTML code) per entry found
    #

    set lfound {}

    ::html create ::h

    #
    # Is criterion a MAC addres, an IP address, a host name, anything else?
    #

    if {$crit eq "_"} then {
	if {[info exists env(REMOTE_ADDR)]} then {
	    set crit $env(REMOTE_ADDR)
	    set lfound {}
	    foreach idview [u myviewids] {
		if {[read-rr-by-ip $dbfd $crit $idview trr]} then {
		    lappend lfound [display-host $dbfd trr $idview]
		}
	    }
	    if {[llength $lfound] == 0} then {
		set msg [mc "Searched address: %s" $crit]
		user-error $crit $msg
	    }
	} else {
	    user-error "" ""
	}
    } elseif {[check-mac-syntax $dbfd $crit] eq ""} then {
	#
	# MAC address
	#
	set addr ""

	#
	# Attempt to search for the host. It if exists, trr will
	# be filled. If it does not exists, trr will not be created.
	# We don't test result, since existence of trr(idrr) will
	# suffice for next steps.
	#
	if {[read-rr-by-mac $dbfd $crit trr]} then {
	    set lhost {}
	    foreach idview [u myviewids] {
		if {[llength [rr-ip-by-view trr $idview]] > 0} then {
		    lappend lhost $idview
		    break
		}
	    }
	    foreach idview $lhost {
		lappend lfound [display-host $dbfd trr $idview]
	    }
	}

     } elseif {[check-ip-syntax $dbfd $crit "inet"] eq ""} then {
	#
	# IP address
	#
	set addr $crit

	#
	# Attempt to search for the host. It if exists, trr will
	# be filled. If it does not exists, trr will not be created.
	# We don't test result, since existence of trr(idrr) will
	# suffice for next steps.
	#
	for idview [u myviewids] {
	    if {[read-rr-by-ip $dbfd $crit $idview trr]} then {
		lappend lfound [display-host $dbfd trr $idview]
	    }
	}

    } elseif {[check-ip-syntax $dbfd $crit "cidr"] eq ""} then {
	#
	# CIDR
	#
	set addr $crit

    } else {
	set addr ""
	if {[regexp {^[^.]+\..+$} $crit]} then {
	    #
	    # Name and domain
	    #
	    set msg [check-fqdn-syntax $dbfd $crit name domain iddom]
	    if {$msg ne ""} then {
		user-error $crit $msg
	    }
	    set ldom [list $iddom]
	} else {
	    set msg [check-name-syntax $crit]
	    if {$msg ne ""} then {
		user-error $crit $msg
	    }
	    set ldom [u myiddom]
	    set name $crit
	}

	foreach iddom $ldom {
	    if {[read-rr-by-name $dbfd $name $iddom trr]} then {
		foreach idview [u myviewids] {
		    if {[llength [rr-ip-by-view trr $idview]] > 0} then {
			lappend lfound [display-host $dbfd trr $idview]
		    }
		    if {[rr-cname-by-view trr $idview] ne ""} then {
			lappend lfound [display-alias $dbfd trr $idview]
		    }
		    if {[rr-mx-by-view trr $idview] ne ""} then {
			lappend lfound [display-mx $dbfd trr $idview]
		    }
		    if {[rr-adrmail-by-view trr $idview] ne ""} then {
			lappend lfound [display-adrmail $dbfd trr $idview]
		    }
		}
	    }
	}
    }

    if {[llength $lfound] == 0} then {
	user-error $crit [mc "Search string '%s' not found" $crit]
    }

    #
    # Join all HTML lines in lfound
    #

    set html ""
    foreach f $lfound {
	append html [::webapp::helem "li" $f]
	append html "\n"
    }
    set result [::webapp::helem "ul" $html]

    #
    # End of script: output page and close database
    #

    d urlset "%URLFORM%" $conf(next) {}
    d result $conf(page) [list \
				[list %CRITERE% $crit] \
				[list %RESULTAT% $result] \
			    ]
}

d cgi-dispatch "dns" ""
