#!%TCLSH%

#
# Store host modifications
#
# Called by: index
#
# Parameters (form or url):
#   - display edit page
#	- action : (none)
#   - add host
#	- action : "add-host"
#	- confirm : "no" or "yes" (if confirmation)
#	- nom : name of host to add
#	- domaine : domain of host to add
#	- adr: IP address
#	- mac : MAC address
#	- iddhcpprofil : DHCP profil id, or 0
#	- hinfo : host type (text)
#	- droitsmtp : non-existent or non-empty
#	- ttl : value (or empty if not authorized)
#	- commentaire : comments
#	- respnom : name of the person responsible for this host
#	- respmel : mail address of the person responsible for this host
#   - free address block search
#	- action : "add-multi"
#	- dosearch or domap : non-empty value (see add.html)
#	- tri : sort criterion ("nbadr" or "adr")
#	- plage : selected network id
#	- nbadr : block number
#   - add alias
#	- action : "add-alias"
#	- nom : name of alias to add
#	- domaine : domain of alias to add
#	- alias : name of canonical existing host
#	- domaine2 : domain of canonical existing host
#
# History
#   2002/04/11 : pda/jean : design
#   2002/04/19 : pda/jean : add confirmation
#   2002/05/03 : pda/jean : split 3 modification types
#   2002/05/23 : pda/jean : add responsible
#   2002/07/09 : pda      : add nologin
#   2002/07/09 : pda      : convert names into lowercase
#   2002/10/31 : pda/jean : bug fix if add an IP address to an existing alias
#   2002/11/06 : pda/jean : bug fix of the bug fix
#   2003/04/24 : pda/jean : cannot add an IP address to a MX
#   2003/05/13 : pda/jean : use auth base
#   2004/01/14 : pda/jean : add IPv6
#   2004/08/04 : pda/jean : add mac
#   2005/04/08 : pda/jean : add dhcpprofil
#   2007/10/25 : jean     : log modify actions
#   2008/02/13 : pda/jean : responsible person is the current user by default
#   2008/07/23 : pda/jean : add smtp emit right
#   2008/07/29 : pda      : use display-rr
#   2010/01/01 : pda      : add add-multi
#   2010/10/08 : pda      : add journey (via next)
#   2010/10/09 : pda      : end add-multi coding
#   2010/10/26 : pda      : check dhcpprofil case when no maC address
#   2010/12/14 : pda      : i18n
#   2010/12/25 : pda      : use cgi-dispatch
#

#
# Template pages used by this script
#

set conf(page-add)	add.html
set conf(page-alias)	add-alias.html
set conf(page-exist)	add-exist.html
set conf(page-host)	add-host.html
set conf(page-smtp)	add-smtp.html
set conf(page-multi)	add-multi.html

#
# Next actions
# 

set conf(nextadd)	"add"
set conf(nextmap)	"net"

set conf(script-map)	"./net"

#
# Script parameters
#

# maximum size (in IP address count) of block to search
set conf(maxip)		1024

set conf(tableau-multi) {
    global {
	chars {10 normal}
	align {left}
	botbar {yes}
	columns {40 20 40}
    }
    pattern Title {
	vbar {yes}
	column {
	    format {raw}
	}
	vbar {yes}
	column {
	    format {raw}
	    align {center}
	}
	vbar {yes}
	column { }
	vbar {yes}
    }
    pattern Normal {
	vbar {yes}
	column { }
	vbar {yes}
	column {
	    align {center}
	}
	vbar {yes}
	column {
	    format {raw}
	}
	vbar {yes}
    }
}

#
# Netmagis general library
#

source %LIBDNS%

# ::webapp::cgidebug ; exit

##############################################################################
# Display page
##############################################################################

d cgi-register {action {}} {
    {adr 0 1}
} {
    global conf

    #
    # Get host types
    #

    set menuhinfo [menu-hinfo $dbfd hinfo ""]

    #
    # Get SMTP authorization, in order to display (or not display)
    # authorization button
    #

    lassign [menu-droitsmtp $dbfd "droitsmtp" tabuid 0] \
				droitsmtplibelle droitsmtpmenu

    #
    # Get TTL permission in order to display (or not display) TTL field
    #

    lassign [menu-ttl $dbfd "ttl" tabuid ""] ttllibelle ttlval

    #
    # Get authorized domains
    #

    set domaine    [menu-domain $dbfd $tabuid(idcor) domaine    "" ""]
    set domaineref [menu-domain $dbfd $tabuid(idcor) domaineref "" ""]

    #
    # Get DHCP profile informations
    #

    lassign [menu-dhcp-profile $dbfd "iddhcpprofil" $tabuid(idcor) 0] \
				dhcpprofillibelle dhcpprofilmenu 

    #
    # Get network addresses
    #

    set lnet [read-networks $dbfd $tabuid(idgrp) "consult"]
    set taille [llength $lnet]
    if {$taille == 0} then {
	set menuplage [mc "No authorized network"]
    } else {
	set menuplage [::webapp::form-menu "plage" 1 0 $lnet {}]
    }

    #
    # Is an address already provided?
    #

    if {$adr eq ""} then {
	# no: show rest of page
	set display "block"
    } else {
	# yes: hide rest of page
	set display "none"
    }

    #
    # Next scripts
    #

    d urlset "%URLFORM1%" $conf(nextadd) {}
    d urladdnext "%URLFORM1%"
    d urlset "%URLFORM2%" $conf(nextadd) {}

    #
    # End of script: output page and close database
    #

    d result $conf(page-add) [list \
				[list %DOMAINE% $domaine] \
				[list %DOMAINEREF% $domaineref] \
				[list %MENUHINFO% $menuhinfo] \
				[list %TTLLIBELLE% $ttllibelle] \
				[list %TTLVAL% $ttlval] \
				[list %DROITSMTPLIBELLE% $droitsmtplibelle] \
				[list %DROITSMTPMENU% $droitsmtpmenu] \
				[list %DHCPPROFILLIBELLE% $dhcpprofillibelle] \
				[list %DHCPPROFILMENU% $dhcpprofilmenu] \
				[list %MENUPLAGE% $menuplage] \
				[list %DISPLAY% $display] \
				[list %ADR% $adr] \
			    ]
}

##############################################################################
# Add a name
##############################################################################

# History
#   2002/04/11 : pda/jean : design
#   2002/04/19 : pda/jean : add confirmation
#   2002/05/02 : pda/jean : change hinfo format
#   2002/05/03 : pda/jean : store user in RR
#   2003/04/24 : pda/jean : cannot add an IP address to a MX
#   2004/08/04 : pda/jean : add mac
#   2005/04/08 : pda/jean : add iddhcpprofil
#   2010/10/31 : pda      : add ttl
#   2010/12/16 : pda      : add fspec parameter
#

d cgi-register {action add-host} {
    {confirm	1 1}
    {nom	1 1}
    {domaine	1 1}
    {adr	1 1}
    {mac	1 1}
    {iddhcpprofil 1 1}
    {droitsmtp	0 1}
    {ttl	1 1}
    {hinfo	1 1}
    {commentaire 1 1}
    {respnom	1 1}
    {respmel	1 1}
} {
    global conf

    set login $tabuid(login)
    set idcor $tabuid(idcor)

    #
    # Get dns update interval
    #

    set interval [dnsconfig get "dnsupdateperiod"]

    #
    # Check name and domain
    #

    set msg [check-name-syntax $nom]
    if {$msg ne ""} then {
	d error $msg
    }
    set nom [string tolower $nom]

    set msg [check-authorized-host $dbfd $idcor $nom $domaine trr "host"]
    if {$msg ne ""} then {
	d error $msg
    }
    set iddom $trr(iddom)

    #
    # Is this name an existing RR?
    # Does it already have at least one IP address?
    #

    set exip 0
    set rrexist 0
    if {$trr(idrr) ne ""} then {
	set rrexist 1
	if {$trr(ip) ne ""} then {
	    set exip 1
	}
    } else {
	if {$respnom eq "" && $respmel eq ""} then {
	    set respnom "$tabuid(nom) $tabuid(prenom)"
	    set respmel $tabuid(mel)
	}
    }

    #
    # Check IP address
    #

    set msg [check-ip-syntax $dbfd $adr "inet"]
    if {$msg ne ""} then {
	d error $msg
    }

    if {! [check-authorized-ip $dbfd $idcor $adr]} then {
	d error [mc "You don't have rights on '%s'" $adr]
    }

    if {[read-rr-by-ip $dbfd $adr tabrrbidon]} then {
	d error [mc "IP address '%s' already exists" $adr]
    }

    #
    # Check MAC address
    #

    if {$mac ne ""} then {
	set msg [check-mac-syntax $dbfd $mac]
	if {$msg ne ""} then {
	    d error $msg
	}
    }

    set mactotest $mac
    if {$exip} then {
	set mactotest $trr(mac)
    }
    set msg [check-static-dhcp $dbfd $mactotest [list $adr]]
    if {$msg ne ""} then {
	d error $msg
    }

    #
    # Check DHCP profile
    #

    if {! [check-iddhcpprofil $dbfd $iddhcpprofil dhcpprofil msg]} then {
	d error $msg
    }
    if {$mac eq "" && $iddhcpprofil != 0} then {
	d error [mc "You cannot set a DHCP profile without assigning a MAC address"]
    }

    #
    # Check host type
    #

    set idhinfo [read-hinfo $dbfd $hinfo]
    if {$idhinfo == -1} then {
	d error [mc "Host type '%s' not found" $hinfo]
    }

    #
    # Check SMTP emit right
    #

    if {$tabuid(droitsmtp)} then {
	if {$droitsmtp eq ""} then {
	    set droitsmtp 0
	} else {
	    set droitsmtp 1
	}
    } else {
	set droitsmtp 0
    }

    #
    # Check TTL
    #

    if {$tabuid(droitttl)} then {
	if {$ttl eq ""} then {
	    set ttl -1
	} else {
	    set msg [check-ttl $ttl]
	    if {$msg ne ""} then {
		d error $msg
	    }
	}
    } else {
	set ttl -1
    }

    #
    # At this point:
    # - if name does not exist, and user asked for SMTP emit right
    #		=> ask for confirmation
    # - if there is already an IP address
    #		=> ask for confirmation
    # - in all other cases
    #		=> do task
    #

    #
    # Common code for confirmation
    #

    set l {nom domaine adr mac iddhcpprofil droitsmtp ttl hinfo commentaire
			    respnom respmel}
    set hidden [::webapp::hide-parameters $l ftab]

    #
    # Ask for confirmation if user asked for SMTP emit right
    #

    if {! $exip && $droitsmtp && $confirm ne "yes"} then {
	#
	# Confirmation page
	#

	d urlset "%URLFORM%" $conf(nextadd) {}
	d urladdnext "%URLFORM%"
	d result $conf(page-smtp) [list \
					    [list %HIDDEN% $hidden] \
				]
	return 0
    }

    #
    # If name already exists, ask for confirmation, else insert object
    #

    if {$exip && $confirm ne "yes"} then {
	#
	# Output a page with attribute list of the identified object
	#

	set host [display-rr $dbfd -1 trr]
	d urlset "%URLFORM%" $conf(nextadd) {}
	d urladdnext "%URLFORM%"
	d result $conf(page-exist) [list \
						[list %NOM%     $nom] \
						[list %DOMAINE% $domaine] \
						[list %ADR%     $adr] \
						[list %HIDDEN%  $hidden] \
						[list %MACHINE% $host] \
			    ]
	return 0
    }

    #
    # Handle one of two cases:
    # - object does not have an IP address, or
    # - it have IP address(es) and user has confirmed
    # Insert object in database : (RR + IP addr) or only (IP addr)
    #

    d dblock {dns.rr dns.rr_ip}

    if {! $rrexist} then {
	#
	# Name did not exist, thus we insert a new RR
	#
	set msg [add-rr $dbfd $nom $iddom $mac $iddhcpprofil $idhinfo \
		    $droitsmtp $ttl $commentaire $respnom $respmel $idcor trr]
	if {$msg ne ""} then {
	    d dbabort [mc "add %s" $nom]
	}

    } else {
	#
	# RR was existing. Host informations may have been modified.
	# Update only if needed.
	#

	if {! $exip} then {
	    #
	    # Addition to an existing RR (eg: declare a host when
	    # only mail role was existing).
	    #
	    if {! ($mac eq $trr(mac)
			&& $iddhcpprofil eq $trr(iddhcpprofil)
		    	&& $hinfo eq $trr(hinfo)
		    	&& $droitsmtp eq $trr(droitsmtp)
		    	&& $ttl eq $trr(ttl)
		    	&& $commentaire eq $trr(commentaire)
		    	&& $respnom eq $trr(respnom)
		    	&& $respmel eq $trr(respmel))} then {
		if {$mac eq ""} then {
		    set qmac NULL
		} else {
		    set qmac "'[::pgsql::quote $mac]'"
		}
		set qcommentaire [::pgsql::quote $commentaire]
		set qrespnom     [::pgsql::quote $respnom]
		set qrespmel     [::pgsql::quote $respmel]
		if {$iddhcpprofil == 0} then {
		    set iddhcpprofil NULL
		}
		set sql "UPDATE rr SET
					mac = $qmac,
					iddhcpprofil = $iddhcpprofil,
					idhinfo = $idhinfo,
					droitsmtp = $droitsmtp,
					ttl = $ttl,
					commentaire = '$qcommentaire',
					respnom = '$qrespnom',
					respmel = '$qrespmel'
				    WHERE idrr = $trr(idrr)"
		if {! [::pgsql::execsql $dbfd $sql msg]} then {
		    d dbabort [mc "modify %s" [mc "host information"]] $msg
		}
	    }
	}
    }

    set sql "INSERT INTO dns.rr_ip VALUES ($trr(idrr), '$adr')"
    if {! [::pgsql::execsql $dbfd $sql msg]} then {
       d dbabort [mc "add %s" $adr]
    }

    #
    # Keep a note about user
    #

    set msg [touch-rr $dbfd $trr(idrr)]
    if {$msg ne ""} then {
	d dbabort [mc "modify %s" [mc "RR"]] $msg
    }

    d dbcommit [mc "add %s" "$nom.$domaine"]
    d writelog "addhost" "add $nom.$domaine ($adr)"

    #
    # Prepare next step in journey
    #
     
    switch -- [d nextprog] {
	map {
	    d urlset "%URLSUITE%" $conf(nextmap) [list {domap yes} [d nextargs]]
	}
	sequence {
	    foreach kv [split [d nextargs] "&"] {
		if {[regexp {^([^=]+)=(.*)} $kv bidon k v]} then {
		    lappend nf($k) $v
		}
	    }
	    set nbadr 0
	    if {[info exists nf(nbadr)]} then {
		set nbadr $nf(nbadr)
	    }

	    if {$nbadr > 1} then {
		incr nbadr -1
		set sql "SELECT INET('$adr')+1 AS adr"
		pg_select $dbfd $sql tab {
		    set nadr $tab(adr)
		}

		d urlset "%URLSUITE%" $conf(nextadd) [list [list "adr" $nadr]]
		d urlsetnext "%URLSUITE%" "sequence" "nbadr=$nbadr"
	    } else {
		d urlset "%URLSUITE%" $conf(nextadd) {}
	    }
	}
	default {
	    d urlset "%URLSUITE%" $conf(nextadd) {}
	}
    }

    #
    # End of script: output page and close database
    #

    set machine [display-rr $dbfd $trr(idrr) trr]
    d result $conf(page-host) [list \
					    [list %MACHINE% $machine] \
					    [list %INTERVAL% $interval] \
			    ]
}

##############################################################################
# Search for a block
##############################################################################

# History
#   2010/01/01 : pda      : design
#   2010/10/09 : pda      : end of design
#   2010/12/16 : pda      : add fspec parameter
#

d cgi-register {action add-multi} {
    {dosearch	0 1}
    {domap	0 1}
    {tri	0 1}
    {plage	1 1}
    {nbadr	1 1}
} {
    global conf

    set login $tabuid(login)
    set idcor $tabuid(idcor)
    set idgrp $tabuid(idgrp)

    #
    # Validate form input
    #

    set lcidr [check-netid $dbfd $plage $idgrp "consult" {4} msg]
    if {[llength $lcidr] != 1} then {
       d error $msg
    }
    set cidr [lindex $lcidr 0]

    #
    # Special case for address map: we redirect to another CGI script
    #

    if {$domap ne ""} then {
	set nftab(cidr) $lcidr
	set nftab(domap) {yes}
	puts stdout [::webapp::call-cgi $conf(script-map) nftab]
	return 0
    }

    #
    # Continue to validate form input
    #

    if {! [regexp {^[0-9]+$} $nbadr] || $nbadr < 1} then {
       d error [mc "Invalid address count '%s'" $nbadr]
    }

    switch -- $tri {
	nbadr { set order "ORDER BY n ASC, a ASC" }
	adr -
	default { set order "ORDER BY a ASC, n ASC" }
    }

    #
    # Look for free blocks
    #

    set sql "SELECT *
		FROM ipranges ('$cidr', $conf(maxip), $idgrp)
		WHERE n >= $nbadr
		$order"
    set lranges {}
    pg_select $dbfd $sql tab {
	lappend lranges [list $tab(a) $tab(n)]
    }

    if {[llength $lranges] == 0} then {
       d error [mc "No block of %s free IPv4 address(es) found" $nbadr]
    }

    #
    # Display information
    #

    set lines {}

    # base URL to perform sort
    set largs [list {action add-multi} \
		    [list "plage" $plage] \
		    [list "nbadr" $nbadr] \
		]

    # first line (with sort URLs)
    d urlset "" $conf(nextadd) [concat $largs {{tri adr}}]
    set url [d urlget ""]
    set c1 [::webapp::helem "a" [mc "First available IP address"] "href" $url]

    d urlset "" $conf(nextadd) [concat $largs {{tri nbadr}}]
    set url [d urlget ""]
    set c2 [::webapp::helem "a" [mc "Size of block"] "href" $url]

    lappend lines [list Title $c1 $c2 ""]

    # block traversal
    foreach l $lranges {
	lassign $l a n

	set hidden [::webapp::form-hidden "adr" $a]

	# explicit choice button
	switch [expr $nbadr==$n][expr $nbadr==1] {
	    11 { set fmt [mc "Choose this address"] }
	    10 { set fmt [mc "Choose these %s addresses"] }
	    01 { set fmt [mc "Choose the first address"] }
	    00 { set fmt [mc "Choose the %s first addresses"] }
	}
	set msg [format $fmt $nbadr]
	set button [::webapp::form-submit "" $msg]

	d urlset "" $conf(nextadd) {}
	d urlsetnext "" "sequence" "nbadr=$nbadr"
	set c [::webapp::helem "form" "$hidden$button" \
					    "method" "post" \
					    "action" [d urlget ""] \
			]
	lappend lines [list Normal $a $n $c]
    }

    set liste [::arrgen::output "html" $conf(tableau-multi) $lines]

    #
    # End of script: output page and close database
    #

    d result $conf(page-multi) [list \
					    [list %LISTE% $liste] \
			    ]
    return 0
}

##############################################################################
# Add an alias
##############################################################################

# History
#   2002/04/19 : pda/jean : design
#   2010/12/16 : pda      : add fspec parameter
#

d cgi-register {action add-alias} {
    {nom	1 1}
    {domaine	1 1}
    {nomref	1 1}
    {domaineref	1 1}
} {
    global conf

    set login $tabuid(login)
    set idcor $tabuid(idcor)

    #
    # Get dns update interval
    #

    set interval [dnsconfig get "dnsupdateperiod"]

    #
    # Check names of alias and host
    #

    set msg [check-name-syntax $nom]
    if {$msg ne ""} then {
	d error $msg
    }
    set nom [string tolower $nom]

    set msg [check-name-syntax $nomref]
    if {$msg ne ""} then {
	d error $msg
    }
    set nomref [string tolower $nomref]

    #
    # Check alias and host permissions
    #

    set msg [check-authorized-host $dbfd $idcor $nom $domaine trr "alias"]
    if {$msg ne ""} then {
	d error $msg
    }
    set iddom $trr(iddom)

    set msg [check-authorized-host $dbfd $idcor $nomref $domaineref trrref "existing-host"]
    if {$msg ne ""} then {
	d error $msg
    }

    #
    # All test are ok, we just have to insert new alias
    #

    d dblock {dns.rr dns.rr_cname}

    #
    # This name was unknown, insert a new RR for new alias name
    #

    set msg [add-rr $dbfd $nom $iddom "" 0 "" 0 -1 "" "" "" $idcor newrr]
    if {$msg ne ""} then {
	d dbabort [mc "add %s" $nom] $msg
    }

    #
    # Add alias link between alias and host
    #

    set sql "INSERT INTO dns.rr_cname VALUES ($newrr(idrr), $trrref(idrr))"
    if {! [::pgsql::execsql $dbfd $sql msg]} then {
	d dbabort [mc "add %s" [mc "alias"]] $msg
    }

    
    d dbcommit [mc "add %s" "$nom.$domaine"]
    d writelog "addalias" "add alias $nom.$domaine -> $nomref.$domaineref"

    #
    # End of script: output page and close database
    #

    d result $conf(page-alias) [list \
					    [list %NOM%        $nom] \
					    [list %DOMAINE%    $domaine] \
					    [list %NOMREF%     $nomref] \
					    [list %DOMAINEREF% $domaineref] \
					    [list %INTERVAL%   $interval] \
			    ]
    return 0
}

##############################################################################
# Central dispatching
##############################################################################

d cgi-dispatch "dns" ""
