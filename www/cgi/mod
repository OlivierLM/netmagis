#!%TCLSH%

#
# Store host modifications
#
# Called by: index
#
# Parameters (form or url):
#   - display host selection page
#	- action : (none)
#   - display host edit page
#	- action : "edit"
#	- nom : original name of the host
#	- domain : original domain of the host
#	- idview : view id (or empty if no view has been selected)
#   - modification of host informations
#	- action : "store"
#	- confirm : "no" or "yes" (if confirm ok)
#	- idrr : original idrr of host
#	- idview : view id
#	- nom : modified name of the host
#	- domain : modified domain of the host
#	- mac : modified mac address
#	- iddhcpprofil : modified DHCP profile (or 0)
#	- hinfo : host type (id)
#	- droitsmtp : non existant, or non empty
#	- ttl : value (or empty if now allowed)
#	- commentaire : comments
#	- respnom : name of person responsible for this host
#	- respmel : mail of person responsible for this host
#
# History
#   2002/05/03 : pda/jean : design
#   2002/05/23 : pda/jean : add responsible
#   2002/07/09 : pda      : add nologin
#   2002/07/09 : pda      : convert names to lowercase
#   2003/05/13 : pda/jean : use auth base
#   2004/08/05 : pda/jean : add mac
#   2005/04/08 : pda/jean : add dhcppprofil
#   2007/10/25 : jean     : log modify actions
#   2008/02/13 : pda/jean : responsible person is the current user by default
#   2008/07/25 : pda/jean : add smtp emit right
#   2010/10/14 : pda      : add journey (via next)
#   2010/10/26 : pda      : check dhcpprofil case when no maC address
#   2010/10/26 : pda      : make name and domain editable
#   2010/10/31 : pda      : add ttl
#   2010/12/14 : pda      : i18n
#   2010/12/25 : pda      : use cgi-dispatch
#   2012/09/20 : pda/jean : remove dns update interval
#   2012/11/29 : pda/jean : add views
#

#
# Template pages used by this script
#

set conf(page-sel)	mod-sel.html
set conf(page-view)	mod-view.html
set conf(page-edit)	mod-edit.html
set conf(page-ok)	mod-ok.html
set conf(page-smtp)	mod-smtp.html

#
# Next actions
# 

set conf(next)		"mod"
set conf(nextmap)	"net"
set conf(nextlist)	"net"
set conf(nextadd)	"add"
set conf(nextdel)	"del"
set conf(nextsearch)	"search"

#
# Netmagis general library
#

source %LIBNETMAGIS%

# ::webapp::cgidebug ; exit

##############################################################################
# Display host selection page
##############################################################################

d cgi-register {action {}} {
} {
    global conf

    #
    # Get domains authorized for the user
    #

    set domain [menu-domain $dbfd $tabuid(idcor) "domain" "" ""]

    #
    # End of script: output page and close database
    #

    d urlset "%URLFORM%" $conf(next) {}
    d result $conf(page-sel) [list \
				[list %DOMAIN% $domain] \
			    ]
}

##############################################################################
# Display host edit page
##############################################################################

#
# host found in only one view (or selected view): display host edition page
#

proc disp-edit {dbfd _chkv _tabuid} {
    global conf
    upvar $_chkv chkv
    upvar $_tabuid tabuid

    #
    # Get id of found view
    #

    set idview [lindex $chkv(ok) 0]
    lassign $chkv($idview) vn msg t
    array set trr $t

    set hvn [::webapp::html-string $vn]

    #
    # In order to display original name of host
    #

    set vname $trr(nom)
    set vdomain $trr(domain)

    #
    # Default values for all fields
    #

    set name [::webapp::form-text nom 1 20 64 $trr(nom)]
    set domain [menu-domain $dbfd $tabuid(idcor) domain "" $trr(domain)]

    set val [::webapp::html-string $trr(mac)]
    set mac [::webapp::form-text mac 1 20 17 $val]
    lassign [menu-dhcp-profile $dbfd iddhcpprofil $tabuid(idcor) $trr(iddhcpprofil)] \
	dhcpprofillibelle dhcpprofilmenu

    set menuhinfo [menu-hinfo $dbfd hinfo $trr(hinfo)]

    lassign [menu-droitsmtp $dbfd "droitsmtp" tabuid $trr(droitsmtp)] \
	droitsmtplibelle droitsmtpmenu

    lassign [menu-ttl $dbfd "ttl" tabuid $trr(ttl)] ttllibelle ttlval

    set val [::webapp::html-string $trr(commentaire)]
    set commentaire [::webapp::form-text commentaire 1 50 50 $val]

    set val [::webapp::html-string $trr(respnom)]
    set respnom [::webapp::form-text respnom 1 50 50 $val]

    set val [::webapp::html-string $trr(respmel)]
    set respmel [::webapp::form-text respmel 1 50 50 $val]

    #
    # Next script
    #

    d urlset "%URLFORM%" $conf(next) {}
    d urladdnext "%URLFORM%"

    d urlset "%URLADD%" $conf(nextadd) {}
    d urlset "%URLDEL%" $conf(nextdel) {}

    #
    # End of script: output page and close database
    #

    d result $conf(page-edit) [list \
					[list %IDRR% $trr(idrr)] \
					[list %IDVIEW% $idview] \
					[list %VNOM% $vname] \
					[list %VDOMAIN% $vdomain] \
					[list %VIEWNAME% $hvn] \
					[list %NOM% $name] \
					[list %DOMAIN% $domain] \
					[list %MAC% $mac] \
					[list %DHCPPROFILLIBELLE% $dhcpprofillibelle] \
					[list %DHCPPROFILMENU% $dhcpprofilmenu] \
					[list %MENUHINFO% $menuhinfo] \
					[list %DROITSMTPLIBELLE% $droitsmtplibelle] \
					[list %DROITSMTPMENU% $droitsmtpmenu] \
					[list %TTLLIBELLE% $ttllibelle] \
					[list %TTLVAL% $ttlval] \
					[list %COMMENTAIRE% $commentaire] \
					[list %RESPNOM% $respnom] \
					[list %RESPMEL% $respmel] \
			    ]
}

d cgi-register {action edit} {
    {nom	1 1}
    {domain	1 1}
    {idview	0 1}
} {
    global conf

    #
    # Validate form input
    #

    set name   $nom
    set domain $domain
    set fqdn "$name.$domain"

    set msg [check-name-syntax $name]
    if {$msg ne ""} then {
	d error $msg
    }
    set name [string tolower $name]

    #
    # Get all possible views (if idview is not given) or get
    # only filtered views (if idview is given)
    #

    if {$idview == ""} then {
	set idviews {}
    } else {
	set idviews [list $idview]
    }
    set msg [filter-views $dbfd tabuid "host" $fqdn $idviews chkv]
    if {$msg ne ""} then {
	d error $msg
    }

    #
    # If only one view is found to be correct, go directly to the
    # modify form
    #

    if {[llength $chkv(ok)] == 1} then {
	disp-edit $dbfd chkv tabuid
    } else {
	set html [html-select-view chkv $conf(next)]
	d result $conf(page-view) [list \
					    [list %LIST% $html] \
				]
    }
}

##############################################################################
# Store modifications
##############################################################################

# History
#   2002/05/03 : pda/jean : design
#

d cgi-register {action store} {
    {confirm	1 1}
    {idrr	1 1}
    {idview	1 1}
    {nom	1 1}
    {domain	1 1}
    {mac	1 1}
    {iddhcpprofil 1 1}
    {hinfo	1 1}
    {droitsmtp	0 1}
    {ttl	1 1}
    {commentaire 1 1}
    {respnom	1 1}
    {respmel	1 1}
} {
    global conf

    set login $tabuid(login)
    set idcor $tabuid(idcor)

    #
    # Check host idrr
    # It must not be an alias, and user must own all addresses
    #

    if {! [regexp {^\d+$} $idrr]} then {
	d error [mc "Invalid input '%s'" $idrr]
    }
    if {! [read-rr-by-id $dbfd $idrr trr]} then {
	d error [mc "Cannot read host-id %s" $idrr]
    }
    # test if host exists
    if {$trr(idrr) eq ""} then {
	d error [mc "Host id %s not found" $idrr]
    }

    #
    # Check authorized access for host in view
    #

    set fqdn "$trr(nom).$trr(domain)"
    set msg [filter-views $dbfd tabuid "host" $fqdn [list $idview] chkv]
    if {$msg ne ""} then {
	d error $msg
    }

    #
    # Check new name and domain
    #

    set msg [check-name-syntax $nom]
    if {$msg ne ""} then {
	d error $msg
    }
    set nom [string tolower $nom]

    set msg [check-authorized-host $dbfd $idcor $nom $domain $idview ntrr "host"]
    if {$msg ne ""} then {
	d error $msg
    }
    set nidrr $ntrr(idrr)
    if {$nidrr != $idrr} then {
	#
	# New host or domain. We must check it does not already exist.
	#
	set nlip [rr-ip-by-view ntrr $idview]
    	if {[llength $nlip] > 0} then {
	    d error [mc "Host '%s' already exists" "$nom.$domain"]
	}
    }
    set iddom $ntrr(iddom)

    #
    # Check various informations
    #

    set msg [check-mac $dbfd $mac trr $idview]
    if {$msg ne ""} then {
	d error $msg
    }

    if {! [check-iddhcpprofil $dbfd $iddhcpprofil dhcpprofil msg]} then {
	d error $msg
    }
    if {$mac eq "" && $iddhcpprofil != 0} then {
	d error [mc "You cannot set a DHCP profile without a MAC address"]
    }

    set idhinfo [read-hinfo $dbfd $hinfo]
    if {$idhinfo == -1} then {
	d error [mc "Host type '%s' not found" $hinfo]
    }

    if {$tabuid(droitsmtp)} then {
	if {$droitsmtp eq ""} then {
	    set droitsmtp 0
	} else {
	    set droitsmtp 1
	}
    } else {
	set droitsmtp 0
    }

    if {$tabuid(droitttl)} then {
	if {$ttl eq ""} then {
	    set ttl -1
	} else {
	    set msg [check-ttl $ttl]
	    if {$msg ne ""} then {
		d error $msg
	    }
	}
    } else {
	set ttl -1
    }

    #
    # If responsible person is not specified, this is the user by default
    #

    if {$respnom eq "" && $respmel eq ""} then {
	set respnom "$tabuid(lastname) $tabuid(firstname)"
	set respmel $tabuid(mail)
    }

    #
    # Ask for confirmation if user asked for SMTP emit right
    # (and this right was now allowed before)
    #

    if {! $trr(droitsmtp) && $droitsmtp && $confirm ne "yes"} then {
	#
	# Confirmation page
	#

	set l {idrr idview nom domain mac iddhcpprofil hinfo droitsmtp ttl
			commentaire respnom respmel}
	set hidden [::webapp::hide-parameters $l ftab]
	d urlset "%URLFORM%" $conf(next) {}
	d urladdnext "%URLFORM%"
	d result $conf(page-smtp) [list \
						[list %HIDDEN% $hidden] \
			    ]
	return 0
    }

    #
    # Store modificationas
    #

    d dblock {dns.rr}

    if {! $tabuid(droitsmtp)} then {
	set droitsmtp $trr(droitsmtp)
    }
    if {! $tabuid(droitttl)} then {
	set ttl $trr(ttl)
    }

    #
    # Differentiate 3 cases:
    #							
    #	Case							ntrr(idrr) = ?
    #	------------------------------------------		---------------
    #	name does not change => use same RR			old $idrr
    #	name changes and there is no RR for new name		empty
    #	name changes and there is an existing RR for new name	value != $idrr
    #

    if {$nidrr eq ""} then {
	#
	# Create a new RR for the new name.
	# Remove MAC from old RR first, since there is a unicity
	# constraint on it.
	#

	set sql "UPDATE dns.rr SET mac = NULL WHERE idrr = $idrr"
	if {! [::pgsql::execsql $dbfd $sql msg]} then {
	   d dbabort [mc "modify %s" "$nom.$domain"] $msg
	}

	set msg [add-rr $dbfd $nom $iddom $mac $iddhcpprofil $idhinfo \
					$droitsmtp $ttl \
					$commentaire $respnom $respmel \
					$tabuid(idcor) ntrr]
	if {$msg ne ""} then {
	    d dbabort [mc "modify %s" [mc "RR"]] $msg
	}
	set nidrr $ntrr(idrr)

	#
	# Update all references to the host in this view
	#

	set msg [update-host-refs $dbfd $idrr $nidrr]
	if {$msg ne ""} then {
	    d dbabort [mc "modify %s" [mc "RR"]] $msg
	}

	#
	# Remove old RR if possible
	#

	set msg [del-orphaned-rr $dbfd $idrr]
	if {$msg ne ""} then {
	    d dbabort [mc "modify %s" [mc "RR"]] $msg
	}

	set idrr $nidrr

    } else {
	if {$mac eq ""} then {
	    set qmac NULL
	} else {
	    set qmac "'[::pgsql::quote $mac]'"
	}
	if {$iddhcpprofil == 0} then {
	    set qiddhcpprofil NULL
	} else {
	    set qiddhcpprofil $iddhcpprofil
	}
	set qnom         [::pgsql::quote $nom]
	set qcommentaire [::pgsql::quote $commentaire]
	set qrespnom     [::pgsql::quote $respnom]
	set qrespmel     [::pgsql::quote $respmel]

	if {$nidrr eq $idrr} then {
	    #
	    # Name does not change
	    #
	    set sql "UPDATE dns.rr SET
				    nom = '$qnom',
				    iddom = $iddom,
				    mac = $qmac,
				    iddhcpprofil = $qiddhcpprofil,
				    idhinfo = $idhinfo,
				    droitsmtp = $droitsmtp,
				    ttl = $ttl,
				    commentaire = '$qcommentaire',
				    respnom = '$qrespnom',
				    respmel = '$qrespmel'
				WHERE idrr = $idrr"
	    if {! [::pgsql::execsql $dbfd $sql msg]} then {
	       d dbabort [mc "modify %s" "$nom.$domain"] $msg
	    }
	} else {
	    #
	    # Name does change. Remove old MAC since there is
	    # a unicity constraint on it.
	    #

	    set sql "UPDATE dns.rr SET mac = NULL WHERE idrr = $idrr ;
		     UPDATE dns.rr SET
				    mac = $qmac,
				    iddhcpprofil = $qiddhcpprofil,
				    idhinfo = $idhinfo,
				    droitsmtp = $droitsmtp,
				    ttl = $ttl,
				    commentaire = '$qcommentaire',
				    respnom = '$qrespnom',
				    respmel = '$qrespmel'
				WHERE idrr = $nidrr
				"
	    if {! [::pgsql::execsql $dbfd $sql msg]} then {
	       d dbabort [mc "modify %s" "$nom.$domain"] $msg
	    }

	    #
	    # Update all references to the host in this view
	    #

	    set msg [update-host-refs $dbfd $idrr $nidrr]
	    if {$msg ne ""} then {
		d dbabort [mc "modify %s" [mc "RR"]] $msg
	    }

	    #
	    # Update old RR "last mod" values, and attempt to delete
	    # it (updating is done in case deletion does not succeed)
	    #

	    set msg [touch-rr $dbfd $idrr]
	    if {$msg ne ""} then {
		d dbabort [mc "modify %s" [mc "RR"]] $msg
	    }
	    set msg [del-orphaned-rr $dbfd $idrr]
	    if {$msg ne ""} then {
		d dbabort [mc "modify %s" [mc "RR"]] $msg
	    }

	    set idrr $nidrr
	}
    }

    #
    # Update RR "last mod" values
    #

    set msg [touch-rr $dbfd $idrr]
    if {$msg ne ""} then {
	d dbabort [mc "modify %s" [mc "RR"]] $msg
    }

    d dbcommit [mc "modify %s" "$nom.$domain"]

    #
    # Update log
    #

    set m "modify $trr(nom).$trr(domain):"
    foreach c {nom domain mac dhcpprofil hinfo droitsmtp ttl commentaire respnom respmel} {
	append m " $c=[set $c]"
    }
    d writelog "modrr" $m

    #
    # Display result
    #

    set commentaire [html-tab-string $commentaire]
    set respnom     [html-tab-string $respnom]
    set respmel     [html-tab-string $respmel]

    if {$ttl == -1} then {
	set httl [mc "(default zone value)"]
    } else {
	set httl $ttl
    }

    if {$droitsmtp} then {
	set droitsmtp [mc "Yes"]
    } else {
	set droitsmtp [mc "No"]
    }

    #
    # Prepare next step in journey
    #

    switch -- [d nextprog] {
	search {
	    d urlset "%URLSUITE%" $conf(nextsearch) [list [d nextargs]]
	}
	map {
	    d urlset "%URLSUITE%" $conf(nextmap) [list {domap {yes}} [d nextargs]]
	}
	list {
	    d urlset "%URLSUITE%" $conf(nextlist) [list {dolist {yes}} [d nextargs]]
	}
	default {
	    d urlset "%URLSUITE%" $conf(next) {}
	}
    }

    #
    # End of script: output page and close database
    #

    d result $conf(page-ok) [list \
					[list %NOM% $nom] \
					[list %DOMAIN% $domain] \
					[list %MAC% $mac] \
					[list %DHCPPROFIL% $dhcpprofil] \
					[list %HINFO% $hinfo] \
					[list %DROITSMTP% $droitsmtp] \
					[list %TTL% $httl] \
					[list %COMMENTAIRE% $commentaire] \
					[list %RESPNOM% $respnom] \
					[list %RESPMEL% $respmel] \
			    ]
    return 0
}

##############################################################################
# Main procedure
##############################################################################

d cgi-dispatch "dns" ""
