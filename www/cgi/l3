#!%TCLSH%

#
# List networks, or network details
#
# Called by: all topo scripts
#
# Parameters (form or url):
#	- addr : ip address
#	- format : nothing, or "pdf" or "png"
#
# History
#   2006/06/05 : pda      : design
#   2006/06/20 : pda      : prologue depends upon format
#   2006/06/22 : pda      : fix a bug on link numbers
#   2006/06/22 : pda      : output depends upon format
#   2006/08/09 : pda      : full path of ps2pdf
#   2006/08/14 : pda      : merge with listl2
#   2007/01/04 : pda      : add parameter uid
#   2007/01/11 : pda      : common initialization
#   2007/01/11 : pda      : uid substitution
#   2010/12/12 : pda      : i18n
#   2010/12/20 : pda      : reworked installation
#

#
# Template pages used by this script
#

set conf(err)		erreur.html
set conf(page1)		l3.html
set conf(pagen)		topoliste.html

#
# Next actions
# 

set conf(nexteq)	"eq"
set conf(nextl2)	"l2"
set conf(nextl3)	"l3"


#
# Script parameters
#

set conf(form)	{
    {addr		0 1}
    {format		0 1}
}

set conf(dumpgraph)	"dumpgraph -o rnet %s"
set conf(extractl3)	"extractl3 %s %s"

set conf(neatocmd)	"%s -Gmaxiter=10000"

#
# Netmagis general library
#

source %LIBDNS%

# ::webapp::cgidebug ; exit

##############################################################################
# Utilities
##############################################################################

proc prologue {format} {
    set g "graph l3graph \{\n"
    switch $format {
	pdf {
	    append g {
		fontsize = 14 ;
		margin = .3 ;
		center = true ;
		page="8.26,11.69" ;

		size="11,7.6" ;
		orientation = landscape ;

		/* len = 0.5 ; */
		/* ranksep = 0.5 */
		fontname = Helvetica ;

		node [fontname = Helvetica, fontsize = 10,
			    color = grey
			] ;
		edge [fontname = Helvetica, fontsize = 8,
			    /* len = 1.4, */
			    len = 2.2,
			    labelfontname = Helvetica, labelfontsize = 6,
			    color = grey
			] ;

		overlap = false ;
		spline = true ;
	    }
	}
	png -
	default {
	    append g {
		fontsize = 14 ;
		margin = .3 ;
		center = true ;

		orientation = portrait ;

		/* len = 0.5 ; */
		/* ranksep = 0.5 */
		fontname = Helvetica ;

		node [fontname = Helvetica, fontsize = 10,
			    color = grey
			] ;
		edge [fontname = Helvetica, fontsize = 8,
			    len = 3.0,
			    labelfontname = Helvetica, labelfontsize = 6,
			    color = grey
			] ;

		overlap = false ;
		spline = true ;
	    }
	}
    }
    return $g
}

proc title {label} {
    return "label = \"$label\" ;\n"
}

proc epilogue {format} {
    return "\}\n"
}

proc gen-dot {format cmd} {
    global conf

    set dot [prologue $format]
    if {! [call-topo $cmd msg]} then {
	return ""
    }
    foreach line [split $msg "\n"] {
	switch -- [lindex $line 0] {
	    selection {
		append dot [title [lreplace $line 0 0]]
	    }
	    eq {
		lassign $line kw nodename nodetype
		switch $nodetype {
		    router {
			if {! [regexp -- {([^:]+):(.*)} $nodename bidon eqname rinst]} then {
			    d error [mc "Invalid router instance '%s'" $nodename]
			}
			switch -- $rinst {
			    _v4 { set label "$eqname\\ndefault" }
			    _v6 { set label "$eqname\\ndefault (IPv6)" }
			    default { set label "$eqname\\r$rinst" }
			}
			set attrlist {shape=circle
					    style=filled fillcolor=lightgrey
					    fixedsize height=1.5}
			lappend attrlist label=\"$label\"
		    }
		    host {
			set eqname $nodename
			set attrlist {shape=box
					    style=filled fillcolor=lightblue
					    height=.25}
		    }
		    default {
			d error [mc {Invalid node type '%1$s' for %2$s} $nodetype $nodename]
		    }
		}

		d urlset "" $conf(nexteq) [list [list "eq" $eqname]]
		set url [d urlget ""]
		lappend attrlist "href=\"$url\""

		set attr [join $attrlist ", "]

		append dot "\"$nodename\" \[$attr\] ;\n"
	    }
	    direct {
		lassign $line kw eq1 if1 ip1 linkname eq2 if2 ip2
		set attrlist [list label=\"$linkname\" \
					headlabel=\"$if2\\n$ip2\" \
					taillabel=\"$if1\\n$ip1\" \
				    ]
		set attr [join $attrlist ", "]
		append dot "\"$eq1\" -- \"$eq2\" \[$attr\] ;\n"
	    }
	    cloud {
		lassign $line kw nodename bcastref vlans networks
		set attrlist {shape=ellipse
				style=filled fillcolor=palegreen
				width=1.5}
		set l {}
		set vlanid -1
		foreach vl $vlans {
		    set v [lindex $vl 0]
		    lappend l $v
		    if {$v != 0 && $vlanid == -1} then {
			set vlanid $v
		    }
		}
		set l [join $l ", "]
		set label [mc "Vlan"]
		append label " $l\\n"
		append label [join $networks "\\n"]
		lappend attrlist "label=\"$label\""

		if {$vlanid != -1} then {
		    d urlset "" $conf(nextl2) [list [list "vlan" $vlanid]]
		    set url [d urlget ""]
		    lappend attrlist "href=\"$url\""
		}

		set attr [join $attrlist ", "]

		append dot "\"$nodename\" \[$attr\] ;\n"
	    }
	    link {
		lassign $line kw eqname ifname ipaddr linkname cloud
		set attrlist [list headlabel=\"$linkname\" \
					taillabel=\"$ifname\\n$ipaddr\" \
				    ]
		set attr [join $attrlist ", "]
		append dot "\"$eqname\" -- \"$cloud\" \[$attr\] ;\n"
	    }
	}
    }
    append dot [epilogue $format]
    return $dot
}

##############################################################################
# Main procedure
##############################################################################

proc main {} {
    global conf

    #
    # Initialization
    #

    ::dnscontext create d
    d init-cgi "topo" $conf(err) "" $conf(form) ftab dbfd tabuid
    ::webapp::import-vars ftab $conf(form)

    set msgsta [topo-status $dbfd $tabuid(admin)]

    set tmp /tmp/l3-[pid]

    d urlset "%URLFORMEQ%" $conf(nexteq) {}
    d urlset "%URLFORML2%" $conf(nextl2) {}
    d urlset "%URLFORML3%" $conf(nextl3) {}

    #
    # Get IP networks from the graph
    #

    set cmd [format $conf(dumpgraph) $tabuid(flagsr)]
    if {! [call-topo $cmd msg]} then {
	d error [mc "Error while reading networks: %s" $msg]
    }
    foreach line [split $msg "\n"] {
	if {[regexp {^rnet ([^ ]+)} $line bidon a]} then {
	    set tabip($a) ""
	}
    }

    if {$addr eq ""} then {
	#
	# Sort IP addresses
	#

	set liste {}
	foreach addr [lsort -command compare-ip [array names tabip]] {
	    d urlset "" $conf(nextl3) [list [list "addr" $addr]]
	    set url [d urlget ""]
	    lappend liste [::webapp::helem "li" \
				[::webapp::helem "a" $addr "href" $url]]
	}
	set liste [::webapp::helem "ul" [join $liste "\n"]]

	#
	# End of script: output page and close database
	#

	d result $conf(pagen) [list \
				    [list %MSGSTA% $msgsta] \
				    [list %OBJETS% [mc "IP networks"]] \
				    [list %LISTE%  $liste] \
				    [list %EQ%     ""] \
				    [list %VLAN%   ""] \
				    [list %ADDR%   ""] \
				    [list %HEADER% ""] \
				    [list %ONLOAD% ""] \
				]
    } else {
	#
	# Validate IP address
	#

	set msg [check-ip-syntax $dbfd $addr "loosecidr"]
	if {$msg ne ""} then {
	    d error $msg
	}

	#
	# Search given IP and get associated network
	#

	set lnet {}
	foreach net [array names tabip] {
	    if {[ip-in $addr $net]} then {
		lappend lnet $net
	    }
	}
	if {[llength $lnet] == 0} then {
	    set lnet $addr
	}

	#
	# Get informations from graph
	#

	set xl3 [format $conf(extractl3) $tabuid(flagsr) [join $lnet " "]]
	set dot [gen-dot $format $xl3]
	set fd [open "$tmp.dot" "w"]
	puts $fd $dot
	close $fd

	#
	# Select format and ouput page
	#

	set prog [format $conf(neatocmd) [get-local-conf "neato"]]

	d urlset "" $conf(nextl3) [list \
					[list "format" "png"] \
					[list "addr" $addr] \
				    ]
	set urlimg [d urlget ""]

	d urlset "" $conf(nextl3) [list \
					[list "format" "pdf"] \
					[list "addr" $addr] \
				    ]
	set urlpdf [d urlget ""]

	switch -- $format {
	    pdf {
		set ps2pdf [get-local-conf "ps2pdf"]
		set fd [open "|$prog -Tps $tmp.dot 2> /dev/null | $ps2pdf - -" "r"]
		fconfigure $fd -translation binary
		set pdf [read $fd]
		close $fd
		::webapp::send rawpdf $pdf
		d end
	    }
	    png {
		set fd [open "| $prog -Tpng $tmp.dot 2>/dev/null" "r"]
		fconfigure $fd -translation binary
		set img [read $fd]
		close $fd
		::webapp::send png $img
		d end
	    }
	    default {
		set map [exec sh -c "$prog -Tcmapx < $tmp.dot 2> /dev/null"]
		d result $conf(page1) [list \
					    [list %MSGSTA% $msgsta] \
					    [list %EQ%     ""] \
					    [list %VLAN%   ""] \
					    [list %RESEAU% $lnet] \
					    [list %ADDR%   $addr] \
					    [list %URLIMG% $urlimg] \
					    [list %URLPDF% $urlpdf] \
					    [list %MAP%    $map] \
					]
	    }
	}

	file delete -force -- $tmp.dot
    }
}

::webapp::cgi-exec main $debug
