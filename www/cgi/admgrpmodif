#!%TCLSH%

#
# Store group permissions
#
# Called by: admgrpedit
#
# Parameters (form or url):
#	- orggrp : original group name, or "::nouveau"
#	- newgrp : modified group name
#	- admin : administration permission (0 or 1)
#	- droitsmtp : permission to authorize hosts to emit with SMTP (0 or 1)
#	- droitttl : permission to modify hosts TTL (0 or 1)
#	- droitmac : permission to use MAC module (0 or 1)
#	- confirm : yes or no
#	- loginN : group members
#	- domaineN : valid domains
#	- tridomN : domain sort class (if empty, we have to remove the domain)
#	- rolemailN : permission to edit "mail roles" for this domain (0 or 1)
#	- rolewebN : permission to edit "web roles" for this domain (0 or 1)
#	- reseauN : network ids for this group
#	- triresN : network sort class (if empty, we have to remove this network)
#	- dhcpN : permission to edit DHCP ranges for this network (0 or 1)
#	- aclN : permission to edit ACL for this netwok (0 or 1)
#	- adrN et allow_denyN : IP permissions for this group
#	- tridhcpprofN : DHCP profile sort class (if empty, we have to remove this DHCP profile)
#	- nomdhcpprofN : DHCP profile name
#	- eqrwN : type of permission (read:0 or write:1) on equipments
#	- eqallowN : allow/deny for equipments (0 or 1)
#	- eqpatN : regexp giving equipment permission (if empty, we have to remove this permission)
#
# History
#   2002/05/21 : pda/jean : design
#   2002/07/09 : pda      : add nologin
#   2003/05/13 : pda/jean : use auth base
#   2004/01/14 : pda/jean : add IPv6
#   2004/02/12 : pda/jean : add roles
#   2004/08/06 : pda/jean : extend network permissions
#   2005/04/08 : pda/jean : DHCP profiles
#   2007/10/10 : pda/jean : centralization of group administration
#   2008/07/23 : pda/jean : add droitsmtp
#   2010/10/31 : pda      : add droitttl
#   2010/11/03 : pda/jean : add dr_eq
#   2010/11/30 : pda/jean : add droitmac
#   2010/12/06 : pda      : i18n
#

#
# Template pages used by this script
#

set conf(page)		admgrpmodif.html
set conf(confirm)	admgrpconfirm.html
set conf(confsuppr)	admgrpconfsuppr.html
set conf(supprok)	admgrpsupprok.html

#
# Next actions
# 

set conf(next)		"admgrpmodif"

#
# Script parameters
#

set conf(form) {
	{confirm		1 1}
	{orggrp			1 1}
	{newgrp			1 1}
	{admin			1 1}
	{droitsmtp		1 1}
	{droitttl		1 1}
	{droitmac		1 1}
	{login[0-9]+		0 9999}
	{tridom[0-9]+		0 9999}
	{domaine[0-9]+		0 9999}
	{rolemail[0-9]+		0 9999}
	{roleweb[0-9]+		0 9999}
	{trires[0-9]+		0 9999}
	{reseau[0-9]+		0 9999}
	{dhcp[0-9]+		0 9999}
	{acl[0-9]+		0 9999}
	{adr[0-9]+		0 9999}
	{allow[0-9]+		0 9999}
	{tridhcpprof[0-9]+	0 9999}
	{nomdhcpprof[0-9]+	0 9999}
	{eqrw[0-9]+		0 9999}
	{eqallow[0-9]+		0 9999}
	{eqpat[0-9]+		0 9999}
}

#
# Netmagis general library
#

source %LIBDNS%

# ::webapp::cgidebug ; exit


##############################################################################
# Utility functions
##############################################################################

#
# Validate group name and get it's group id
#

proc val-group {dbfd group exist} {
    global conf

    set qgroup [::pgsql::quote $group]
    set idgrp -1
    pg_select $dbfd "SELECT idgrp FROM global.groupe WHERE nom = '$qgroup'" tab {
	set idgrp $tab(idgrp)
    }

    if {$exist} then {
	#
	# We want an existing group
	#
	if {$idgrp == -1} then {
	    d error [mc "Group '%s' not found" $group]
	}
    } else {
	#
	# We want a non-existing group
	#
	set msg [check-group-syntax $group]
	if {$msg ne ""} then {
	    d error $msg
	}
	# ... and now, check that the group is unknown
	if {$idgrp != -1} then {
	    d error [mc "Group '%s' already exist" $group]
	}
    }

    return $idgrp
}

#
# Group removal
#

proc del-group {dbfd idgrp idorphan} {
    set ltab {global.groupe global.corresp
		dns.dr_reseau dns.dr_mbox dns.dr_ip dns.dr_dom
		dns.dr_dhcpprofil}
    dblock $ltab

    #
    # Remove permissions
    #

    foreach table {dns.dr_reseau dns.dr_mbox dns.dr_ip dns.dr_dom dns.dr_dhcpprofil} {
	set sql "DELETE FROM $table WHERE idgrp = $idgrp"
	if {! [::pgsql::execsql $dbfd $sql msg]} then {
	    d dbabort [mc "delete %s" $table] $msg
	}
    }

    #
    # Get all users which must become orphans
    #

    set sql "SELECT corresp.idcor
		FROM global.corresp, dns.rr
		WHERE corresp.idgrp = $idgrp AND rr.idcor = corresp.idcor
		GROUP BY corresp.idcor"
    
    set lidcor {}
    pg_select $dbfd $sql tab {
	lappend lidcor $tab(idcor)
    }

    # 
    # Reassign them to the group of orphans
    # 

    if {[llength $lidcor] > 0} then {
	set lcor [join $lidcor ","]
	set sql "UPDATE global.corresp SET idgrp = $idorphan, present = 0
		    WHERE idcor IN ($lcor)"
	if {! [::pgsql::execsql $dbfd $sql msg]} then {
	    d dbabort [mc "modify %s" "global.corresp"] $msg
	} 
    }

    #
    # Remove other users and the group itself
    #

    foreach table {global.corresp global.groupe} {
	set sql "DELETE FROM $table WHERE idgrp = $idgrp"
	if {! [::pgsql::execsql $dbfd $sql msg]} then {
	    d dbabort [mc "delete %s" $table] $msg
	}
    }

    d dbcommit [mc "delete %s" $idgrp]
}

##############################################################################
# Main procedure
##############################################################################

proc main {} {
    global conf
    global ah

    #
    # Initialization
    #

    ::dnscontext create d
    d init-cgi "admin" "admin" $conf(form) ftab dbfd tabuid

    set orggrp  [lindex $ftab(orggrp) 0]
    set newgrp  [lindex $ftab(newgrp) 0]
    set confirm [lindex $ftab(confirm) 0]

    #
    # Create group of orphans if needed
    #

    set idorphan -1
    pg_select $dbfd "SELECT idgrp FROM global.groupe WHERE nom = ''" tab {
	set idorphan $tab(idgrp)
    }

    if {$idorphan == -1} then {
	set sql "INSERT INTO global.groupe
				(nom, admin, droitsmtp, droitttl, droitmac)
			    VALUES ('', 0, 0, 0, 0)"
	if {! [::pgsql::execsql $dbfd $sql msg]} then {
	    d error [mc "Cannot create group of orphaned users"]
	} 
	pg_select $dbfd "SELECT idgrp FROM global.groupe WHERE nom = ''" tab {
	    set idorphan $tab(idgrp)
	}
    }

    #
    # In which case are we?
    #

    set state [string equal $orggrp "::nouveau"][string equal $newgrp ""] 
    switch $state {
	11 {
	    d error [mc "You must type a name for the group"]
	}
	01 {
	    set action "del"
	}
	10 {
	    set action "add"
	    val-group $dbfd $newgrp 0
	    set msgact [mc "creation of group %s" $newgrp]
	    set idgrp -1
	}
	00 {
	    set action "mod"
	    set msgact [mc "modification of group %s" $newgrp]
	    set idgrp [val-group $dbfd $orggrp 1]

	    # Renaming
	    if {$newgrp ne $orggrp} then {
		val-group $dbfd $newgrp 0
	    }
	}
    }

    #
    # Group removal
    #

    if {$action eq "del"} then {
	set idgrp [val-group $dbfd $orggrp 1]
	if {$confirm ne "yes"} then {
	    # Ask for confirmation
	    set ftab(confirm)	{yes}
	    set lfields [array names ftab]
	    set hidden  [::webapp::hide-parameters $lfields ftab]
	    d urlset "%URLFORM%" $conf(next) {}
	    d result $conf(confsuppr) [list \
					[list %ORGGRP%	$orggrp] \
					[list %HIDDEN%	$hidden] \
				    ]
	} else {
	    # Proceed to removal
	    del-group $dbfd $idgrp $idorphan
	    d result $conf(supprok) [list \
					[list %ORGGRP%	$orggrp] \
				    ]
	}
	exit 0
    }

    #
    # Everything which follows is related to group creation or
    # modification of an existing group.
    #
    
    #
    # Test various permissions
    #

    foreach f {admin droitsmtp droitttl droitmac} {
	set $f [set v [string trim [lindex $ftab($f) 0]]]
	if {$v ne "0" && $v ne "1"} then {
	    d error [mc {Invalid value '%1$s' for form variable '%2$s'} $v $f]
	}
    }

    #
    # Test logins:
    # - read all logins
    # - notice orphans to re-assign to this group
    # - signal an error if the login is already belonging to another group
    # - notice logins to create
    # - notice logins to remove
    #
    
    # read all logins from database

    set sql "SELECT corresp.login, groupe.nom, groupe.idgrp
		FROM global.corresp, global.groupe
		WHERE corresp.idgrp = groupe.idgrp"
    pg_select $dbfd $sql tab {
	if {$tab(nom) eq ""} then {
	    set torph($tab(login)) ""
	} else {
	    set tcor($tab(login)) [list $tab(idgrp) $tab(nom)]
	}
    }

    set lcorcreate {}
    set lcorassign {}
    set lcordelete {}
    set n 1
    while {[info exists ftab(login$n)]} {
	set login [string trim [lindex $ftab(login$n) 0]]
	if {$login ne ""} then {
	    if {[info exists torph($login)]} then {
		lappend lcorassign $login
	    } elseif {[info exists tcor($login)]} then {
		if {$idgrp != [lindex $tcor($login) 0]} then {
		    set g [lindex $tcor($login) 1]
		    d error [mc {Login '%1$s' already assigned to group '%2$s'} $login $g]
		}
		unset tcor($login)
	    } else {
		lappend lcorcreate $login
	    }
	}
	incr n
    }

    foreach login [array names tcor] {
	if {[lindex $tcor($login) 0] == $idgrp} then {
	    lappend lcordelete $login
	}
    }

    #
    # Test domain validity and build the list of domain-ids
    #

    foreach ld [::pgsql::getcols $dbfd dns.domaine "" "" {iddom nom}] {
	set iddom [lindex $ld 0]
	set name  [lindex $ld 1]
	set tabdom($name) $iddom
    }

    set liddom {}
    set n 1
    while {[info exists ftab(tridom$n)] && [info exists ftab(domaine$n)]} {
	set tri [string trim [lindex $ftab(tridom$n) 0]]
	if {[string length $tri] > 0} then {
	    if {! [regexp -- {^[0-9]+$} $tri]} then {
		d error [mc "Invalid domain sort class '%s'" $tri]
	    }

	    set domaine [string trim [lindex $ftab(domaine$n) 0]]
	    if {! [info exists tabdom($domaine)]} then {
		d error [mc "Invalid domain '%s'" $domaine]
	    }

	    if {! [info exists ftab(rolemail$n)]} then {
		set ftab(rolemail$n) 0
	    }
	    set rolemail [string trim [lindex $ftab(rolemail$n) 0]]
	    if {! [regexp -- {^[01]$} $rolemail]} then {
		d error [mc "Invalid mail role '%s'" $rolemail]
	    }

	    if {! [info exists ftab(roleweb$n)]} then {
		set ftab(roleweb$n) 0
	    }
	    set roleweb [string trim [lindex $ftab(roleweb$n) 0]]
	    if {! [regexp -- {^[01]$} $roleweb]} then {
		d error [mc "Invalid web role '%s'" $roleweb]
	    }

	    lappend liddom [list $tri $tabdom($domaine) $rolemail $roleweb]
	}

	incr n
    }

    #
    # Test network ids and build a list
    #

    foreach ld [::pgsql::getcols $dbfd dns.reseau "" "" {idreseau adr4 adr6 dhcp}] {
	set idreseau [lindex $ld 0]
	set ladr {}
	foreach i {1 2} {
	    set a [lindex $ld $i]
	    if {! [string equal $a ""]} then {
		lappend ladr $a
	    }
	}
	set tabres($idreseau) $ladr
	set tabdhcp($idreseau) [lindex $ld 3]
    }

    set lidres {}
    set n 1
    while {[info exists ftab(trires$n)] && [info exists ftab(reseau$n)]} {
	set tri [string trim [lindex $ftab(trires$n) 0]]
	if {[string length $tri] > 0} then {
	    if {! [regexp -- {^[0-9]+$} $tri]} then {
		d error [mc "Invalid network sort class '%s'" $tri]
	    }

	    set idreseau [string trim [lindex $ftab(reseau$n) 0]]
	    if {! [info exists tabres($idreseau)]} then {
		d error [mc "Invalid network id '%s'" $idreseau]
	    }

	    if {! [info exists ftab(dhcp$n)]} then {
		set ftab(dhcp$n) 0
	    }
	    set dhcp [string trim [lindex $ftab(dhcp$n) 0]]
	    if {! [regexp -- {^[01]$} $dhcp]} then {
		d error [mc "Invalid DHCP permission '%s'" $dhcp]
	    }

	    if {! [info exists ftab(acl$n)]} then {
		set ftab(acl$n) 0
	    }
	    set acl [string trim [lindex $ftab(acl$n) 0]]
	    if {! [regexp -- {^[01]$} $acl]} then {
		d error [mc "Invalid ACL permission '%s'" $dhcp]
	    }

	    lappend lidres [list $tri $idreseau $dhcp $acl]
	}

	incr n
    }

    #
    # Test syntax of IP permissions
    #

    set n 1
    set ldrip {}
    set droits_allow {}
    while {[info exists ftab(adr$n)] && [info exists ftab(allow$n)]} {
	set allow_deny [lindex $ftab(allow$n) 0]
	if {!([string equal $allow_deny "0"] || \
		[string equal $allow_deny "1"])} then {
	    d error [mc "Invalid value '%s' for allow/deny" $allow_deny]
	}

	set adr [string trim [lindex $ftab(adr$n) 0]]
	if {[string length $adr] != 0} then {
	    set m [check-ip-syntax $dbfd $adr "cidr"]
	    if {[string length $m] > 0} then {
		d error [mc "Invalid CIDR '%s'" $adr]
	    }
	    lappend ldrip [list $allow_deny $adr]
	    if {$allow_deny} then {
		lappend droits_allow $adr
	    }
	}

	incr n
    }

    #
    # Test syntax of equipment permissions
    #

    set n 1
    set ldreq {}
    while {[info exists ftab(eqpat$n)] &&
		[info exists ftab(eqrw$n)] &&
		[info exists ftab(eqallow$n)]} {

	set rw [lindex $ftab(eqrw$n) 0]
	if {!($rw eq "0" || $rw eq "1")} then {
	    d error [mc "Invalid value '%s' for read/write" $rw]
	}

	set allow_deny [lindex $ftab(eqallow$n) 0]
	if {!($allow_deny eq "0" || $allow_deny eq "1")} then {
	    d error [mc "Invalid value '%s' for allow/deny" $allow_deny]
	}

	set pattern [string trim [lindex $ftab(eqpat$n) 0]]
	if {$pattern ne ""} then {
	    if {[catch {regexp $pattern ""} msg]} then {
		d error [mc "Invalid regular expression pattern '%s'" $pattern]
	    }

	    lappend ldreq [list $rw $allow_deny $pattern]
	}

	incr n
    }

    #
    # Test DHCP profile names
    #

    foreach ld [::pgsql::getcols $dbfd dns.dhcpprofil "" "" {iddhcpprofil nom}] {
	set iddhcpprofil [lindex $ld 0]
	set name         [lindex $ld 1]
	set tabdhcpprofil($name) $iddhcpprofil
    }

    set lidprof {}
    set n 1
    while {[info exists ftab(tridhcpprof$n)] && [info exists ftab(nomdhcpprof$n)]} {
	set tri [string trim [lindex $ftab(tridhcpprof$n) 0]]
	if {[string length $tri] > 0} then {
	    if {! [regexp -- {^[0-9]+$} $tri]} then {
		d error [mc "Invalid DHCP profile sort class '%s'" $tri]
	    }

	    set dhcpprofil [string trim [lindex $ftab(nomdhcpprof$n) 0]]
	    if {! [info exists tabdhcpprofil($dhcpprofil)]} then {
		d error [mc "Invalid DHCP profile '%s'" $dhcpprofil]
	    }

	    lappend lidprof [list $tri $tabdhcpprofil($dhcpprofil)]
	}

	incr n
    }

    #
    # Test data consistency
    #

    if {$confirm ne "yes"} then {
	#
	# - at least a domain
	# - at least a network
	# - each network has one or more IP permissions
	#	which means that a user may access one range in
	#	networks
	# - each IP address permission is within a network
	#	which means that a user do not have larger rights
	#	than allowed networks
	# If one of these conditions is false, we ask for confirmation.
	# This confirmation allow to force rights. A typical example
	# is an administrator which has rights on every network via
	# only one large CIDR.
	#

	set inconsist {}

	# non existant logins

	set u [::webapp::authuser create %AUTO%]
	set n 1
	while {[info exists ftab(login$n)]} {
	    set login [string trim [lindex $ftab(login$n) 0]]
	    if {$login ne ""} then {
		if {[catch {set nb [$ah getuser $login $u]} msg]} then {
		    d error [mc "Authentication base problem: %s" $msg]
		}
		switch $nb {
		    0 {
			lappend inconsist [mc "Login '%s' does not exist" $login]
		    }
		    1 {
			# nothing: it's ok
		    }
		    default {
			d error [mc "Login '%s' found more than once" $login]
		    }
		}
	    }
	    incr n
	}
	
	# at least one domain
	if {[llength $liddom] == 0} then {
	    lappend inconsist [mc "No selected domain"]
	}

	# at least one network
	if {[llength $lidres] == 0} then {
	    lappend inconsist [mc "No selected network"]
	}

	# authorize DHCP needs that the network be DHCP-enabled
	foreach r $lidres {
	    set idreseau [lindex $r 1]
	    set dhcp [lindex $r 2]
	    if {$dhcp && ! $tabdhcp($idreseau)} then {
		lappend inconsist [mc "Network '%s' is not DHCP enabled" $tabres($idreseau)]
	    }
	}

	# every network must at least have a IP address permission
	foreach r $lidres {
	    set idreseau [lindex $r 1]
	    foreach adr $tabres($idreseau) {
		set perm 0
		foreach dr $droits_allow {
		    pg_select $dbfd "SELECT '$adr' >>= '$dr' AS resultat" tab {
			set resultat $tab(resultat)
		    }
		    if {$resultat eq "t"} then {
			set perm 1
			break
		    }
		}
		if {! $perm} then {
		    lappend inconsist [mc "No 'allow' permission found for network '%s'" $adr]
		}
	    }
	}

	# no "allow" permission must be larger than a network
	foreach dr $droits_allow {
	    set larger 0
	    foreach r $lidres {
		set idreseau [lindex $r 1]
		foreach adr $tabres($idreseau) {
		    set sql "SELECT cidr '$adr' << cidr '$dr' AS resultat"
		    pg_select $dbfd $sql tab {
			set resultat $tab(resultat)
		    }
		    if {$resultat eq "t"} then {
			set larger 1
			break
		    }
		}
	    }

	    if {$larger} then {
		lappend inconsist [mc "'Allow' permission '%s' is too large" $dr]
	    }
	}

	#
	# If any inconsistency is detected, announce it/them and ask
	# for confirmation.
	#

	if {[llength $inconsist] > 0} then {
	    set ftab(confirm)	{yes}
	    set lfields [array names ftab]
	    set hidden  [::webapp::hide-parameters $lfields ftab]
	    set message [join $inconsist "<BR>\n"]
	    d urlset "%URLFORM%" $conf(next) {}
	    d result $conf(confirm) [list \
					[list %MSGACT%	$msgact] \
					[list %ORGGRP%	$orggrp] \
					[list %HIDDEN%	$hidden] \
					[list %MESSAGE%	$message] \
			    ]
	    exit 0
	}
    }

    #
    # If we get here, data are consistent, or we have been confirmed.
    # We must then store data in the database.
    # All modifications are done by removing all elements, and then
    # re-inserting them from input.
    #

    set ltab {global.groupe global.corresp
		dns.dr_reseau dns.dr_mbox dns.dr_ip dns.dr_dom
		dns.dr_dhcpprofil} 
    d dblock $ltab

    # Create group if needed

    if {$action eq "add"} then {
	set qnewgrp [::pgsql::quote $newgrp]
	set sql "INSERT INTO global.groupe
				(nom, admin, droitsmtp, droitttl, droitmac)
			VALUES ('$qnewgrp', $admin, $droitsmtp, $droitttl, $droitmac)"
	if {! [::pgsql::execsql $dbfd $sql msg]} then {
	    d dbabort [mc "add %s" $newgrp] $msg
	} 
    } else {

	# Existing group editing

	set qorggrp [::pgsql::quote $orggrp]

	if {$orggrp ne $newgrp} then {
	    # Group renaming
	    set qnewgrp [::pgsql::quote $newgrp]
	    set sql "UPDATE global.groupe SET nom = '$qnewgrp' WHERE nom = '$qorggrp'"
	    if {! [::pgsql::execsql $dbfd $sql msg]} then {
		d dbabort [mc "rename %s" $orggrp]
	    }
	}
    }

    # Get group id
    set qnewgrp [::pgsql::quote $newgrp]
    set idgrp -1
    pg_select $dbfd "SELECT idgrp FROM global.groupe WHERE nom = '$qnewgrp'" tab {
	set idgrp $tab(idgrp)
    }
    if {$idgrp == -1} then {
	d error [mc "Internal error: group '%s' not found" $newgrp]
    }

    # Update group attributes
    lappend cmd "UPDATE global.groupe
		    SET admin = $admin,
			droitsmtp = $droitsmtp,
			droitttl = $droitttl,
			droitmac = $droitmac
		    WHERE idgrp = $idgrp"

    # Create or assign users
    if {[llength $lcorcreate] > 0} then {
	foreach login $lcorcreate {
	    set qlogin [::pgsql::quote $login]
	    lappend cmd "INSERT INTO global.corresp (login,present,idgrp)
			    VALUES ('$qlogin',1,$idgrp)"
	}
    }
    if {[llength $lcorassign] > 0} then {
	foreach login $lcorassign {
	    set qlogin [::pgsql::quote $login]
	    lappend cmd "UPDATE global.corresp SET idgrp = $idgrp
			    WHERE login = '$qlogin'"
	}
    }

    # Re-assign all deleted users to the group of orphans
    if {[llength $lcordelete] > 0} then {
	foreach login $lcordelete {
	    set qlogin [::pgsql::quote $login]
	    lappend cmd "UPDATE global.corresp SET idgrp = $idorphan
			    WHERE login = '$qlogin'"
	}
    }

    # Delete all unneeded users
    lappend cmd "DELETE FROM global.corresp 
			WHERE idgrp = $idorphan 
			    AND idcor NOT IN (SELECT DISTINCT idcor FROM dns.rr)"

    # Authorized domains for this group
    lappend cmd "DELETE FROM dns.dr_dom WHERE idgrp = $idgrp"
    foreach e $liddom {
	set tri      [lindex $e 0]
	set iddom    [lindex $e 1]
	set rolemail [lindex $e 2]
	set roleweb  [lindex $e 3]
	lappend cmd "INSERT INTO dns.dr_dom (idgrp, iddom, tri, rolemail, roleweb)
			VALUES ($idgrp, $iddom, $tri, $rolemail, $roleweb)"
    }

    # Authorized networks for this group
    lappend cmd "DELETE FROM dns.dr_reseau WHERE idgrp = $idgrp"
    foreach r $lidres {
	set tri      [lindex $r 0]
	set idreseau [lindex $r 1]
	set dhcp     [lindex $r 2]
	set acl      [lindex $r 3]
	lappend cmd "INSERT INTO dns.dr_reseau (idgrp, idreseau, tri, dhcp, acl)
			VALUES ($idgrp, $idreseau, $tri, $dhcp, $acl)"
    }

    # IP permissions associated with the group
    lappend cmd "DELETE FROM dns.dr_ip WHERE idgrp = $idgrp"
    foreach e $ldrip {
	set allow_deny [lindex $e 0]
	set adr        [lindex $e 1]
	lappend cmd "INSERT INTO dns.dr_ip VALUES ($idgrp, '$adr', $allow_deny)"
    }

    # Equipment permissions (topo) associated with the group
    lappend cmd "DELETE FROM topo.dr_eq WHERE idgrp = $idgrp"
    foreach e $ldreq {
	lassign $e rw allow_deny pattern
	set pattern [::pgsql::quote $pattern]
	lappend cmd "INSERT INTO topo.dr_eq (idgrp, rw, allow_deny, pattern)
				VALUES ($idgrp, $rw, $allow_deny, '$pattern')"
    }

    # DHCP profiles associated with the group
    lappend cmd "DELETE FROM dns.dr_dhcpprofil WHERE idgrp = $idgrp"
    foreach e $lidprof {
	set tri          [lindex $e 0]
	set iddhcpprofil [lindex $e 1]
	lappend cmd "INSERT INTO dns.dr_dhcpprofil (idgrp, iddhcpprofil, tri)
			VALUES ($idgrp, $iddhcpprofil, $tri)"
    }

    #
    # Proceed to database modification
    #

    foreach sql $cmd {
	if {! [::pgsql::execsql $dbfd $sql msg]} then {
	   d dbabort [mc "modify %s" $orggrp] $msg
	}
    }

    d dbcommit [mc "modify %s" $orggrp]

    #
    # Get group characteristics
    #

    set h [display-group $dbfd $idgrp]
    lassign $h \
		tabdroits tablogins tabreseaux tabcidrhorsreseau \
		tabdomaines tabdhcpprofils tabdreq

    #
    # End of script: output page and close database
    #

    d result $conf(page) [list \
			    [list %NEWGRP% $newgrp] \
			    [list %TABLOGINS% $tablogins] \
			    [list %TABDROITS% $tabdroits] \
			    [list %TABRESEAUX% $tabreseaux] \
			    [list %TABCIDRHORSRESEAU% $tabcidrhorsreseau] \
			    [list %TABDOMAINES% $tabdomaines] \
			    [list %TABDHCPPROFILS% $tabdhcpprofils] \
			    [list %TABDREQ% $tabdreq] \
			]
}

::webapp::cgi-exec main $debug
