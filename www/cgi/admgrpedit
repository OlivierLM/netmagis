#!%TCLSH%

#
# Display groupe characteristics for edition
#
# Called by: admgrpsel
#
# Parameters (form or url):
#	- orggrp : original group name, or "::nouveau"
#
# History
#   2002/05/21 : pda/jean : design
#   2002/07/09 : pda      : add nologin
#   2003/05/13 : pda/jean : use auth base
#   2004/01/14 : pda/jean : add IPv6
#   2005/04/08 : pda/jean : add dhcpprofil
#   2007/10/09 : pda/jean : renaming admgrpedit
#   2007/10/10 : pda/jean : centralization of group administration
#   2008/07/23 : pda/jean : add droitsmtp
#   2010/10/31 : pda      : add droitttl
#   2010/11/03 : pda/jean : add dr_eq
#   2010/11/30 : pda/jean : add droitmac
#   2010/12/06 : pda      : i18n
#

#
# Template pages used by this script
#

set conf(err)		erreur.html
set conf(page)		admgrpedit.html

#
# Next actions
# 

set conf(next)		"admgrpmodif"

#
# Script parameters
#

# number of lines in listboxes
set conf(hauteur)	20

set conf(form) {
	{orggrp		1 1}
}

set conf(tabuidresp) {
    global {
	chars {12 normal}
	botbar {no}
	columns {50 50}
	align {right}
	format {raw}
    }
    pattern Normal {
	topbar {no}
	vbar {no}
	format {raw}
	column { }
	vbar {no}
	column { 
	    align {left}
	}
	vbar {no}
    }
}
set conf(tabdomaines) {
    global {
	chars {12 normal}
	botbar {no}
	columns {25 25 25 25}
	align {center}
	format {raw}
    }
    pattern Title {
	topbar {no}
	vbar {no}
	chars {bold}
	column { }
	vbar {no}
	column { }
	vbar {no}
	column { }
	vbar {no}
	column { }
	vbar {no}
    }
    pattern Normal {
	topbar {no}
	vbar {no}
	format {raw}
	column { }
	vbar {no}
	column { }
	vbar {no}
	column { }
	vbar {no}
	column { }
	vbar {no}
    }
}

set conf(tabreseaux) {
    global {
	chars {12 normal}
	botbar {no}
	columns {14 58 14 14}
	align {center}
    }
    pattern Title {
	topbar {no}
	vbar {no}
	chars {bold}
	column { }
	vbar {no}
	column { }
	vbar {no}
	column { }
	vbar {no}
	column { }
	vbar {no}
    }
    pattern Normal {
	topbar {no}
	vbar {no}
	format {raw}
	column { }
	vbar {no}
	column { }
	vbar {no}
	column { }
	vbar {no}
	column { }
	vbar {no}
    }
}

set conf(tabdrip) {
    global {
	chars {12 normal}
	botbar {no}
	columns {20 80}
	format {raw}
    }
    pattern Normal {
	topbar {no}
	vbar {no}
	column {
	    align {right}
	}
	vbar {no}
	column {
	    align {left}
	}
	vbar {no}
    }
}

set conf(tabdreq) {
    global {
	chars {12 normal}
	botbar {no}
	columns {10 10 80}
	format {raw}
    }
    pattern Normal {
	topbar {no}
	vbar {no}
	column {
	    align {right}
	}
	vbar {no}
	column {
	    align {right}
	}
	vbar {no}
	column {
	    align {left}
	}
	vbar {no}
    }
}

set conf(tabdhcpprofil) {
    global {
	chars {12 normal}
	botbar {no}
	columns {20 80}
	format {raw}
    }
    pattern Title {
	topbar {no}
	vbar {no}
	chars {bold}
	column {
	    align {center}
	}
	vbar {no}
	column {
	    align {left}
	}
	vbar {no}
    }
    pattern Normal {
	topbar {no}
	vbar {no}
	column {
	    align {center}
	}
	vbar {no}
	column {
	    align {left}
	}
	vbar {no}
    }
}

#
# Netmagis general library
#

source %LIBDNS%

# ::webapp::cgidebug ; exit

##############################################################################
# Main procedure
##############################################################################

proc main {} {
    global conf

    #
    # Initialization
    #

    ::dnscontext create d
    d init-cgi "admin" $conf(err) "admin" $conf(form) ftab dbfd login tabuid

    #
    # Check group name, and get group id
    #

    set orggrp [lindex $ftab(orggrp) 0]
    if {$orggrp eq "::nouveau"} then {
	set title [mc "New group creation"]
	set newgrp ""
	set msggrp [mc "Type the name of group to create"]
	set idgrp -1
	set admin 0
	set droitsmtp 0
	set droitttl 0
	set droitmac 0
    } else {
	set qgroup [::webapp::html-string $orggrp]
	set title [mc "Edition of group '%s'" $qgroup]
	set newgrp $qgroup
	set msggrp [mc "Modify group name or erase it to remove the group"]
	set pqgroup [::pgsql::quote $orggrp]
	set idgrp -1
	set sql "SELECT idgrp, admin, droitsmtp, droitttl, droitmac
			FROM global.groupe
			WHERE nom = '$pqgroup'"
	pg_select $dbfd $sql tab {
	    set idgrp $tab(idgrp)
	    set admin $tab(admin)
	    set droitsmtp $tab(droitsmtp)
	    set droitttl $tab(droitttl)
	    set droitmac $tab(droitmac)
	}

	if {$idgrp == -1} then {
	    d error [mc "Group '%s' not found" $orggrp]
	}
    }

    set yes [mc "yes"]
    set no [mc "no"]
    set fmt "%1\$s $yes &nbsp; &nbsp; &nbsp;   %2\$s $no"

    set admin [::webapp::form-yesno "admin" $admin $fmt]
    set droitsmtp [::webapp::form-yesno "droitsmtp" $droitsmtp $fmt]
    set droitttl [::webapp::form-yesno "droitttl" $droitttl $fmt]
    set droitmac [::webapp::form-yesno "droitmac" $droitmac $fmt]

    #
    # Extract the list of users belonging to this group
    #

    set lines {}

    set nlogin 1
    foreach login [::pgsql::getcols $dbfd global.corresp "idgrp = $idgrp" "login ASC" {login}] {
	set n [read-user $dbfd $login tab comment]
	if {$n == 1} then {
	    set comment "$tab(prenom) $tab(nom)"
	}
	set hlogin [::webapp::form-text login$nlogin 1 20 50 $login]
	lappend lines [list Normal $hlogin "($comment)"]
	incr nlogin
    }

    for {set i 1} {$i <= 5} {incr i} {
	set hlogin [::webapp::form-text login$nlogin 1 20 50 ""]
	lappend lines [list Normal $hlogin ""]
	incr nlogin
    }

    set listecor [::arrgen::output "html" $conf(tabuidresp) $lines]

    #
    # Extract domain list, and select those which are already authorized
    # for this group.
    #

    set lines {}
    lappend lines [list "Title" \
			    [mc "Sort class"] \
			    [mc "Domain"] \
			    [mc "Mail role edition"] \
			    [mc "Web role edition"] \
			]
    set ldom [::pgsql::getcols $dbfd dns.domaine "" "nom ASC" {nom nom}]
    set sql "SELECT domaine.nom AS nom, dr_dom.tri AS tri,
				dr_dom.rolemail, dr_dom.roleweb
			FROM dns.domaine, dns.dr_dom
			WHERE domaine.iddom = dr_dom.iddom
				AND dr_dom.idgrp = $idgrp
			ORDER BY dr_dom.tri ASC, domaine.nom ASC"
    set ndom 1
    pg_select $dbfd $sql tab {
	set d        $tab(nom)
	set tri      $tab(tri)
	set rolemail $tab(rolemail)
	set roleweb  $tab(roleweb)

	set idx [lsearch -exact $ldom [list $d $d]]
	if {$idx == -1} then {
	    d error [mc "Group has access to domain '%s' which do not exists in database" $d]
	}
	set htri  [::webapp::form-text tridom$ndom 1 5 5 $tri]
	set hdom  [::webapp::form-menu domaine$ndom 1 0 $ldom [list $idx]]
	set hmail [::webapp::form-bool rolemail$ndom $rolemail]
	set hweb  [::webapp::form-bool roleweb$ndom  $roleweb]
	lappend lines [list Normal $htri $hdom $hmail $hweb]
	incr ndom
    }

    for {set i 1} {$i <= 5} {incr i} {
	set htri  [::webapp::form-text tridom$ndom 1 5 5 ""]
	set hdom  [::webapp::form-menu domaine$ndom 1 0 $ldom {}]
	set hmail [::webapp::form-bool rolemail$ndom 0]
	set hweb  [::webapp::form-bool roleweb$ndom  0]
	lappend lines [list Normal $htri $hdom $hmail $hweb]
	incr ndom
    }

    set listedomaines [::arrgen::output "html" $conf(tabdomaines) $lines]

    #
    # Extract network list and select those which are authorized for the group
    #

    set lines {}
    lappend lines [list "Title" \
			[mc "Sort class"] \
			[mc "Networks"] \
			[mc "DHCP management"] \
			[mc "ACL management"] \
		    ]
    set lres {}
    set idx 0
    set sql "SELECT idreseau, nom, adr4, adr6 FROM dns.reseau ORDER BY adr4, adr6"
    pg_select $dbfd $sql tab {
	set res [format "%s\t%s\t(%s)" \
			    $tab(adr4) $tab(adr6) \
			    [::webapp::html-string $tab(nom)] \
			]
	lappend lres [list $tab(idreseau) $res]
	set idxreseau($tab(idreseau)) $idx
	incr idx
    }

    set sql "SELECT dr_reseau.idreseau,
			dr_reseau.tri,
			dr_reseau.dhcp,
			dr_reseau.acl
		FROM dns.reseau, dns.dr_reseau
		WHERE reseau.idreseau = dr_reseau.idreseau
			AND dr_reseau.idgrp = $idgrp
		ORDER BY dr_reseau.tri ASC, reseau.adr4 ASC, reseau.adr6 ASC"
    set nres 1
    pg_select $dbfd $sql tab {
	set idreseau $tab(idreseau)
	set tri      $tab(tri)
	set dhcp     $tab(dhcp)
	set acl      $tab(acl)

	if {! [info exists idxreseau($idreseau)]} then {
	    d error [mc "Group has access to network '%s' which do not exists in database" $idreseau]
	}
	set idx $idxreseau($idreseau)

	set htri  [::webapp::form-text trires$nres 1 5 5 $tri]
	set hres  [::webapp::form-menu reseau$nres 1 0 $lres [list $idx]]
	set hdhcp [::webapp::form-bool dhcp$nres $dhcp]
	set hacl  [::webapp::form-bool acl$nres $acl]

	lappend lines [list Normal $htri $hres $hdhcp $hacl]
	incr nres
    }

    for {set i 1} {$i <= 5} {incr i} {
	set htri  [::webapp::form-text trires$nres 1 5 5 ""]
	set hres  [::webapp::form-menu reseau$nres 1 0 $lres {}]
	set hdhcp [::webapp::form-bool dhcp$nres 0]
	set hacl  [::webapp::form-bool acl$nres  0]
	lappend lines [list Normal $htri $hres $hdhcp $hacl]
	incr nres
    }

    set listereseaux [::arrgen::output "html" $conf(tabreseaux) $lines]

    #
    # Permissions
    #

    set lines {}
    set n 1
    set sql "SELECT adr, allow_deny \
			FROM dns.dr_ip \
			WHERE idgrp = $idgrp \
			ORDER BY adr"
    pg_select $dbfd $sql tab {
	set a $tab(allow_deny)
	set menuallow [::webapp::form-menu allow$n 1 0 \
					{{1 allow} {0 deny}} \
					[list [expr 1 - $a]] \
				    ]
	set textcidr [::webapp::form-text adr$n 1 49 49 $tab(adr)]
	lappend lines [list Normal $menuallow $textcidr]
	incr n
    }

    for {set i 0} {$i < 5} {incr i} {
	set menuallow [::webapp::form-menu allow$n 1 0 \
					{{1 allow} {0 deny}} \
					{0} \
				    ]
	set textcidr [::webapp::form-text adr$n 1 49 49 ""]
	lappend lines [list Normal $menuallow $textcidr]
	incr n
    }

    set listedroits [::arrgen::output "html" $conf(tabdrip) $lines]

    #
    # Permissions on equipments (topo)
    #

    set lines {}
    set n 1
    set sql "SELECT rw, pattern, allow_deny \
			FROM topo.dr_eq \
			WHERE idgrp = $idgrp \
			ORDER BY rw, allow_deny DESC, pattern"
    pg_select $dbfd $sql tab {
	set a $tab(rw)
	set menurw    [::webapp::form-menu eqrw$n 1 0 \
					{{0 read} {1 write}} \
					[list $a] \
				    ]
	set a $tab(allow_deny)
	set menuallow [::webapp::form-menu eqallow$n 1 0 \
					{{1 allow} {0 deny}} \
					[list [expr 1 - $a]] \
				    ]
	set pattern [::webapp::form-text eqpat$n 1 70 200 $tab(pattern)]
	lappend lines [list Normal $menurw $menuallow $pattern]
	incr n
    }

    for {set i 0} {$i < 5} {incr i} {
	set menurw [::webapp::form-menu eqrw$n 1 0 \
					{{0 read} {1 write}} \
					{0} \
				    ]
	set menuallow [::webapp::form-menu eqallow$n 1 0 \
					{{1 allow} {0 deny}} \
					{0} \
				    ]
	set pattern [::webapp::form-text eqpat$n 1 70 200 ""]
	lappend lines [list Normal $menurw $menuallow $pattern]
	incr n
    }

    set listedreq [::arrgen::output "html" $conf(tabdreq) $lines]

    #
    # DHCP profiles
    #

    set lines {}
    lappend lines [list "Title" [mc "Sort class"] [mc "DHCP profile"]]
    set lprof [::pgsql::getcols $dbfd dns.dhcpprofil "" "nom ASC" {nom nom}]
    set sql "SELECT p.nom AS nom, dr.tri AS tri
			FROM dns.dr_dhcpprofil dr, dns.dhcpprofil p
			WHERE dr.idgrp = $idgrp
			    AND dr.iddhcpprofil = p.iddhcpprofil
			ORDER BY dr.tri ASC, p.nom ASC"
    set nprof 1
    pg_select $dbfd $sql tab {
	set p        $tab(nom)
	set tri      $tab(tri)

	set idx [lsearch -exact $lprof [list $p $p]]
	if {$idx == -1} then {
	    d error [mc "Group have access to DHCP profile '%s' which do not exist in the database" $d]
	}
	set htri  [::webapp::form-text tridhcpprof$nprof 1 5 5 $tri]
	set hprof [::webapp::form-menu nomdhcpprof$nprof 1 0 $lprof [list $idx]]
	lappend lines [list Normal $htri $hprof]
	incr nprof
    }

    for {set i 1} {$i <= 5} {incr i} {
	set htri  [::webapp::form-text tridhcpprof$nprof 1 5 5 ""]
	set hprof [::webapp::form-menu nomdhcpprof$nprof 1 0 $lprof {}]
	lappend lines [list Normal $htri $hprof]
	incr nprof
    }

    set listedhcpprof [::arrgen::output "html" $conf(tabdhcpprofil) $lines]

    #
    # End of script: output page and close database
    #

    d urlset "%URLFORM%" $conf(next) {}
    d result $conf(page) [list \
				[list %TITRE% $title] \
				[list %ORGGRP% $orggrp] \
				[list %NEWGRP% $newgrp] \
				[list %ADMIN% $admin] \
				[list %DROITSMTP% $droitsmtp] \
				[list %DROITTTL% $droitttl] \
				[list %DROITMAC% $droitmac] \
				[list %MESSAGEGROUPE% $msggrp] \
				[list %LISTECOR% $listecor] \
				[list %LISTEDOMAINES% $listedomaines] \
				[list %LISTERESEAUX% $listereseaux] \
				[list %LISTEDROITS% $listedroits] \
				[list %LISTEDREQ% $listedreq] \
				[list %LISTEDHCPPROFILS% $listedhcpprof] \
			    ]
}

::webapp::cgi-exec main $debug
