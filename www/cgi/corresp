#!%TCLSH%

#
# Search users associated with a network, an IP address or a host name.
#
# Called by: accueil
#
# Parameters (form or url):
#	- critere : search criterion (ip, cidr, or fqdn, or _ for "here")
#
# History
#   2002/07/25 : pda      : design
#   2003/05/13 : pda/jean : use auth base
#   2004/01/14 : pda/jean : add IPv6
#   2004/08/06 : pda/jean : extend network access rights
#   2005/02/24 : pda      : add case role mail without IP address
#   2010/10/17 : pda      : add search case for "here"
#   2010/12/10 : pda      : i18n
#

#
# Template pages used by this script
#

set conf(err)		erreur.html
set conf(page)		corresp.html

#
# Next actions
# 

set conf(next)		"corresp"

#
# Script parameters
#

set conf(form)	{
	{critere	0 1 {}}
}

#
# Netmagis general library
#

source %LIBDNS%

# ::webapp::cgidebug ; exit

##############################################################################
# Utilities
##############################################################################

proc user-error {crit msg} {
    global conf

    set qmsg  [::webapp::html-string $msg]
    set qcrit [::webapp::html-string $crit]
    set result [::webapp::helem "font" $qmsg "color" "#FF0000"]
    d urlset "%URLFORM%" $conf(next) {}
    d result $conf(page) [list \
				[list %CRITERE% $qcrit] \
				[list %RESULTAT% $result] \
			    ]
    exit 0
}

##############################################################################
# Main procedure
##############################################################################

proc main {} {
    global conf

    #
    # Initialization
    #

    ::dnscontext create d
    d init-cgi "dns" $conf(err) "" $conf(form) ftab dbfd tabuid

    #
    # Is criterion an IP address, a host name, anything else?
    #

    set crit [string trim [lindex $ftab(critere) 0]]

    if {$crit eq ""} then {
	#
	# Nothing. Not an error, strictly speaking, but treated as an
	# error.
	#

	user-error "" ""

    } elseif {$crit eq "_"} then {
	#
	# Here
	#

	global env

	if {[info exists env(REMOTE_ADDR)]} then {
	    set addr $env(REMOTE_ADDR)
	    set crit $addr
	    read-rr-by-ip $dbfd $addr trr
	} else {
	    user-error "" ""
	}
    } elseif {[check-ip-syntax $dbfd $crit "inet"] eq ""} then {
	#
	# IP address
	#
	set addr $crit

	#
	# Attempt to search for the host. It if exists, trr will
	# be filled. If it does not exists, trr will not be created.
	# We don't test result, since existence of trr(idrr) will
	# suffice for next steps.
	#
	read-rr-by-ip $dbfd $crit trr

    } elseif {[check-ip-syntax $dbfd $crit "cidr"] eq ""} then {
	#
	# CIDR
	#
	set addr $crit

    } elseif {[regexp {^([^.]+)\.(.+)$} $crit bidon name domain]} then {
	#
	# Name and domain
	#
	set iddom [read-domain $dbfd $domain]
	if {$iddom == -1} then {
	    user-error $crit [mc "Domain '%s' not found" $domain]
	}

	if {! [read-rr-by-name $dbfd $name $iddom trr]} then {
	    user-error $crit [mc "Host '%s' not found" "$name.$domain"]
	}

    } elseif {[regexp {^([^.]+)$}  $crit bidon name]} then {
	#
	# Name without domain: use the preferred domain of the user.
	#
	set qname [::pgsql::quote $name]
	set idrr -1
	set iddom -1
	set sql "SELECT d.iddom, d.nom
			FROM global.corresp c, global.groupe g, dns.dr_dom dd, dns.domaine d
			WHERE c.idcor = $tabuid(idcor)
			    AND c.idgrp = g.idgrp
			    AND g.idgrp = dd.idgrp
			    AND dd.iddom = d.iddom
			ORDER BY dd.tri ASC
			LIMIT 1
			"
	pg_select $dbfd $sql tab {
	    set iddom $tab(iddom)
	    set domain $tab(nom)
	}
	if {$iddom == -1} then {
	    d error [mc "No default domain"]
	}
	if {! [read-rr-by-name $dbfd $name $iddom trr]} then {
	    user-error $crit [mc "Host '%s' not found" "$name.$domain"]
	}

    } else {
	#
	# We should not come here.
	#
	user-error $crit [mc "Invalid search criterion '%s'" $crit]
    }

    #
    # If we come here, it means that the search criterion is ok.
    # If trr(idrr) exists, it means that name or address match a real host.
    #

    #
    # If it is an alias, look for the pointed host.
    #

    if {[info exists trr(cname)]} then {
	if {$trr(cname) ne ""} then {
	    set idrr $trr(cname)
	    unset trr
	    if {! [read-rr-by-id $dbfd $idrr trr]} then {
		d error [mc "Internal error: object pointed by alias is not found"]
	    }
	}
    }

    #
    # If it is a mail role, without IP address, look for mail host.
    #

    if {[info exists trr(rolemail)] && [llength $trr(ip)] == 0} then {
	if {$trr(rolemail) ne ""} then {
	    set idrr $trr(rolemail)
	    unset trr
	    if {! [read-rr-by-id $dbfd $idrr trr]} then {
		d error [mc "Internal error: mail host of role mail not found"]
	    }
	}
    }

    #
    # If criterion was a name and not an IP address, extract one of its
    # IP addresses (random among all IP addresses)
    #

    if {! [info exists addr]} then {
	if {! [info exists trr(ip)]} then {
	    d error [mc "Internal error: no IP address"]
	}
	set addr [lindex $trr(ip) 0]
    }

    #
    # Display address
    #

    set result ""
    append result [mc "Searched address: %s" $addr]
    append result "<P>\n"

    #
    # If we have found a host, display pertinent informations.
    #

    if {[info exists trr(idrr)]} then {
	append result [display-rr $dbfd -1 trr]
	append result "<P>"
    }

    #
    # Look for users who have access to this IP address.
    #

    set sql "SELECT c.login, c.idcor
		    FROM global.corresp c, global.groupe g,
			dns.dr_reseau d, dns.reseau r
		    WHERE c.idgrp = g.idgrp
			AND g.idgrp = d.idgrp
			AND d.idreseau = r.idreseau
			AND ('$addr' <<= r.adr4 OR '$addr' <<= r.adr6)
			ORDER BY g.admin, g.nom
			"
    set lcor {}
    pg_select $dbfd $sql tab {
	lappend lcor [list $tab(login) $tab(idcor)]
    }

    #
    # Among selected users, search for those who have access to
    # this host (checking all other permissions).
    #

    foreach cor $lcor {
	lassign $cor login idcor
	if {[check-authorized-ip $dbfd $idcor $addr]} then {
	    set n [read-user $dbfd $login tabuid msg]
	    if {$n != 1} then {
		d error $msg
	    }
	    append result [display-user tabuid]
	    append result "\n<P>\n"
	}
    }

    #
    # End of script: output page and close database
    #

    d urlset "%URLFORM%" $conf(next) {}
    d result $conf(page) [list \
				[list %CRITERE% $crit] \
				[list %RESULTAT% $result] \
			    ]
}

::webapp::cgi-exec main $debug
