$Id: README,v 1.3 2008-07-29 12:54:03 pda Exp $

Quelques indications pour faciliter les modifications de structure
du graphe.

------------------------------------------------------------------------------
I - Changement du numéro de version
------------------------------------------------------------------------------

Pour changer le numéro de version du fichier ".graph" utilisé
par tous les outils :

    graph.h
	ajouter à la suite des #define VERSIONxx
		#define	VERSIONyy	yy

    binread.c
	sortir une erreur pour le cas actuel, et ajouter un nouveau
	cas reprenant (avec modifications éventuelles) l'ancien
	code.

    binwrite.c
	changer la variable hdr (struct graphhdr) pour changer
	VERSIONxx et VERSIONyy.

------------------------------------------------------------------------------
II - Ajout d'un attribut simple
------------------------------------------------------------------------------

Pour ajouter un attribut simple (mono-valué) à un objet existant :

    Cet attribut sera soit une valeur scalaire (entier par exemple),
    soit un pointeur. Dans ce cas, soit c'est une chaîne (i.e. un
    pointeur dans la table des symboles) soit une référence à une
    autre structure.

    Première action : changer le numéro de version du fichier
    ".graph". Voir ci-dessus.

    graph.h
	modifier la structure correspondante.

    textread.c
	modifier la fonction process_xxx() correspondante, en
	ajoutant le nom de l'attribut textuel attendu dans la
	variable de type "struct attrcheck []", et en complétant
	le code existant.

	si le nom de l'attribut textuel est nouveau, ne pas oublier
	de l'ajouter dans la fonction parse_attr(), avec le nombre
	de paramètres associés.

    textwrite.c
	ajouter l'affichage de l'attribut au bon endroit.

    absrel.c
	si l'attribut est un pointeur, il faut convertir l'adresse
	en index lors de bin_write(). Pour ce faire, ajouter le code
	de conversion ABSTOREL() dans ce fichier.

    relabs.c
	idem absrel.c, dans l'autre sens (bin_read() et RELTOABS()).

    dupgraph.c
	toujours si l'attribut est un pointeur, il faut le mettre
	à jour après une copie du graphe en mémoire. Il faut donc
	ajouter le code TRANSPTR() dans la fonction dup_all_mobj().

------------------------------------------------------------------------------
III - Ajout d'un attribut complexe ou d'un nouvel objet
------------------------------------------------------------------------------

L'ajout d'un attribut complexe (multi-valué) à un objet existant
correspond à l'ajout d'un attribut simple (cas précédent), mais
la valeur correspondante sera le plus souvent la tête d'une liste
vers de nouveaux objets.

Pour ajouter un nouvel objet :

    Première action : changer le numéro de version du fichier
    ".graph". Voir ci-dessus (I-).

    graph.h
	ajouter la nouvelle structure. Appelons-la "struct xxx"

	ajouter #define XXXMOBJIDX
	ajouter #define xxxmobj
	changer #define NB_MOBJ

	adapter les références (i.e. si une structure existante
	doit faire référence à la nouvelle struct xxx).

    textread.c
	ajouter éventuellement une fonction
	    struct xxx *create_xxx (...)

	ajouter le code pour traiter la création d'une struct xxx

	ajouter le code pour initialiser le nouveau mobj dans la
	fonction text_read().

    textwrite.c
	ajouter le code pour afficher les struct xxx

    absrel.c
	ajouter un bloc pour convertir l'adresse en index lors
	de bin_write().

    relabs.c
	idem absrel.c, dans l'autre sens (bin_read()).

    dupgraph.c
	ajouter le code pour réaliser la copie de cette structure.
	Pour ce faire, il faut partir des références à cette nouvelle
	structure. Pour donner un exemple, les SSID ne sont référencés
	que par les noeuds de type L1. Il faut donc parcourir tous les
	L1 pour pouvoir dupliquer les SSID. Attention : il y a deux
	passes dans la fonction.
