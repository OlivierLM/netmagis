#!/usr/local/bin/tclsh8.4

#
# $Id: analyser,v 1.2 2007-01-09 10:46:10 pda Exp $
#

set debug 0
#set debug 1
#set debug 2

proc parse-desc {desc _linkname _statname _descname _msg} {
    upvar $_linkname linkname
    upvar $_statname statname
    upvar $_descname descname
    upvar $_msg msg

    # exemples de syntaxe admises :
    # Lnnn vers toto 			ancienne syntaxe
    # <Lnnn> vers toto			nouvelle syntaxe
    # <Lnnn MLnnn.crc> vers toto	nouvelle syntaxe avec métrologie
    # X rch ulp bidule			ancienne syntaxe
    # <X> rch ulp bidule		nouvelle syntaxe
    # <X MXnnn> rch ulp bidule		nouvelle syntaxe avec métrologie

    set linkname ""
    set statname ""
    set descname ""

    set r 1
    if {[regexp {([^<]*)<\s*([^<>]+)>(.*)} $desc bidon p1 liste p2]} then {
	while {[regexp {^(\S+)(\s+(.*))?$} $liste bidon premier bidon liste]} {
	    switch -glob -- $premier {
		X* -
		L* {
		    if {[string equal $linkname ""]} then {
			set linkname $premier
		    } else {
			set msg "duplicate link name"
			set r 0
			break
		    }
		}
		M* {
		    if {[string equal $statname ""]} then {
			set statname $premier
		    } else {
			set msg "duplicate stat name"
			set r 0
			break
		    }
		}
		* {
		    set msg "invalid interface description '<$premier>'"
		    set r 0
		    break
		}
	    }
	}
	set descname [string trim "[string trim $p1] [string trim $p2]"]
    } elseif {[regexp {^(\S+)(\s+.*)?$} $desc bidon linkname p1]} {
	set descname [string trim $p1]
    } else {
	set msg "invalid link name"
	set r 0
    }

    #
    # Conversion de la description en chaîne de chiffres hexa
    # pour éviter d'avoir à quoter les éléments.
    # Cette chaîne sera propagée dans le graphe, et chaque outil
    # utilisant le graphe devra faire la conversion inverse
    # avec une commande comme par exemple : "binary format H* $desc"
    #

    binary scan $descname H* descname

    return $r
}

proc parse {debug libdir type model fdin fdout tab eq} {
    upvar $tab t

    global loadedfiles

    set error 0
    if {[string equal $libdir ""]} then {
	set file "parse-$type.tcl"
    } else {
	set file "$libdir/parse-$type.tcl"
    }

    if {! [info exists loadedfiles($file)]} then {
	if {[file exists $file]} then {
	    uplevel #0 source $file
	    set loadedfiles($file) 1
	} else {
	    puts stderr "Fichier '$file' inexistant"
	    set error 1
	}
    }

    if {! $error} then {
	set error [$type-parse $debug $model $fdin $fdout t $eq]
    }

    return $error
}

proc main {debug libdir type model fichier eq} {
    set fd [open $fichier "r"]
    set error [parse $debug $libdir $type $model $fd stdout tab $eq]
    close $fd

    if {! $error} then {
#	parray tab
    }
}

if {[llength $argv] != 5} then {
    puts stderr \
	"$argv0 <libdir> <cisco|juniper> <model> <fichier conf> <eq name>"
    exit 1
}

main $debug \
	[lindex $argv 0] \
	[lindex $argv 1] \
	[lindex $argv 2] \
	[lindex $argv 3] \
	[lindex $argv 4]
