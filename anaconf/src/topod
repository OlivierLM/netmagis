#! %TCLSH%

#  
# Recette pour accélérer le déroulement de rancid+topo pour permettre
# la modification de conf par interface Web topo
#  
# Il faut deux spools différents :
#	- spool des détections de modification d'équipement
#	- spool des modifications (à propager, puis ensuite effectuées)
#  
# Lorsqu'une modification est effectuée sur l'interface Web :
#
#	Une entrée est générée par modification effectuée (ex: chgt
#	d'affectation d'un port dans un vlan) avec les attributs
#	suivants :
#	- login de l'utilisateur
#	- date de la requête de modification
#	- équipement (RR)
#	- interface
#	- description d'interface
#	- vlan d'accès
#	- vlan voix
#	L'entrée est une ligne dans la table topo.ifchanges de la base
#	WebDNS.
#
#	Lorsque la modification est propagée sur l'équipement, les
#	attributs suivants sont actualisés :
#	- date de modification
#	- log de la modification (sortie de la commande de modification)
#  
#  Lorsqu'une modification sur un équipement est détectée :
#  
#	La modification peut être soit une modification automatique
#	poussée à partir de l'interface Web, soit une modification
#	manuelle par un très doué ingénieur réseau.
#  
#	La détection peut-être réalisée via une trappe SNMP, via
#	l'analyse des fichiers de log ou via l'accounting Radius.
#	Dans tous les cas, une entrée est générée par modification
#	détectée, avec les attributs suivants :
#	- équipement (fqdn ou nom incomplet)
#	- login
#	- date de détection de l'événement
#	L'entrée est une ligne dans la table topo.modeq de la base
#	WebDNS.
#
#	Lorsque l'entrée est traitée, l'attribut suivant est actualisé :
#	- booléen "traité"
#  
#  Rancid est remplacé par le programme, constitué d'une boucle infinie
#  (démon), dont le corps est :
#  
#   1- une fois par nuit, faire une récupération des confs
#	(rancid original) et une analyse des confs (topo) complètes
#  
#   2- analyser le spool de modifications à effectuer, en regroupant
#	les modifications par équipement (mais en conservant la
#  	séquence des modifications)
#  
#	a- tester si l'équipement est accessible (fping)
#  	    => l'idée est de ne pas attendre le timeout TCP si
#  		l'équipement est éteint/crashé/etc
#  
#	b- propager ces modifications sur l'équipement s'il est
#  	    accessible (normalement, ces modifications entrainent
#  	    l'apparition d'une entrée dans le spool des modifications
#  	    détectées)
#  
#	c- si la propagation s'est passée sans problème, déplacer les
#  	    fichiers dans le spool des modifications effectuées.
#  
#	d- conserver la liste des équipements pour lesquels la
#  	    propagation des modifications s'est effectuée sans
#  	    problème.
#  
#   3- analyser le spool des détections de modifications
#  
#  	a- si l'équipement n'est pas dans routers.db, alors râler
#  
#  	b- si l'équipement est accessible, alors lancer rancid pour
#  	    récupérer sa configuration
#  
#	c- si la configuration d'un équipement a été modifiée/propagée
#  	    avec succès, mais que cet équipement n'apparaît pas dans
#  	    le spool des détections de modifications, alors râler
#  
#	d- lancer topo en restreignant l'analyse aux seuls équipements
#  	    modifiés
#  
#	e- supprimer les fichiers du spool des modifications effectuées
#  
#
# Historique :
#  2010/02/16 : pda/jean : création
#

set conf(fping) "%FPING% %s"

set conf(dumpgraph)	"%TOPODIR%/bin/dumpgraph < %GRAPH%"
set conf(extracteq)	{%TOPODIR%/bin/extracteq %1$s %2$s < %GRAPH%}

set conf(delay)		%DELAY%

set conf(pkg)		%PKGTCL%
set conf(libdns)	%LIBDNS%

set conf(base)		%BASE%

lappend auto_path $conf(pkg)

package require pgsql

source $conf(libdns)

#
# Commandes de modification à envoyer pour chaque équipement
#
# Ces quatre actions doivent être paramétrées en fonction du
# type d'équipement. Pour cela, le tableau confcmd contient
# les commandes à passer sur chaque type d'équipement.
#
# La clef est de la forme :
#   type:modele:action
# Le modèle peut être "*"
# Exemple :
#   confcmd(cisco:3750:ifaccess) ...
#   confcmd(cisco:*:ifaccess) ...
#
# La valeur est une liste de lignes à passer sur l'équipement.
# Ces lignes sont paramétrés.
#
# Les différentes actions sont :
#   
#   exec
#	commande shell a appeler pour envoyer des commandes à exécuter sur
#	l'équipement. Les autres actions sont exécutées sur l'équipement
#	lui-même.
#   prologue
#	entrer en mode configuration sur l'équipement
#   ifreset
#	remettre l'interface dans un mode connu (la plupart du temps par
#	suppression de tous les vlans sur l'interface).
#	Paramètres :
#	    %1$ : nom de l'interface
#   resetvlans
#	dans le cas où on ne peut pas remettre l'interface dans un mode
#	connu (par exemple sur HP), commande à passer pour tous les vlans
#	pour retirer l'interface de ces vlans.
#	Paramètres :
#	    %1$ : nom de l'interface
#	    %2$ : numéro de vlan
#   ifaccess
#	positionner un vlan d'accès donné sur une interface.
#	Paramètres :
#	    %1$ : nom de l'interface
#	    %2$ : numéro de vlan
#   ifvoice
#	positionner un voice vlan donné sur une interface.
#	Paramètres :
#	    %1$ : nom de l'interface
#	    %2$ : numéro de vlan
#   ifdesc
#	positionner la description sur une interface.
#	Paramètres :
#	    %1$ : nom de l'interface
#	    %2$ : description
#   epilogue
#	quitter le mode de configuration et enregistrer la configuration saisie
#
#

array set confcmd {
    cisco:*:exec {/usr/local/libexec/rancid/clogin -autoenable -u %RANCIDMODUSER% -p %RANCIDMODPASS%}

    cisco:*:prologue {
	  {configure terminal}
    }
    cisco:*:ifreset {
	  {interface %1$s}
	  {no switchport}
	  {switchport}
    }
    cisco:*:ifdisable {
	{interface %1$s}
	{shutdown}
    }
    cisco:*:ifenable {
	{interface %1$s}
	{no shutdown}
    }
    cisco:*:ifaccess {
	      {interface %1$s}
	      {switchport access vlan %2$s}
	  }
    cisco:*:ifvoice {
	      {interface %1$s}
	      {switchport voice vlan %2$s}
	  }
    cisco:*:ifdesc {
	      {interface %1$s}
	      {description %2$s}
	  }
    cisco:*:epilogue {
	      {line con 0}
	      {exit}
	      {exit}
	      {write memory}
	  }

    juniper:*:exec {/usr/local/libexec/rancid/jlogin -autoenable -u %RANCIDMODUSER% -p %RANCIDMODPASS%}

    juniper:*:prologue {
	{configure}
    }
    juniper:*:ifreset {
	{delete interfaces %1$s unit 0 family ethernet-switching}
	{delete ethernet-switching-options voip interface %1$s}
    }
    juniper:*:ifdisable {
	{set interfaces %1$s disable}
    }
    juniper:*:ifenable {
	{delete interfaces %1$s disable}
    }
    juniper:*:ifaccess {
	{set interfaces %1$s unit 0 family ethernet-switching port-mode access}
	{set interfaces %1$s unit 0 family ethernet-switching vlan members %2$s}
    }
    juniper:*:ifdesc {
	{set interfaces %1$s description "%2$s"}
    }
    juniper:*:ifvoice {
	{set ethernet-switching-options voip interface %1$s vlan %2$s}
    }
    juniper:*:epilogue {
	{commit}
	{exit configuration}
    }

    hp:*:exec {/usr/local/libexec/rancid/hlogin -autoenable -u %RANCIDMODUSER% -p %RANCIDMODPASS%}
    hp:*:prologue {
	{configure terminal}
    }
    hp:*:resetvlans {
	{vlan %2$s}
	{no tagged %1$s}
	{no untagged %1$s}
    }

    hp:*:ifenable {
	{interface %1$s}
	{enable}
    }
    hp:*:ifdisable {
	{interface %1$s}
	{disable}
    }
    hp:*:ifaccess {
	{vlan %2$s}
	{untagged %1$s}
    }
    hp:*:ifvoice {
	{vlan %2$s}
	{tagged %1$s}
    }
    hp:*:ifdesc {
	{interface %1$s}
	{name "%2$s"}
    }
    hp:*:epilogue {
	{vlan 1}
	{exit}
	{exit}
	{write memory}
    }
}

#
# Exécute une séquence de commandes sur un équipement
#
# Entrée :
#  - fqdn : nom complet de l'équipement
#  - type : type d'équipement (ex: cisco, juniper etc.)
#  - model : modèle d'équipement (ex: 3750, M20 etc.)
#  - lcmd : liste des commandes à exécuter
#  - _msg : en retour, message d'erreur ou sortie de la commande
# Sortie
#  - valeur de retour : 1 si ok, 0 si erreur
#
# Historique : 
#  2010/02/18 : pda/jean : création
#

proc execute-cmd {fqdn type model lcmd _msg} {
    global conf
    upvar $_msg msg

    # set cmd [join $lcmd ";"]

    set tmp "/tmp/topod.[pid]"
    set fd [open $tmp "w"]
    puts $fd [join $lcmd "\n"]
    close $fd
    
    set exec [fetch-conf $type $model "exec"]

    if {[catch {exec sh -c "$exec -x $tmp $fqdn"} msg]} then {
	set r 0
    } else {
	set r 1
    }

    file delete -force $tmp

    #
    # XXXXXXXXXX : interpréter le fichier résultant de l'exécution
    #

    return $r
}

#
# Renvoie la commande associée à un type d'équipement
# et un type de configuration
#
# Entrée :
#  - type : type d'équipement (ex: cisco, juniper etc.)
#  - model : modèle d'équipement (ex: 3750, M20 etc.)
#  - context : voir description du tableau confcmd
# Sortie
#  - valeur de retour : commande à exécuter ou liste vide si non trouvé
#
# Historique : 
#  2010/02/16 : pda/jean : création
#

proc fetch-conf {type model context} {
    global confcmd
    
    set r {}
    if {[info exists confcmd($type:*:$context)]} then {
	set r $confcmd($type:*:$context)
    } elseif {[info exists confcmd($type:$model:$context)]} then {
	set r $confcmd($type:$model:$context)
    }

    return $r
}


#
# Génère une liste de commande pour remettre une interface
# dans un état connu et l'activer
#
# Entrée :
#  - eq : nom de l'équipement
#  - type : type d'équipement (ex: cisco, juniper etc.)
#  - model : modèle d'équipement (ex: 3750, M20 etc.)
#  - iface : nom de l'interface
# Sortie :
#  - valeur de retour : liste des commandes à passer sur l'équipement
#
# Historique : 
#  2010/09/23 : pda/jean : création
#

proc resetif {eq type model iface} {

    #
    # Cherche la sequence de commande pour remettre l'interface
    # dans un mode connu
    #

    set lcmd {}
    foreach fmt [fetch-conf $type $model "ifreset"] {
	lappend lcmd [format $fmt $iface]
    }

    set l2 [fetch-conf $type $model "resetvlans"]
    if {[llength $l2]>0} then {
	foreach vlan [get-vlans $eq $iface] {
	    foreach fmt $l2 {
		lappend lcmd [format $fmt $iface $vlan]
	    }
	}
    }

    #
    # Active l'interface
    #

    foreach fmt [fetch-conf $type $model "ifenable"] {
	lappend lcmd [format $fmt $iface]
    }
    
    return $lcmd
}

#
# Liste les vlans pour un équipement et une interface donnée
#
# Entrée :
#  - eq : nom de l'équipement
#  - iface : nom de l'interface
# Sortie
#  - valeur de retour : liste des vlans trouvés
#
# Historique : 
#  2010/09/23 : pda/jean : création
#

proc get-vlans {eq iface} {
    global conf

    set lvlans {}

    # supprimer le nom de domaine pour ne garder que le nom court
    regsub {\..*} $eq "" eqcourt

    set cmd [format $conf(extracteq) $eqcourt $iface]
    if {! [catch {set fd [open "|$cmd" "r"]} msg]} then {
	while {[gets $fd ligne] > -1} {
	    foreach vlan [lreplace $ligne 0 7] {
		lappend lvlans [lindex $vlan 0]
	    }
	}
	close $fd
    } else {
	puts stderr "extracteq : $msg"
    }

    return $lvlans
}


#
# Recherche le type et le modèle des équipements connus dans le graphe
#
# Entrée :
#  _tabtype : nom du tableau contenant en retour les types
# Sortie :
#  tabtype : tableau, indexé par nom court de l'équipement, contenant
#	tabtype(<eq>) {<type> <model>}
#  valeur de retour : message d'erreur ou chaîne vide si ok
# 
# Historique : 
#  2010/02/25 : pda/jean : création
#

proc lire-type-eq {_tabtype} {
    global conf
    upvar $_tabtype tabtype

    set msg ""

    set cmd $conf(dumpgraph)
    if {! [catch {set fd [open "|$cmd" "r"]} msg]} then {
	set msg ""
	while {[gets $fd ligne] > -1} {
	    switch [lindex $ligne 0] {
		eq {
		    array set t $ligne
		    set eq $t(eq)
		    set type $t(type)
		    set model $t(model)

		    set tabtype($eq) [list $type $model]
		    array unset t
		}
	    }
	}
	close $fd
    }

    return $msg
}

#
# Teste l'accessibilité d'un équipement
#
# Entrée :
#   - eq : nom de l'équipement
# Sortie :
#   - valeur de retour : vide si ok, ou message d'erreur si pas accessible
#
# Historique
#   2010/10/14 : pda/jean : fonction séparée
#

proc test-ping {eq} {
    global conf

    # 
    # Teste si l'équipement est joignable
    # 

    set cmd [format $conf(fping) $eq]

    if {[catch {exec sh -c $cmd} msg]} then {
	set r $msg
    } else {
	set r ""
    }

    return $r
}

#
# Conserve une trace de l'échec d'une tentative de configuration
# d'un équipement
#
# Entrée :
#   - idrr : id de l'équipement
#   - msg : message d'erreur suite à la tentative
#   - ctxt(dbfd) : accès à la base
# Sortie :
#   - aucune
# 
# Historique : 
#  2010/10/14 : pda/jean : création
#

proc update-modlog {idrr msg} {
    global ctxt

    set qmsg [::pgsql::quote $msg]
    set sql "UPDATE topo.ifchanges
		    SET modlog = '$qmsg', moddate = now ()
		    WHERE idrr = $idrr AND processed = 0"
    if {! [::pgsql::execsql $ctxt(dbfd) $sql m]} then {
	puts stderr "XXX cannot update database in update-modlog ($m)"
    }
}

#
# Marquer les changements comme étant traités, en y inscrivant 
# le log des lignes envoyées à l'équipement
#
# Entrée :
#   - idrr : id de l'équipement
#   - lreqdate : liste des dates des changements
#   - msg : message de log
#   - ctxt(dbfd) : accès à la base
# Sortie :
#   - aucune
# 
# Historique : 
#  2010/10/14 : pda/jean : création
#

proc mark-processed {idrr lreqdate msg} {
    global ctxt

    set reqdate [join $lreqdate "', '"]

    set qmsg [::pgsql::quote $msg]
    set sql "UPDATE topo.ifchanges
		    SET processed = 1, modlog = '$qmsg', moddate = now ()
		    WHERE idrr = $idrr AND reqdate IN ('$reqdate')"
    if {! [::pgsql::execsql $ctxt(dbfd) $sql m]} then {
	puts stderr "XXX cannot update database in mark-processed ($m)"
    }
}

#
# Traduit les changements demandés dans le spool en une suite
# de lignes pour l'équipement donné
#
# Entrée :
#   - idrr : id de l'équipement
#   - eq : nom court de l'équipement
#   - type : type d'équipement (ex: cisco, juniper etc.)
#   - model : modèle d'équipement (ex: 3750, M20 etc.)
#   - lreqdate : en retour, liste des demandes trouvées (i.e. les dates)
#   - ctxt(dbfd) : accès à la base
# Sortie :
#   - valeur de retour : liste des lignes de commandes à passer sur l'équipement
#   - paramètre lreqdate : cf ci-dessus
# 
# Historique : 
#  2010/10/14 : pda/jean : création
#

proc traduire-changements {idrr eq type model _lreqdate} {
    upvar $_lreqdate lreqdate
    global ctxt

    set lreqdate {}
    set lcmd {}

    #
    # prologue
    #

    set prologue [fetch-conf $type $model "prologue"]
    set lcmd [concat $lcmd $prologue]

    #
    # Chercher toutes les modifications
    #

    set sql "SELECT c.*
		FROM topo.ifchanges c
		WHERE c.idrr = $idrr AND c.processed = 0
		ORDER BY c.reqdate ASC"

    pg_select $ctxt(dbfd) $sql tab {
	set reqdate $tab(reqdate)
	set iface $tab(iface)
	set ifdesc $tab(ifdesc)
	set ethervlan $tab(ethervlan)
	set voicevlan $tab(voicevlan)

	lappend lreqdate $reqdate

	#
	# Description de l'interface
	#

	if {! [string equal $ifdesc ""]} then {
	    foreach fmt [fetch-conf $type $model "ifdesc"] {
		lappend lcmd [format $fmt $iface $ifdesc]
	    }
	}

	#
	# On remet l'interface dans un état connu dans tous les cas
	#

	set lcmd [concat $lcmd [resetif $eq $type $model $iface]]

	# 
	# En fonction de ce qui se trouve dans le fichier spool, on 
	# execute des commandes sur l'équipement. 
	# 
	#   Ether	    Voice	Opération
	#   -----------------------------------------------------
	#   Non		    Non		Désactiver l'interface
	#   Non		    Oui		Voice vlan uniquement
	#   Oui		    Non		Vlan d'accès uniquement
	#   Oui		    Oui		Vlan d'accès + Voice Vlan
	#

	set ether [expr ![string equal $ethervlan ""]]
	set voice [expr ![string equal $voicevlan ""]]
	
	switch -- "$ether$voice" {
	    00	{
		# Rien
	    }
	    01	{
		foreach fmt [fetch-conf $type $model "ifvoice"] {
		    lappend lcmd [format $fmt $iface $voicevlan]
		}
	    }
	    10	{
		foreach fmt [fetch-conf $type $model "ifaccess"] {
		    lappend lcmd [format $fmt $iface $ethervlan]
		}
	    }
	    11  {
		foreach fmt [fetch-conf $type $model "ifvoice"] {
		    lappend lcmd [format $fmt $iface $voicevlan]
		}
		foreach fmt [fetch-conf $type $model "ifaccess"] {
		    lappend lcmd [format $fmt $iface $ethervlan]
		}
	    }
	}
    }

    #
    # Épilogue
    #

    set epilogue [fetch-conf $type $model "epilogue"]
    set lcmd [concat $lcmd $epilogue]

    return $lcmd
}

#
# Propage les modifications demandées (dans le spool) vers les
# équipements
#
# Entrée :
#   - _tabtype : nom du tableau contenant les types d'équipements
#   - ctxt(dbfd) : accès à la base
# Sortie :
#   - aucune
# 
# Historique : 
#  2010/10/14 : pda/jean : création
#

proc propager {_tabtype} {
    upvar $_tabtype tabtype
    global ctxt

    #
    # Trouver les équipements modifiés
    #

    set sql "SELECT DISTINCT (c.idrr) AS idrr,
			rr.nom || '.' || d.nom AS fqdn
		    FROM topo.ifchanges c, rr, domaine d
		    WHERE c.processed = 0
			AND c.idrr = rr.idrr
			AND rr.iddom = d.iddom"
    pg_select $ctxt(dbfd) $sql t1 {
	set idrr $t1(idrr)
	set fqdn $t1(fqdn)
	
	#
	# Rechercher le type et le modèle de l'équipement
	#

	# XXX : nom court
	regsub {\..*} $fqdn {} eq

	if {! [info exists tabtype($eq)]} then {
	    update-modlog $idrr "Unknown equipement type for '$eq'"
	    continue
	}
	set type  [lindex $tabtype($eq) 0]
	set model [lindex $tabtype($eq) 1]

	#
	# Test d'accessibilité
	#

	set msg [test-ping $fqdn]
	if {! [string equal $msg ""]} then {
	    update-modlog $idrr $msg
	    continue
	}

	#
	# L'équipement est accessible.
	# Récupérer toutes les modifications non traitées pour
	# cet équipement, les traduire en lignes de configuration,
	# les envoyer sur l'équipement, et marquer les modifications
	# comme étant traitées
	#

	set lcmd [traduire-changements $idrr $eq $type $model lreqdate]
	if {[execute-cmd $fqdn $type $model $lcmd msg]} then {
	    mark-processed $idrr $lreqdate $msg
	} else {
	    update-modlog $idrr $msg
	}
    }
}

proc lazy-connect {base} {
    global ctxt

    set r 1
    if {[string equal $ctxt(dbfd) ""]} then {
	if {[catch {set ctxt(dbfd) [pg_connect -conninfo $base]} msg]} then {
	    puts stderr "XXX : cannot connect to database ($msg)"
	    set r 0
	}
    }
    return $r
}

proc init-ctxt {} {
    global conf
    global ctxt

    set ctxt(dbfd) ""
}

#
# Programme principal
#

proc main {argv0 argv} {
    global conf
    global ctxt

#######################################
#    lire-apropager tab $conf(spoolapropager)
#    lire-type-eq tabtype
#
#    foreach eq [array names tab] {
#	# supprimer le nom de domaine pour ne garder que le nom court
#	regsub {\..*} $eq "" eqcourt
#	if {[info exists tabtype($eqcourt)]} then {
#	    set type  [lindex $tabtype($eqcourt) 0]
#	    set model [lindex $tabtype($eqcourt) 1]
#	    set lf [propager $eq $type $model $tab($eq)]
#	} else {
#	    puts stderr "Type/model inconnus pour l'équipement '$eq'"
#	}
#    }
#######################################


    init-ctxt

    set tabtype(_graph_modified) true

    set delay [expr $conf(delay)*1000]

    while {true} {
	#
	# Se reconnecter à la base si besoin est
	#

	if {! [lazy-connect $conf(base)]} then {
	    after $delay
	    continue
	}

	#
	# Détecter s'il faut faire un passage complet sur toutes
	# les conf (i.e. si on n'a pas encore fait de lecture complète
	# depuis cette nuit à 2h du matin par ex).
	#

	# XXX rien du tout pour l'instant
	    set tabtype(_graph_modified) true

	#
	# Détecter s'il faut relire les types d'équipements
	#

	if {$tabtype(_graph_modified)} then {
	    set msg [lire-type-eq tabtype]
	    if {! [string equal $msg ""]} then {
		puts stderr "cannot read equipment types ($msg)"
		after $delay
		continue
	    }
	}

	#
	# Chercher les modifications demandées par l'interface Web
	# et les propager
	#

	propager tabtype

	#
	# Chercher les modifications des équipements et reconstituer
	# le graphe
	#

#	detectmod
#	    set tabtype(_graph_modified) true

	#
	# Attendre
	#

	after $delay
    }

    return 0
}

exit [main $argv0 $argv]
