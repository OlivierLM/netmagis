'\" 
'\" 
'\" Copyright (c) 2002 by Pierre David <Pierre.David@crc.u-strasbg.fr>
'\" All rights reserved.
'\" 
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH pgsql n 1.2 Pgsql "PostgreSQL utility functions"
.BS
'\" Note: do not modify the .SH NAME line immediately below!
.SH NAME
::pgsql \- Utility functions to help with PostgreSQL databases
.SH SYNOPSIS
\fBpackage require Tcl 8\fR
.sp
\fBpackage require pgsql ?1.2?\fR
.sp
\fB::pgsql::quote\fR \fIstring\fR ?\fImaxindex\fR?
.sp
\fB::pgsql::execsql\fR \fIdbfd\fR \fIcmd\fR \fIresult\fR
.sp
\fB::pgsql::getcols\fR \fIdbfd\fR \fItable\fR \fIwhere\fR \fIorder\fR \fIlcol\fR
.sp
\fB::pgsql::lock\fR \fIdbfd\fR \fItables\fR \fIresult\fR
.sp
\fB::pgsql::unlock\fR \fIdbfd\fR \fIcommit\fR \fIresult\fR
.BE
.SH DESCRIPTION
.PP
This package provides procedures to help programming with
PostgreSQL.
.TP
\fB::pgsql::quote\fR \fIstring\fR ?\fImaxindex\fR?
Returns the string \fIstring\fR with all special characters quoted
as needed for PostgreSQL. The \fImaxindex\fR parameter is the
maximum size of the string, which defaults to 99999.
.TP
\fB::pgsql::execsql\fR \fIdbfd\fR \fIquery\fR \fIresult\fR
Executes the query \fIquery\fR on the database handle \fIdbfd\fR,
and returns 1 if it was successful. If an error occurred, this
function returns 0 and the \fIresult\fR variable is set to the error
message.
.TP
\fB::pgsql::getcols\fR \fIdbfd\fR \fItable\fR \fIwhere\fR \fIorder\fR \fIlcol\fR
Returns a list of values from a list of columns of PostgreSQL table.
The PostgreSQL database handle is identified by \fIdbfd\fR. The
parameter \fItable\fR is the name of the SQL table, \fIwhere\fR is
the SQL WHERE clause (without the WHERE keyword), \fIorder\fR order
is the SQL ORDER BY clause (without the ORDER BY keyword), and the
parameter \fIlcol\fR is the list of columns to be returned.
.TP
\fB::pgsql::lock\fR \fIdbfd\fR \fItables\fR \fIresult\fR
Begins a new SQL transaction on the PostgreSQL database identified
by the \fIdbfd\fR handle, and optionnaly locks one or more tables
whose names are included in the list \fItables\fR.
This function
returns 1 if the operation was successful. If an error occurred,
this function returns 0 and the \fIresult\fR variable is set to the
error message.
.TP
\fB::pgsql::unlock\fR \fIdbfd\fR \fIcommit\fR \fIresult\fR
Ends the SQL transaction initiated by \fBlock\fR on the PostgreSQL
database identified by the \fIdbfd\fR handle, by committing or
aborting it, depending on the value of the \fIcommit\fR parameter
(\fBcommit\fR or \fBabort\fR).
This function returns 1 if the operation was successful. If an error
occurred, this function returns 0 and the \fIresult\fR variable is
set to the error message.
.SH "SEE ALSO"
webapp(n),
arrgen(n)
.SH AUTHOR
Pierre David (Pierre.David@crc.u-strasbg.fr)
