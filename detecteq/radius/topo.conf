# -*- text -*-
##
## topo.conf -- configuration for freeradius SQL accounting
##

sql {
	#
	#  Set the database to one of:
	#
	#	mysql, mssql, oracle, postgresql
	#
	database = "postgresql"

	#
	#  Which FreeRADIUS driver to use.
	#
	driver = "rlm_sql_${database}"

	# Connection info:
	server = "mydbsrv.mydomain"
	#port = 3306
	login = "mylogin"
	password = "XXXXXX"

	# Database table configuration for everything except Oracle
	radius_db = "mydb"

	# If you are using Oracle then use this instead
        # radius_db = "(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521))(CONNECT_DATA=(SID=your_sid)))"

	# If you want both stop and start records logged to the
	# same SQL table, leave this as is.  If you want them in
	# different tables, put the start table in acct_table1
	# and stop table in acct_table2
	#acct_table1 = "radacct"
	#acct_table2 = "radacct"

	# Allow for storing data after authentication
	#postauth_table = "radpostauth"

	#authcheck_table = "radcheck"
	#authreply_table = "radreply"

	#groupcheck_table = "radgroupcheck"
	#groupreply_table = "radgroupreply"

	# Table to keep group info
	#usergroup_table = "radusergroup"

	# If set to 'yes' (default) we read the group tables
	# If set to 'no' the user MUST have Fall-Through = Yes in the radreply table
	# read_groups = yes

	# Remove stale session if checkrad does not see a double login
	#deletestalesessions = yes

	# Print all SQL statements when in debug mode (-x)
	sqltrace = no
	sqltracefile = ${logdir}/sqltrace.sql

	# number of sql connections to make to server
	num_sql_socks = 5

	# number of seconds to dely retrying on a failed database
	# connection (per_socket)
	connect_failure_retry_delay = 60

	# lifetime of an SQL socket.  If you are having network issues
	# such as TCP sessions expiring, you may need to set the socket
	# lifetime.  If set to non-zero, any open connections will be
	# closed "lifetime" seconds after they were first opened.
	lifetime = 0

	# Maximum number of queries used by an SQL socket.  If you are
	# having issues with SQL sockets lasting "too long", you can
	# limit the number of queries performed over one socket.  After
	# "max_qeuries", the socket will be closed.  Use 0 for "no limit".
	max_queries = 0

	# Set to 'yes' to read radius clients from the database ('nas' table)
	# Clients will ONLY be read on server startup.  For performance
	# and security reasons, finding clients via SQL queries CANNOT
	# be done "live" while the server is running.
	# 
	#readclients = yes

	# Table to keep radius client info
	#nas_table = "nas"

	#  Query config:  Username
	#######################################################################
	# This is the username that will get substituted, escaped, and added
	# as attribute 'SQL-User-Name'.  '%{SQL-User-Name}' should be used
	# below everywhere a username substitution is needed so you you can
	# be sure the username passed from the client is escaped properly.
	#
	# Uncomment the next line, if you want the sql_user_name to mean:
	#
	#    Use Stripped-User-Name, if it's there.
	#    Else use User-Name, if it's there,
	#    Else use hard-coded string "none" as the user name.
	#
	#sql_user_name = "%{%{Stripped-User-Name}:-%{%{User-Name}:-none}}"

	sql_user_name = "%{User-Name}"

	#######################################################################
	#  Default profile
	#######################################################################
	# This is the default profile. It is found in SQL by group membership.
	# That means that this profile must be a member of at least one group
	# which will contain the corresponding check and reply items.
	# This profile will be queried in the authorize section for every user.
	# The point is to assign all users a default profile without having to
	# manually add each one to a group that will contain the profile.
	# The SQL module will also honor the User-Profile attribute. This
	# attribute can be set anywhere in the authorize section (ie the users
	# file). It is found exactly as the default profile is found.
	# If it is set then it will *overwrite* the default profile setting.
	# The idea is to select profiles based on checks on the incoming
	# packets, not on user group membership. For example:
	# -- users file --
	# DEFAULT	Service-Type == Outbound-User, User-Profile := "outbound"
	# DEFAULT	Service-Type == Framed-User, User-Profile := "framed"
	#
	# By default the default_user_profile is not set
	#
	# default_user_profile = "DEFAULT"

	#######################################################################
	#  NAS Query
	#######################################################################
	#  This query retrieves the radius clients
	#
	#  0. Row ID (currently unused)
	#  1. Name (or IP address)
	#  2. Shortname
	#  3. Type
	#  4. Secret
	#######################################################################

	nas_query = ""

	#######################################################################
	#  Authorization Queries
	#######################################################################
	#  These queries compare the check items for the user
	#  in ${authcheck_table} and setup the reply items in
	#  ${authreply_table}.  You can use any query/tables
	#  you want, but the return data for each row MUST
	#  be in the  following order:
	#
	#  0. Row ID (currently unused)
	#  1. UserName/GroupName
	#  2. Item Attr Name
	#  3. Item Attr Value
	#  4. Item Attr Operation
	#######################################################################

	# Use these for case insensitive usernames. WARNING: Slower queries!
	# authorize_check_query = "SELECT id, UserName, Attribute, Value, Op \
	#   FROM ${authcheck_table} \
	#   WHERE LOWER(UserName) = LOWER('%{SQL-User-Name}') \
	#   ORDER BY id"
	# authorize_reply_query = "SELECT id, UserName, Attribute, Value, Op \
	#   FROM ${authreply_table} \
	#   WHERE LOWER(UserName) = LOWER('%{SQL-User-Name}') \
	#   ORDER BY id"

	authorize_check_query = ""

	authorize_reply_query = ""

	authorize_group_check_query = ""

	authorize_group_reply_query = ""

	#######################################################################
	# Simultaneous Use Checking Queries
	#######################################################################
	# simul_count_query     - query for the number of current connections
	#                       - If this is not defined, no simultaneous use checking
	#                       - will be performed by this module instance
	# simul_verify_query    - query to return details of current connections for verification
	#                       - Leave blank or commented out to disable verification step
	#                       - Note that the returned field order should not be changed.
	#######################################################################

	# Uncomment simul_count_query to enable simultaneous use checking
	# simul_count_query = "SELECT COUNT(*) FROM ${acct_table1} WHERE UserName='%{SQL-User-Name}' AND AcctStopTime IS NULL"
	# simul_verify_query = "SELECT RadAcctId, AcctSessionId, UserName, NASIPAddress, NASPortId, FramedIPAddress, CallingStationId, FramedProtocol FROM ${acct_table1} WHERE UserName='%{SQL-User-Name}' AND AcctStopTime IS NULL"



	#######################################################################
	#  Accounting Queries
	#######################################################################
	# accounting_onoff_query	- query for Accounting On/Off packets
	# accounting_update_query	- query for Accounting update packets
	# accounting_update_query_alt	- query for Accounting update packets
	#                               (alternate in case first query fails)
	# accounting_start_query	- query for Accounting start packets
	# accounting_start_query_alt	- query for Accounting start packets
	#                               (alternate in case first query fails)
	# accounting_stop_query		- query for Accounting stop packets
	# accounting_stop_query_alt	- query for Accounting start packets
	#                               (alternate in case first query doesn't
	#                                affect any existing rows in the table)
	#######################################################################

	accounting_onoff_query = ""

	accounting_update_query = ""

	accounting_update_query_alt = ""

	accounting_start_query = ""

	accounting_start_query_alt  = ""

	accounting_stop_query = "\
	    INSERT INTO topo.modeq (eq,login) VALUES \
			( \
			    SELECT rr.nom || '.' || domain.name, \
				    '%{User-Name}' \
			    FROM dns.rr, dns.rr_ip, dns.domain \
			    WHERE rr_ip.idrr = rr.idrr AND \
				    rr.iddom = domain.iddom AND \
				    rr_ip.addr = '%{NAS-IP-Address}' AND \
				    '%{User-Name}' NOT IN ( \
					    SELECT login \
					    FROM topo.ignoreequsers) \
			) \
		"


	accounting_stop_query_alt = ""

	#######################################################################
	# Group Membership Queries
	#######################################################################
	# group_membership_query        - Check user group membership
	#######################################################################

	# Use these for case insensitive usernames. WARNING: Slower queries!
	# group_membership_query = "SELECT GroupName FROM ${usergroup_table} WHERE LOWER(UserName) = LOWER('%{SQL-User-Name}') ORDER BY priority"

	group_membership_query = ""

	#######################################################################
	# Authentication Logging Queries
	#######################################################################
	# postauth_query                - Insert some info after authentication
	#######################################################################
	postauth_query = ""

}
