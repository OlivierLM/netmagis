#
# Historique :
#     2004/11/07    : jean     : conception
#     2006/01/05    : pda      : changement chemin pour la topo
# 
#
# Définition des paramètres de pollmac. Les 
# valeurs retournée par la fonction initpol
# constituent la "politique" de collecte
# pour ipmac et portmac.
#
# NB : * ce script est inclus au début du script pollmac.


# Répertoire où se situe les scripts de collecte
set conf(scriptdir) "/local/applis/mac/collecteurs"

# Répertoire de rancid (pour la fonction liste-ce)
set conf(ranciddir) "/local/idr/conf/osiris/"

# Répertoire de topo (pour la fonction backboneports)
set conf(topodir) "/local/applis/topo"

# proc initpol :
#
# cette fonction est appelé au debut de la procédure principale
# (main) du script pollmac
#
# Elle retourne un tableau associatif contenant :
#
# - grp : groupes d'équipements à poller
#
# - eq.nomdugroupe : liste des équipements du groupe
# - type.nomdugroupe : ipmac ou portmac
#
# !!! ATTENTION !!! 
# Pour un type donné (ipmac ou portmac), il ne peut
# y avoir qu'un seul groupe.
#
# - script.nomdugroupe.nomrouteur : script de collecte
#
# - filtreplus.nomdugroupe.nomrouteur : filtre pour sélectionner
#   certaines lignes produites par le script
#
# - filtremoins.nomdugroupe.nomrouteur : filtre pour éliminer
#   certaines lignes produites par le script
#
# un filtre est une commande tcl qui sera evaluee dans la
# boucle de collecte. il peut porter sur les 
# champ de la liste l (en fonction du type :
# de la forme :
#    {ip mac} pour le type ipmac
# ou
#    {idvlan port eq mac}  pour le type portmac 
#

proc initpol {varpolicy} {
    upvar $varpolicy policy
    global conf

    # Les groupes collectés
    set policy(grp) {OsirisGW OsirisCommut}

    # OsirisGW : routeurs & firewalls
    set firewalls   {172.16.208.194 ash.u-strasbg.fr umb-fw1.u-strasbg.fr}
    set routeurs   {espla-rc1.u-strasbg.fr histo-rc1.u-strasbg.fr}
    set policy(eq.OsirisGW)   [concat $routeurs $firewalls]
    set policy(type.OsirisGW) "ipmac"

    # Définition du script pour les firewalls
    foreach f $firewalls {
	set policy(script.OsirisGW.$f) "$conf(scriptdir)/collarp"
    }

    # Définition du script et du filtre pour chaque routeur
    foreach r $routeurs {
	set policy(script.OsirisGW.$r) "$conf(scriptdir)/junip46"
	set policy(filtremoins.OsirisGW.$r) "regexp -nocase {^fe80:} \[lindex \$l 0\]"
    }

    # Switches
    set policy(eq.OsirisCommut)   [liste-commut]
    set policy(type.OsirisCommut) "portmac"

    # Définition du script et du filtremoins pour chaque switch
    backboneports bbport

    foreach s $policy(eq.OsirisCommut) {
	set policy(script.OsirisCommut.$s) "$conf(scriptdir)/ciscoportmac"
	if { [info exists bbport($s)] } {
	    set ports [join $bbport($s) "|"]
	    # exclure les port backbone
	    set policy(filtremoins.OsirisCommut.$s) "regexp {^($ports)$} \[lindex \$l 3\]"
	}
    }
}

#
# Extrait la liste des switches du fichier des équipements de Rancid
#

proc liste-commut {} {
    global conf

    set l {}

    # Fichier Rancid contenant la liste des équipements
    set filename   "$conf(ranciddir)/router.db"

    # Critères de sélection des équipements
    set switchpat  {^(.+-c[ge][1-9]+|.+-poe[1-9]+).u-strasbg.fr$}
    set switchtype "cisco"

    catch {set fd [open $filename "r"]} msg
    if { ![info exists fd] } {
	puts stderr "liste-ce : erreur d'ouverture du fichier $filename ($msg)"
    } else {
	while { [gets $fd line] != -1 } {
	    set cols [split $line ":"]
	    set hostname [lindex $cols 0]
	    set type [lindex $cols 1]
	    set status [lindex $cols 2]

	    if {$type eq $switchtype && $status eq "up"} {

		# Ne conserve que les équipement dont le nom
		# correspond au pattern

		if { [regexp $switchpat $hostname bidon h] } {
		    lappend l $h
		}
	    }
	}
	close $fd
    }

    return $l
}

# A partir des informations de topologie, on constitue un tableau associant
# un switch et une liste des ports qui sont de type "backbone"
proc backboneports {bbport} {
    global conf
    upvar $bbport bbp

    set topodir $conf(topodir)
    set cmdname "| $topodir/bin/extractl1 -a -b < $topodir/osiris/osiris.graph "

    if {[catch { set p [open "$cmdname" "r"] } msg]} then {
        puts stderr "backboneports, command '$cmdname' failed : $msg"
    } else {
	while { [gets $p line ] != -1 } {

	    # Normalisation
	    set line [string tolower $line]
	    regsub -all "gigabitethernet" $line "gi" line
	    regsub -all "fastethernet" $line "fa" line
	    regsub -all "port-channel" $line "po" line

	    # Affectation de la liste des ports backbone
	    set l [split $line]
	    set eqname [lindex $l 0]
	    set bbp($eqname) [lreplace $l 0 0]
	}
	close $p
    }
}
